Namespace(arch='resnet50', batch_size=256, cls_num=0, cls_size=[1000], data='10class', dim=128, hidden_dim=4096, imagenet_info_path='./imagenet_info/', kmeans_cls=None, model='self-classifier', no_leaky=False, num_classes=15, num_cls=1, num_hidden=3, num_samples_per_class=9, pretrained=None, print_freq=10, save_path='../saved/', seed=None, subset_file=None, superclass=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet50'
Namespace(activation='relu', arch='resnet50', batch_size=256, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=3, num_samples_per_class=9, pretrained=None, print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet50'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=2048, out_features=4096, bias=True)
      (1): ReLU()
      (2): Linear(in_features=4096, out_features=4096, bias=True)
      (3): ReLU()
      (4): Linear(in_features=4096, out_features=4096, bias=True)
      (5): ReLU()
      (6): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> using 1 GPUs.
Namespace(activation='relu', arch='resnet50', batch_size=256, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=3, num_samples_per_class=9, pretrained=None, print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet50'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=2048, out_features=4096, bias=True)
      (1): ReLU()
      (2): Linear(in_features=4096, out_features=4096, bias=True)
      (3): ReLU()
      (4): Linear(in_features=4096, out_features=4096, bias=True)
      (5): ReLU()
      (6): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> using 1 GPUs.
Namespace(activation='relu', arch='resnet50', batch_size=256, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=3, num_samples_per_class=9, pretrained=None, print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet50'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=2048, out_features=4096, bias=True)
      (1): ReLU()
      (2): Linear(in_features=4096, out_features=4096, bias=True)
      (3): ReLU()
      (4): Linear(in_features=4096, out_features=4096, bias=True)
      (5): ReLU()
      (6): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> using 1 GPUs.
Namespace(activation='relu', arch='resnet50', batch_size=256, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=3, num_samples_per_class=9, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet50'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=2048, out_features=4096, bias=True)
      (1): ReLU()
      (2): Linear(in_features=4096, out_features=4096, bias=True)
      (3): ReLU()
      (4): Linear(in_features=4096, out_features=4096, bias=True)
      (5): ReLU()
      (6): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
Namespace(activation='relu', arch='resnet50', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=2, num_samples_per_class=9, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet50'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=2048, out_features=4096, bias=True)
      (1): ReLU()
      (2): Linear(in_features=4096, out_features=4096, bias=True)
      (3): ReLU()
      (4): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
Namespace(activation='relu', arch='resnet50', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=3, num_samples_per_class=9, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet50'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=2048, out_features=4096, bias=True)
      (1): ReLU()
      (2): Linear(in_features=4096, out_features=4096, bias=True)
      (3): ReLU()
      (4): Linear(in_features=4096, out_features=4096, bias=True)
      (5): ReLU()
      (6): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
Namespace(activation='relu', arch='resnet50', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=1, num_samples_per_class=9, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet50'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=2048, out_features=4096, bias=True)
      (1): ReLU()
      (2): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
Namespace(activation='relu', arch='resnet50', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=0, num_samples_per_class=9, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet50'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Linear(in_features=2048, out_features=128, bias=True)
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
Namespace(activation='relu', arch='resnet50', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=3, num_samples_per_class=9, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet50'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=2048, out_features=4096, bias=True)
      (1): ReLU()
      (2): Linear(in_features=4096, out_features=4096, bias=True)
      (3): ReLU()
      (4): Linear(in_features=4096, out_features=4096, bias=True)
      (5): ReLU()
      (6): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
Namespace(activation='relu', arch='resnet50', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=1, num_samples_per_class=9, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet50'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=2048, out_features=4096, bias=True)
      (1): ReLU()
      (2): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
Namespace(activation='relu', arch='resnet50', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=2048, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=1, num_samples_per_class=9, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet50'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=2048, out_features=2048, bias=True)
      (1): ReLU()
      (2): Linear(in_features=2048, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
Namespace(activation='relu', arch='resnet50', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=1, num_samples_per_class=9, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet50'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=2048, out_features=4096, bias=True)
      (1): ReLU()
      (2): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
Namespace(activation='relu', arch='resnet50', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=2, num_samples_per_class=9, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet50'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=2048, out_features=4096, bias=True)
      (1): ReLU()
      (2): Linear(in_features=4096, out_features=4096, bias=True)
      (3): ReLU()
      (4): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
Namespace(activation='relu', arch='resnet50', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=2, num_samples_per_class=9, pretrained='saved/model_last.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet50'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=2048, out_features=4096, bias=True)
      (1): ReLU()
      (2): Linear(in_features=4096, out_features=4096, bias=True)
      (3): ReLU()
      (4): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_last.pth.tar'
Namespace(activation='relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=2, num_samples_per_class=9, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): ReLU()
      (2): Linear(in_features=4096, out_features=4096, bias=True)
      (3): ReLU()
      (4): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
Namespace(activation='relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=3, num_samples_per_class=9, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): ReLU()
      (2): Linear(in_features=4096, out_features=4096, bias=True)
      (3): ReLU()
      (4): Linear(in_features=4096, out_features=4096, bias=True)
      (5): ReLU()
      (6): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
Namespace(activation='relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=1, num_samples_per_class=9, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): ReLU()
      (2): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
Namespace(activation='relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=3, num_samples_per_class=9, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): ReLU()
      (2): Linear(in_features=4096, out_features=4096, bias=True)
      (3): ReLU()
      (4): Linear(in_features=4096, out_features=4096, bias=True)
      (5): ReLU()
      (6): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
Namespace(activation='relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=2, num_samples_per_class=9, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): ReLU()
      (2): Linear(in_features=4096, out_features=4096, bias=True)
      (3): ReLU()
      (4): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
Namespace(activation='relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=2, num_samples_per_class=9, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): ReLU()
      (2): Linear(in_features=4096, out_features=4096, bias=True)
      (3): ReLU()
      (4): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
Namespace(activation='relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=3, num_samples_per_class=9, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): ReLU()
      (2): Linear(in_features=4096, out_features=4096, bias=True)
      (3): ReLU()
      (4): Linear(in_features=4096, out_features=4096, bias=True)
      (5): ReLU()
      (6): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
Namespace(activation='relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=4, num_samples_per_class=9, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): ReLU()
      (2): Linear(in_features=4096, out_features=4096, bias=True)
      (3): ReLU()
      (4): Linear(in_features=4096, out_features=4096, bias=True)
      (5): ReLU()
      (6): Linear(in_features=4096, out_features=4096, bias=True)
      (7): ReLU()
      (8): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
Namespace(activation='relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=2, num_samples_per_class=9, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): ReLU()
      (2): Linear(in_features=4096, out_features=4096, bias=True)
      (3): ReLU()
      (4): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
Namespace(activation='relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=3, num_samples_per_class=9, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): ReLU()
      (2): Linear(in_features=4096, out_features=4096, bias=True)
      (3): ReLU()
      (4): Linear(in_features=4096, out_features=4096, bias=True)
      (5): ReLU()
      (6): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
Namespace(activation='relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=3, num_samples_per_class=9, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): ReLU()
      (2): Linear(in_features=4096, out_features=4096, bias=True)
      (3): ReLU()
      (4): Linear(in_features=4096, out_features=4096, bias=True)
      (5): ReLU()
      (6): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
=> loaded pre-trained model 'saved/model_best.pth.tar' (epoch 2)
=> using 1 GPUs.
Namespace(activation='relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=3, num_samples_per_class=9, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): ReLU()
      (2): Linear(in_features=4096, out_features=4096, bias=True)
      (3): ReLU()
      (4): Linear(in_features=4096, out_features=4096, bias=True)
      (5): ReLU()
      (6): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
=> loaded pre-trained model 'saved/model_best.pth.tar' (epoch 2)
=> using 1 GPUs.
Namespace(activation='relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=3, num_samples_per_class=9, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): ReLU()
      (2): Linear(in_features=4096, out_features=4096, bias=True)
      (3): ReLU()
      (4): Linear(in_features=4096, out_features=4096, bias=True)
      (5): ReLU()
      (6): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
=> loaded pre-trained model 'saved/model_best.pth.tar' (epoch 2)
=> using 1 GPUs.
Namespace(activation='relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=3, num_samples_per_class=9, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): ReLU()
      (2): Linear(in_features=4096, out_features=4096, bias=True)
      (3): ReLU()
      (4): Linear(in_features=4096, out_features=4096, bias=True)
      (5): ReLU()
      (6): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
=> loaded pre-trained model 'saved/model_best.pth.tar' (epoch 2)
=> using 1 GPUs.
Test: [0/7]	Time  1.948 ( 1.948)
=> number of samples: 100
=> number of unique assignments: 1
=> NMI: 0.000%
=> Adjusted NMI: 0.000%
=> Adjusted Rand-Index: 0.000%
=> Accuracy: 10.000%
=> saved grid_0.pdf, accuracy = 0.100, nsamples = 100
=> grid 0 labels: [2 8 0 5 7 9 1 7 5]
Namespace(activation='relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=3, num_samples_per_class=9, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): ReLU()
      (2): Linear(in_features=4096, out_features=4096, bias=True)
      (3): ReLU()
      (4): Linear(in_features=4096, out_features=4096, bias=True)
      (5): ReLU()
      (6): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
=> loaded pre-trained model 'saved/model_best.pth.tar' (epoch 2)
=> using 1 GPUs.
Test: [0/7]	Time  1.942 ( 1.942)
=> number of samples: 100
=> number of unique assignments: 1
=> NMI: 0.000%
=> Adjusted NMI: 0.000%
=> Adjusted Rand-Index: 0.000%
=> Accuracy: 10.000%
=> saved grid_0.pdf, accuracy = 0.100, nsamples = 100
=> grid 0 labels: [2 8 0 5 7 9 1 7 5]
Namespace(activation='relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=3, num_samples_per_class=9, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): ReLU()
      (2): Linear(in_features=4096, out_features=4096, bias=True)
      (3): ReLU()
      (4): Linear(in_features=4096, out_features=4096, bias=True)
      (5): ReLU()
      (6): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
=> loaded pre-trained model 'saved/model_best.pth.tar' (epoch 2)
=> using 1 GPUs.
Test: [0/7]	Time  1.917 ( 1.917)
=> number of samples: 100
=> number of unique assignments: 1
=> NMI: 0.000%
=> Adjusted NMI: 0.000%
=> Adjusted Rand-Index: 0.000%
=> Accuracy: 10.000%
label_i 0
preds [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
np.where(preds == label_i) (array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
       85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]),)
=> saved grid_0.pdf, accuracy = 0.100, nsamples = 100
=> grid 0 labels: [2 8 0 5 7 9 1 7 5]
label_i 9
preds [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
np.where(preds == label_i) (array([], dtype=int64),)
Namespace(activation='relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=3, num_samples_per_class=9, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): ReLU()
      (2): Linear(in_features=4096, out_features=4096, bias=True)
      (3): ReLU()
      (4): Linear(in_features=4096, out_features=4096, bias=True)
      (5): ReLU()
      (6): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
=> loaded pre-trained model 'saved/model_best.pth.tar' (epoch 2)
=> using 1 GPUs.
Test: [0/7]	Time  1.981 ( 1.981)
=> number of samples: 100
=> number of unique assignments: 1
=> NMI: 0.000%
=> Adjusted NMI: 0.000%
=> Adjusted Rand-Index: 0.000%
=> Accuracy: 10.000%
label_i 0
preds [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
np.where(preds == label_i) (array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
       85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]),)
=> saved grid_0.pdf, accuracy = 0.100, nsamples = 100
=> grid 0 labels: [2 8 0 5 7 9 1 7 5]
label_i 9
preds [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
np.where(preds == label_i) (array([], dtype=int64),)
Namespace(activation='relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=3, num_samples_per_class=9, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): ReLU()
      (2): Linear(in_features=4096, out_features=4096, bias=True)
      (3): ReLU()
      (4): Linear(in_features=4096, out_features=4096, bias=True)
      (5): ReLU()
      (6): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
=> loaded pre-trained model 'saved/model_best.pth.tar' (epoch 2)
=> using 1 GPUs.
Test: [0/7]	Time  1.965 ( 1.965)
targets:  [0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3
 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7
 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9]
preds:  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
=> number of samples: 100
=> number of unique assignments: 1
=> NMI: 0.000%
=> Adjusted NMI: 0.000%
=> Adjusted Rand-Index: 0.000%
=> Accuracy: 10.000%
label_i 0
preds [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
np.where(preds == label_i) (array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
       85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]),)
Namespace(activation='relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=1, num_samples_per_class=9, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): ReLU()
      (2): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
Namespace(activation='relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=2, num_samples_per_class=9, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): ReLU()
      (2): Linear(in_features=4096, out_features=4096, bias=True)
      (3): ReLU()
      (4): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
Namespace(activation='relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=1, num_samples_per_class=9, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): ReLU()
      (2): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
Namespace(activation='relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=0, num_samples_per_class=9, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Linear(in_features=512, out_features=128, bias=True)
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
Namespace(activation='relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=1, num_samples_per_class=9, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): ReLU()
      (2): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
Namespace(activation='relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=1, num_samples_per_class=9, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): ReLU()
      (2): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
Namespace(activation='relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=2, num_samples_per_class=9, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): ReLU()
      (2): Linear(in_features=4096, out_features=4096, bias=True)
      (3): ReLU()
      (4): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
Namespace(activation='relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=0, num_samples_per_class=9, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Linear(in_features=512, out_features=128, bias=True)
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
Namespace(activation='relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=2, num_samples_per_class=9, pretrained='saved/model_100.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): ReLU()
      (2): Linear(in_features=4096, out_features=4096, bias=True)
      (3): ReLU()
      (4): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_100.pth.tar'
Namespace(activation='relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=1, num_samples_per_class=9, pretrained='saved/model_100.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): ReLU()
      (2): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_100.pth.tar'
Namespace(activation='relu', arch='resnet50', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=2, num_samples_per_class=9, pretrained='saved/model_100.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet50'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=2048, out_features=4096, bias=True)
      (1): ReLU()
      (2): Linear(in_features=4096, out_features=4096, bias=True)
      (3): ReLU()
      (4): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_100.pth.tar'
Namespace(activation='relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=1, num_samples_per_class=9, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=True, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): BatchNorm1d(4096, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU()
      (3): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
=> loaded pre-trained model 'saved/model_best.pth.tar' (epoch 99)
=> using 1 GPUs.
Test: [0/7]	Time  1.943 ( 1.943)
targets:  [0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3
 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7
 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9]
preds:  [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
=> number of samples: 100
=> number of unique assignments: 10
=> NMI: 49.918%
=> Adjusted NMI: 36.258%
=> Adjusted Rand-Index: 29.252%
=> Accuracy: 52.000%
label_i 7
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([10, 11, 12, 13, 14, 15, 16, 17, 18, 19]),)
Namespace(activation='relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=1, num_samples_per_class=9, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=True, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): BatchNorm1d(4096, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU()
      (3): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
=> loaded pre-trained model 'saved/model_best.pth.tar' (epoch 99)
=> using 1 GPUs.
Test: [0/7]	Time  1.961 ( 1.961)
targets:  [0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3
 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7
 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9]
preds:  [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
=> number of samples: 100
=> number of unique assignments: 10
=> NMI: 49.918%
=> Adjusted NMI: 36.258%
=> Adjusted Rand-Index: 29.252%
=> Accuracy: 52.000%
label_i 7
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([10, 11, 12, 13, 14, 15, 16, 17, 18, 19]),)
=> saved grid_0.pdf, accuracy = 1.000, nsamples = 10
=> grid 0 labels: [1 1 1 1 1 1 1 1 1]
label_i 4
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([ 9, 30, 31, 32, 33, 34, 35, 36, 37, 38, 47, 80, 86]),)
=> saved grid_1.pdf, accuracy = 0.692, nsamples = 13
=> grid 1 labels: [3 8 3 4 3 3 3 3 3]
label_i 2
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([20, 21, 26, 27, 28, 42, 44, 85, 99]),)
=> saved grid_2.pdf, accuracy = 0.556, nsamples = 9
=> grid 2 labels: [8 2 2 2 9 4 2 2 4]
label_i 5
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([ 7,  8, 25, 62, 67, 68, 70, 72, 73, 74, 75, 76, 78, 79, 82]),)
=> saved grid_3.pdf, accuracy = 0.533, nsamples = 15
=> grid 3 labels: [0 7 7 7 8 6 2 7 7]
label_i 9
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([22, 49, 50, 51, 52, 55, 57, 58, 63, 71, 77, 92, 97]),)
=> saved grid_4.pdf, accuracy = 0.462, nsamples = 13
=> grid 4 labels: [5 9 5 7 5 6 4 5 7]
label_i 6
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([23, 56, 61, 65, 66, 81, 84, 89, 96]),)
=> saved grid_5.pdf, accuracy = 0.333, nsamples = 9
=> grid 5 labels: [8 6 5 6 9 8 6 2 8]
label_i 1
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([ 1,  4,  5,  6, 24, 45, 64, 69, 91, 95, 98]),)
=> saved grid_6.pdf, accuracy = 0.273, nsamples = 11
=> grid 6 labels: [2 9 0 9 6 0 6 9 0]
label_i 8
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([39, 40, 60, 83, 88, 90, 94]),)
Namespace(activation='relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=0, num_samples_per_class=2, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Linear(in_features=512, out_features=128, bias=True)
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
Namespace(activation='relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=1, num_samples_per_class=2, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): ReLU()
      (2): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
Namespace(activation='relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=1, num_samples_per_class=2, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=True, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): BatchNorm1d(4096, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU()
      (3): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
=> loaded pre-trained model 'saved/model_best.pth.tar' (epoch 99)
=> using 1 GPUs.
Test: [0/7]	Time  1.936 ( 1.936)
targets:  [0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3
 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7
 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9]
preds:  [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
=> number of samples: 100
=> number of unique assignments: 10
=> NMI: 49.918%
=> Adjusted NMI: 36.258%
=> Adjusted Rand-Index: 29.252%
=> Accuracy: 52.000%
label_i 7
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([10, 11, 12, 13, 14, 15, 16, 17, 18, 19]),)
Namespace(activation='relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=1, num_samples_per_class=10, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=True, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): BatchNorm1d(4096, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU()
      (3): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
=> loaded pre-trained model 'saved/model_best.pth.tar' (epoch 99)
=> using 1 GPUs.
Test: [0/7]	Time  1.979 ( 1.979)
targets:  [0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3
 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7
 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9]
preds:  [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
=> number of samples: 100
=> number of unique assignments: 10
=> NMI: 49.918%
=> Adjusted NMI: 36.258%
=> Adjusted Rand-Index: 29.252%
=> Accuracy: 52.000%
label_i 7
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([10, 11, 12, 13, 14, 15, 16, 17, 18, 19]),)
Namespace(activation='relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=1, num_samples_per_class=1, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=True, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): BatchNorm1d(4096, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU()
      (3): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
=> loaded pre-trained model 'saved/model_best.pth.tar' (epoch 99)
=> using 1 GPUs.
Test: [0/7]	Time  1.953 ( 1.953)
targets:  [0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3
 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7
 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9]
preds:  [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
=> number of samples: 100
=> number of unique assignments: 10
=> NMI: 49.918%
=> Adjusted NMI: 36.258%
=> Adjusted Rand-Index: 29.252%
=> Accuracy: 52.000%
label_i 7
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([10, 11, 12, 13, 14, 15, 16, 17, 18, 19]),)
=> saved grid_0.pdf, accuracy = 1.000, nsamples = 10
=> grid 0 labels: [1]
label_i 4
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([ 9, 30, 31, 32, 33, 34, 35, 36, 37, 38, 47, 80, 86]),)
=> saved grid_1.pdf, accuracy = 0.692, nsamples = 13
=> grid 1 labels: [3]
label_i 2
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([20, 21, 26, 27, 28, 42, 44, 85, 99]),)
=> saved grid_2.pdf, accuracy = 0.556, nsamples = 9
=> grid 2 labels: [8]
label_i 5
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([ 7,  8, 25, 62, 67, 68, 70, 72, 73, 74, 75, 76, 78, 79, 82]),)
=> saved grid_3.pdf, accuracy = 0.533, nsamples = 15
=> grid 3 labels: [0]
label_i 3
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([41, 46, 48, 53, 54, 59]),)
=> saved grid_4.pdf, accuracy = 0.500, nsamples = 6
=> grid 4 labels: [5]
label_i 9
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([22, 49, 50, 51, 52, 55, 57, 58, 63, 71, 77, 92, 97]),)
=> saved grid_5.pdf, accuracy = 0.462, nsamples = 13
=> grid 5 labels: [5]
label_i 0
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([ 0,  2,  3, 29, 43, 87, 93]),)
=> saved grid_6.pdf, accuracy = 0.429, nsamples = 7
=> grid 6 labels: [9]
label_i 6
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([23, 56, 61, 65, 66, 81, 84, 89, 96]),)
=> saved grid_7.pdf, accuracy = 0.333, nsamples = 9
=> grid 7 labels: [8]
label_i 8
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([39, 40, 60, 83, 88, 90, 94]),)
=> saved grid_8.pdf, accuracy = 0.286, nsamples = 7
=> grid 8 labels: [9]
label_i 1
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([ 1,  4,  5,  6, 24, 45, 64, 69, 91, 95, 98]),)
=> saved grid_9.pdf, accuracy = 0.273, nsamples = 11
=> grid 9 labels: [2]
Namespace(activation='relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=1, num_samples_per_class=5, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=True, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): BatchNorm1d(4096, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU()
      (3): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
=> loaded pre-trained model 'saved/model_best.pth.tar' (epoch 99)
=> using 1 GPUs.
Test: [0/7]	Time  1.964 ( 1.964)
targets:  [0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3
 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7
 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9]
preds:  [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
=> number of samples: 100
=> number of unique assignments: 10
=> NMI: 49.918%
=> Adjusted NMI: 36.258%
=> Adjusted Rand-Index: 29.252%
=> Accuracy: 52.000%
label_i 7
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([10, 11, 12, 13, 14, 15, 16, 17, 18, 19]),)
Namespace(activation='relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=1, num_samples_per_class=3, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=True, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): BatchNorm1d(4096, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU()
      (3): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
=> loaded pre-trained model 'saved/model_best.pth.tar' (epoch 99)
=> using 1 GPUs.
Test: [0/7]	Time  1.972 ( 1.972)
targets:  [0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3
 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7
 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9]
preds:  [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
=> number of samples: 100
=> number of unique assignments: 10
=> NMI: 49.918%
=> Adjusted NMI: 36.258%
=> Adjusted Rand-Index: 29.252%
=> Accuracy: 52.000%
label_i 7
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([10, 11, 12, 13, 14, 15, 16, 17, 18, 19]),)
Namespace(activation='relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=1, num_samples_per_class=3, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=True, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): BatchNorm1d(4096, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU()
      (3): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
=> loaded pre-trained model 'saved/model_best.pth.tar' (epoch 99)
=> using 1 GPUs.
Test: [0/7]	Time  1.967 ( 1.967)
targets:  [0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3
 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7
 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9]
preds:  [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
=> number of samples: 100
=> number of unique assignments: 10
=> NMI: 49.918%
=> Adjusted NMI: 36.258%
=> Adjusted Rand-Index: 29.252%
=> Accuracy: 52.000%
label_i 7
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([10, 11, 12, 13, 14, 15, 16, 17, 18, 19]),)
sample_indices [10 11 12 13 14 15 16 17 18 19]
subset_sample_indices [12 18 14]
subset_img_paths ['10class/val/n02074367/images/n02074367_492.JPEG', '10class/val/n02074367/images/n02074367_498.JPEG', '10class/val/n02074367/images/n02074367_494.JPEG']
rows:  1
cols:  1
len imgs:  3
Namespace(activation='relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=1, num_samples_per_class=4, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=True, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): BatchNorm1d(4096, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU()
      (3): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
=> loaded pre-trained model 'saved/model_best.pth.tar' (epoch 99)
=> using 1 GPUs.
Test: [0/7]	Time  1.977 ( 1.977)
targets:  [0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3
 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7
 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9]
preds:  [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
=> number of samples: 100
=> number of unique assignments: 10
=> NMI: 49.918%
=> Adjusted NMI: 36.258%
=> Adjusted Rand-Index: 29.252%
=> Accuracy: 52.000%
label_i 7
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([10, 11, 12, 13, 14, 15, 16, 17, 18, 19]),)
sample_indices [10 11 12 13 14 15 16 17 18 19]
subset_sample_indices [12 18 14 19]
subset_img_paths ['10class/val/n02074367/images/n02074367_492.JPEG', '10class/val/n02074367/images/n02074367_498.JPEG', '10class/val/n02074367/images/n02074367_494.JPEG', '10class/val/n02074367/images/n02074367_499.JPEG']
rows:  2
cols:  2
len imgs:  4
=> saved grid_0.pdf, accuracy = 1.000, nsamples = 10
=> grid 0 labels: [1 1 1 1]
label_i 4
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([ 9, 30, 31, 32, 33, 34, 35, 36, 37, 38, 47, 80, 86]),)
sample_indices [ 9 30 31 32 33 34 35 36 37 38 47 80 86]
subset_sample_indices [35 80 33 47]
subset_img_paths ['10class/val/n03100240/images/n03100240_195.JPEG', '10class/val/n09246464/images/n09246464_260.JPEG', '10class/val/n03100240/images/n03100240_193.JPEG', '10class/val/n04099969/images/n04099969_167.JPEG']
rows:  2
cols:  2
len imgs:  4
=> saved grid_1.pdf, accuracy = 0.692, nsamples = 13
=> grid 1 labels: [3 8 3 4]
label_i 2
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([20, 21, 26, 27, 28, 42, 44, 85, 99]),)
sample_indices [20 21 26 27 28 42 44 85 99]
subset_sample_indices [85 26 21 28]
subset_img_paths ['10class/val/n09246464/images/n09246464_265.JPEG', '10class/val/n02504458/images/n02504458_366.JPEG', '10class/val/n02504458/images/n02504458_361.JPEG', '10class/val/n02504458/images/n02504458_368.JPEG']
rows:  2
cols:  2
len imgs:  4
=> saved grid_2.pdf, accuracy = 0.556, nsamples = 9
=> grid 2 labels: [8 2 2 2]
label_i 5
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([ 7,  8, 25, 62, 67, 68, 70, 72, 73, 74, 75, 76, 78, 79, 82]),)
sample_indices [ 7  8 25 62 67 68 70 72 73 74 75 76 78 79 82]
subset_sample_indices [ 8 70 73 74]
subset_img_paths ['10class/val/n01443537/images/n01443537_498.JPEG', '10class/val/n07873807/images/n07873807_265.JPEG', '10class/val/n07873807/images/n07873807_268.JPEG', '10class/val/n07873807/images/n07873807_269.JPEG']
rows:  2
cols:  2
len imgs:  4
=> saved grid_3.pdf, accuracy = 0.533, nsamples = 15
=> grid 3 labels: [0 7 7 7]
label_i 3
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([41, 46, 48, 53, 54, 59]),)
sample_indices [41 46 48 53 54 59]
subset_sample_indices [59 48 46 53]
subset_img_paths ['10class/val/n06596364/images/n06596364_349.JPEG', '10class/val/n04099969/images/n04099969_168.JPEG', '10class/val/n04099969/images/n04099969_166.JPEG', '10class/val/n06596364/images/n06596364_343.JPEG']
rows:  2
cols:  2
len imgs:  4
=> saved grid_4.pdf, accuracy = 0.500, nsamples = 6
=> grid 4 labels: [5 4 4 5]
label_i 9
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([22, 49, 50, 51, 52, 55, 57, 58, 63, 71, 77, 92, 97]),)
sample_indices [22 49 50 51 52 55 57 58 63 71 77 92 97]
subset_sample_indices [57 92 52 77]
subset_img_paths ['10class/val/n06596364/images/n06596364_347.JPEG', '10class/val/n12267677/images/n12267677_302.JPEG', '10class/val/n06596364/images/n06596364_342.JPEG', '10class/val/n07873807/images/n07873807_272.JPEG']
rows:  2
cols:  2
len imgs:  4
=> saved grid_5.pdf, accuracy = 0.462, nsamples = 13
=> grid 5 labels: [5 9 5 7]
label_i 0
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([ 0,  2,  3, 29, 43, 87, 93]),)
sample_indices [ 0  2  3 29 43 87 93]
subset_sample_indices [93  3  2 29]
subset_img_paths ['10class/val/n12267677/images/n12267677_303.JPEG', '10class/val/n01443537/images/n01443537_493.JPEG', '10class/val/n01443537/images/n01443537_492.JPEG', '10class/val/n02504458/images/n02504458_369.JPEG']
rows:  2
cols:  2
len imgs:  4
=> saved grid_6.pdf, accuracy = 0.429, nsamples = 7
=> grid 6 labels: [9 0 0 2]
label_i 6
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([23, 56, 61, 65, 66, 81, 84, 89, 96]),)
sample_indices [23 56 61 65 66 81 84 89 96]
subset_sample_indices [89 61 56 66]
subset_img_paths ['10class/val/n09246464/images/n09246464_269.JPEG', '10class/val/n07583066/images/n07583066_271.JPEG', '10class/val/n06596364/images/n06596364_346.JPEG', '10class/val/n07583066/images/n07583066_276.JPEG']
rows:  2
cols:  2
len imgs:  4
=> saved grid_7.pdf, accuracy = 0.333, nsamples = 9
=> grid 7 labels: [8 6 5 6]
label_i 8
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([39, 40, 60, 83, 88, 90, 94]),)
sample_indices [39 40 60 83 88 90 94]
subset_sample_indices [94 60 40 83]
subset_img_paths ['10class/val/n12267677/images/n12267677_304.JPEG', '10class/val/n07583066/images/n07583066_270.JPEG', '10class/val/n04099969/images/n04099969_160.JPEG', '10class/val/n09246464/images/n09246464_263.JPEG']
rows:  2
cols:  2
len imgs:  4
=> saved grid_8.pdf, accuracy = 0.286, nsamples = 7
=> grid 8 labels: [9 6 4 8]
label_i 1
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([ 1,  4,  5,  6, 24, 45, 64, 69, 91, 95, 98]),)
sample_indices [ 1  4  5  6 24 45 64 69 91 95 98]
subset_sample_indices [24 95  5 98]
subset_img_paths ['10class/val/n02504458/images/n02504458_364.JPEG', '10class/val/n12267677/images/n12267677_305.JPEG', '10class/val/n01443537/images/n01443537_495.JPEG', '10class/val/n12267677/images/n12267677_308.JPEG']
rows:  2
cols:  2
len imgs:  4
=> saved grid_9.pdf, accuracy = 0.273, nsamples = 11
=> grid 9 labels: [2 9 0 9]
Namespace(activation='relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=1, num_samples_per_class=16, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=True, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): BatchNorm1d(4096, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU()
      (3): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
=> loaded pre-trained model 'saved/model_best.pth.tar' (epoch 99)
=> using 1 GPUs.
Test: [0/7]	Time  1.951 ( 1.951)
targets:  [0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3
 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7
 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9]
preds:  [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
=> number of samples: 100
=> number of unique assignments: 10
=> NMI: 49.918%
=> Adjusted NMI: 36.258%
=> Adjusted Rand-Index: 29.252%
=> Accuracy: 52.000%
label_i 9
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([22, 49, 50, 51, 52, 55, 57, 58, 63, 71, 77, 92, 97]),)
sample_indices [22 49 50 51 52 55 57 58 63 71 77 92 97]
Namespace(activation='relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=1, num_samples_per_class=9, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=True, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): BatchNorm1d(4096, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU()
      (3): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
=> loaded pre-trained model 'saved/model_best.pth.tar' (epoch 99)
=> using 1 GPUs.
Test: [0/7]	Time  1.968 ( 1.968)
targets:  [0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3
 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7
 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9]
preds:  [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
=> number of samples: 100
=> number of unique assignments: 10
=> NMI: 49.918%
=> Adjusted NMI: 36.258%
=> Adjusted Rand-Index: 29.252%
=> Accuracy: 52.000%
label_i 7
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([10, 11, 12, 13, 14, 15, 16, 17, 18, 19]),)
sample_indices [10 11 12 13 14 15 16 17 18 19]
subset_sample_indices [12 18 14 19 11 16 17 13 10]
subset_img_paths ['10class/val/n02074367/images/n02074367_492.JPEG', '10class/val/n02074367/images/n02074367_498.JPEG', '10class/val/n02074367/images/n02074367_494.JPEG', '10class/val/n02074367/images/n02074367_499.JPEG', '10class/val/n02074367/images/n02074367_491.JPEG', '10class/val/n02074367/images/n02074367_496.JPEG', '10class/val/n02074367/images/n02074367_497.JPEG', '10class/val/n02074367/images/n02074367_493.JPEG', '10class/val/n02074367/images/n02074367_490.JPEG']
rows:  3
cols:  3
len imgs:  9
=> saved grid_0.pdf, accuracy = 1.000, nsamples = 10
=> grid 0 labels: [1 1 1 1 1 1 1 1 1]
label_i 4
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([ 9, 30, 31, 32, 33, 34, 35, 36, 37, 38, 47, 80, 86]),)
sample_indices [ 9 30 31 32 33 34 35 36 37 38 47 80 86]
subset_sample_indices [35 80 33 47 31 37 30 36 38]
subset_img_paths ['10class/val/n03100240/images/n03100240_195.JPEG', '10class/val/n09246464/images/n09246464_260.JPEG', '10class/val/n03100240/images/n03100240_193.JPEG', '10class/val/n04099969/images/n04099969_167.JPEG', '10class/val/n03100240/images/n03100240_191.JPEG', '10class/val/n03100240/images/n03100240_197.JPEG', '10class/val/n03100240/images/n03100240_190.JPEG', '10class/val/n03100240/images/n03100240_196.JPEG', '10class/val/n03100240/images/n03100240_198.JPEG']
rows:  3
cols:  3
len imgs:  9
=> saved grid_1.pdf, accuracy = 0.692, nsamples = 13
=> grid 1 labels: [3 8 3 4 3 3 3 3 3]
label_i 2
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([20, 21, 26, 27, 28, 42, 44, 85, 99]),)
sample_indices [20 21 26 27 28 42 44 85 99]
subset_sample_indices [85 26 21 28 99 44 27 20 42]
subset_img_paths ['10class/val/n09246464/images/n09246464_265.JPEG', '10class/val/n02504458/images/n02504458_366.JPEG', '10class/val/n02504458/images/n02504458_361.JPEG', '10class/val/n02504458/images/n02504458_368.JPEG', '10class/val/n12267677/images/n12267677_309.JPEG', '10class/val/n04099969/images/n04099969_164.JPEG', '10class/val/n02504458/images/n02504458_367.JPEG', '10class/val/n02504458/images/n02504458_360.JPEG', '10class/val/n04099969/images/n04099969_162.JPEG']
rows:  3
cols:  3
len imgs:  9
=> saved grid_2.pdf, accuracy = 0.556, nsamples = 9
=> grid 2 labels: [8 2 2 2 9 4 2 2 4]
label_i 5
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([ 7,  8, 25, 62, 67, 68, 70, 72, 73, 74, 75, 76, 78, 79, 82]),)
sample_indices [ 7  8 25 62 67 68 70 72 73 74 75 76 78 79 82]
subset_sample_indices [ 8 70 73 74 82 67 25 79 75]
subset_img_paths ['10class/val/n01443537/images/n01443537_498.JPEG', '10class/val/n07873807/images/n07873807_265.JPEG', '10class/val/n07873807/images/n07873807_268.JPEG', '10class/val/n07873807/images/n07873807_269.JPEG', '10class/val/n09246464/images/n09246464_262.JPEG', '10class/val/n07583066/images/n07583066_277.JPEG', '10class/val/n02504458/images/n02504458_365.JPEG', '10class/val/n07873807/images/n07873807_274.JPEG', '10class/val/n07873807/images/n07873807_270.JPEG']
rows:  3
cols:  3
len imgs:  9
=> saved grid_3.pdf, accuracy = 0.533, nsamples = 15
=> grid 3 labels: [0 7 7 7 8 6 2 7 7]
label_i 9
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([22, 49, 50, 51, 52, 55, 57, 58, 63, 71, 77, 92, 97]),)
sample_indices [22 49 50 51 52 55 57 58 63 71 77 92 97]
subset_sample_indices [57 92 52 77 50 63 49 58 71]
subset_img_paths ['10class/val/n06596364/images/n06596364_347.JPEG', '10class/val/n12267677/images/n12267677_302.JPEG', '10class/val/n06596364/images/n06596364_342.JPEG', '10class/val/n07873807/images/n07873807_272.JPEG', '10class/val/n06596364/images/n06596364_340.JPEG', '10class/val/n07583066/images/n07583066_273.JPEG', '10class/val/n04099969/images/n04099969_169.JPEG', '10class/val/n06596364/images/n06596364_348.JPEG', '10class/val/n07873807/images/n07873807_266.JPEG']
rows:  3
cols:  3
len imgs:  9
=> saved grid_4.pdf, accuracy = 0.462, nsamples = 13
=> grid 4 labels: [5 9 5 7 5 6 4 5 7]
label_i 6
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([23, 56, 61, 65, 66, 81, 84, 89, 96]),)
sample_indices [23 56 61 65 66 81 84 89 96]
subset_sample_indices [89 61 56 66 96 84 65 23 81]
subset_img_paths ['10class/val/n09246464/images/n09246464_269.JPEG', '10class/val/n07583066/images/n07583066_271.JPEG', '10class/val/n06596364/images/n06596364_346.JPEG', '10class/val/n07583066/images/n07583066_276.JPEG', '10class/val/n12267677/images/n12267677_306.JPEG', '10class/val/n09246464/images/n09246464_264.JPEG', '10class/val/n07583066/images/n07583066_275.JPEG', '10class/val/n02504458/images/n02504458_363.JPEG', '10class/val/n09246464/images/n09246464_261.JPEG']
rows:  3
cols:  3
len imgs:  9
=> saved grid_5.pdf, accuracy = 0.333, nsamples = 9
=> grid 5 labels: [8 6 5 6 9 8 6 2 8]
label_i 1
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([ 1,  4,  5,  6, 24, 45, 64, 69, 91, 95, 98]),)
sample_indices [ 1  4  5  6 24 45 64 69 91 95 98]
subset_sample_indices [24 95  5 98 64  4 69 91  6]
subset_img_paths ['10class/val/n02504458/images/n02504458_364.JPEG', '10class/val/n12267677/images/n12267677_305.JPEG', '10class/val/n01443537/images/n01443537_495.JPEG', '10class/val/n12267677/images/n12267677_308.JPEG', '10class/val/n07583066/images/n07583066_274.JPEG', '10class/val/n01443537/images/n01443537_494.JPEG', '10class/val/n07583066/images/n07583066_279.JPEG', '10class/val/n12267677/images/n12267677_301.JPEG', '10class/val/n01443537/images/n01443537_496.JPEG']
rows:  3
cols:  3
len imgs:  9
=> saved grid_6.pdf, accuracy = 0.273, nsamples = 11
=> grid 6 labels: [2 9 0 9 6 0 6 9 0]
label_i 8
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([39, 40, 60, 83, 88, 90, 94]),)
sample_indices [39 40 60 83 88 90 94]
Namespace(activation='relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='10class', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=1, num_samples_per_class=4, pretrained='saved/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=True, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): BatchNorm1d(4096, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU()
      (3): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/model_best.pth.tar'
=> loaded pre-trained model 'saved/model_best.pth.tar' (epoch 99)
=> using 1 GPUs.
Test: [0/7]	Time  1.943 ( 1.943)
targets:  [0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3
 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7
 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9]
preds:  [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
=> number of samples: 100
=> number of unique assignments: 10
=> NMI: 49.918%
=> Adjusted NMI: 36.258%
=> Adjusted Rand-Index: 29.252%
=> Accuracy: 52.000%
label_i 7
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([10, 11, 12, 13, 14, 15, 16, 17, 18, 19]),)
sample_indices [10 11 12 13 14 15 16 17 18 19]
subset_sample_indices [12 18 14 19]
subset_img_paths ['10class/val/n02074367/images/n02074367_492.JPEG', '10class/val/n02074367/images/n02074367_498.JPEG', '10class/val/n02074367/images/n02074367_494.JPEG', '10class/val/n02074367/images/n02074367_499.JPEG']
rows:  2
cols:  2
len imgs:  4
=> saved grid_0.pdf, accuracy = 1.000, nsamples = 10
=> grid 0 labels: [1 1 1 1]
label_i 4
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([ 9, 30, 31, 32, 33, 34, 35, 36, 37, 38, 47, 80, 86]),)
sample_indices [ 9 30 31 32 33 34 35 36 37 38 47 80 86]
subset_sample_indices [35 80 33 47]
subset_img_paths ['10class/val/n03100240/images/n03100240_195.JPEG', '10class/val/n09246464/images/n09246464_260.JPEG', '10class/val/n03100240/images/n03100240_193.JPEG', '10class/val/n04099969/images/n04099969_167.JPEG']
rows:  2
cols:  2
len imgs:  4
=> saved grid_1.pdf, accuracy = 0.692, nsamples = 13
=> grid 1 labels: [3 8 3 4]
label_i 2
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([20, 21, 26, 27, 28, 42, 44, 85, 99]),)
sample_indices [20 21 26 27 28 42 44 85 99]
subset_sample_indices [85 26 21 28]
subset_img_paths ['10class/val/n09246464/images/n09246464_265.JPEG', '10class/val/n02504458/images/n02504458_366.JPEG', '10class/val/n02504458/images/n02504458_361.JPEG', '10class/val/n02504458/images/n02504458_368.JPEG']
rows:  2
cols:  2
len imgs:  4
=> saved grid_2.pdf, accuracy = 0.556, nsamples = 9
=> grid 2 labels: [8 2 2 2]
label_i 5
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([ 7,  8, 25, 62, 67, 68, 70, 72, 73, 74, 75, 76, 78, 79, 82]),)
sample_indices [ 7  8 25 62 67 68 70 72 73 74 75 76 78 79 82]
subset_sample_indices [ 8 70 73 74]
subset_img_paths ['10class/val/n01443537/images/n01443537_498.JPEG', '10class/val/n07873807/images/n07873807_265.JPEG', '10class/val/n07873807/images/n07873807_268.JPEG', '10class/val/n07873807/images/n07873807_269.JPEG']
rows:  2
cols:  2
len imgs:  4
=> saved grid_3.pdf, accuracy = 0.533, nsamples = 15
=> grid 3 labels: [0 7 7 7]
label_i 3
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([41, 46, 48, 53, 54, 59]),)
sample_indices [41 46 48 53 54 59]
subset_sample_indices [59 48 46 53]
subset_img_paths ['10class/val/n06596364/images/n06596364_349.JPEG', '10class/val/n04099969/images/n04099969_168.JPEG', '10class/val/n04099969/images/n04099969_166.JPEG', '10class/val/n06596364/images/n06596364_343.JPEG']
rows:  2
cols:  2
len imgs:  4
=> saved grid_4.pdf, accuracy = 0.500, nsamples = 6
=> grid 4 labels: [5 4 4 5]
label_i 9
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([22, 49, 50, 51, 52, 55, 57, 58, 63, 71, 77, 92, 97]),)
sample_indices [22 49 50 51 52 55 57 58 63 71 77 92 97]
subset_sample_indices [57 92 52 77]
subset_img_paths ['10class/val/n06596364/images/n06596364_347.JPEG', '10class/val/n12267677/images/n12267677_302.JPEG', '10class/val/n06596364/images/n06596364_342.JPEG', '10class/val/n07873807/images/n07873807_272.JPEG']
rows:  2
cols:  2
len imgs:  4
=> saved grid_5.pdf, accuracy = 0.462, nsamples = 13
=> grid 5 labels: [5 9 5 7]
label_i 0
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([ 0,  2,  3, 29, 43, 87, 93]),)
sample_indices [ 0  2  3 29 43 87 93]
subset_sample_indices [93  3  2 29]
subset_img_paths ['10class/val/n12267677/images/n12267677_303.JPEG', '10class/val/n01443537/images/n01443537_493.JPEG', '10class/val/n01443537/images/n01443537_492.JPEG', '10class/val/n02504458/images/n02504458_369.JPEG']
rows:  2
cols:  2
len imgs:  4
=> saved grid_6.pdf, accuracy = 0.429, nsamples = 7
=> grid 6 labels: [9 0 0 2]
label_i 6
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([23, 56, 61, 65, 66, 81, 84, 89, 96]),)
sample_indices [23 56 61 65 66 81 84 89 96]
subset_sample_indices [89 61 56 66]
subset_img_paths ['10class/val/n09246464/images/n09246464_269.JPEG', '10class/val/n07583066/images/n07583066_271.JPEG', '10class/val/n06596364/images/n06596364_346.JPEG', '10class/val/n07583066/images/n07583066_276.JPEG']
rows:  2
cols:  2
len imgs:  4
=> saved grid_7.pdf, accuracy = 0.333, nsamples = 9
=> grid 7 labels: [8 6 5 6]
label_i 8
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([39, 40, 60, 83, 88, 90, 94]),)
sample_indices [39 40 60 83 88 90 94]
subset_sample_indices [94 60 40 83]
subset_img_paths ['10class/val/n12267677/images/n12267677_304.JPEG', '10class/val/n07583066/images/n07583066_270.JPEG', '10class/val/n04099969/images/n04099969_160.JPEG', '10class/val/n09246464/images/n09246464_263.JPEG']
rows:  2
cols:  2
len imgs:  4
=> saved grid_8.pdf, accuracy = 0.286, nsamples = 7
=> grid 8 labels: [9 6 4 8]
label_i 1
preds [0 1 0 0 1 1 1 5 5 4 7 7 7 7 7 7 7 7 7 7 2 2 9 6 1 5 2 2 2 0 4 4 4 4 4 4 4
 4 4 8 8 3 2 0 2 1 3 4 3 9 9 9 9 3 3 9 6 9 9 3 8 6 5 9 1 6 6 5 5 1 5 9 5 5
 5 5 5 9 5 5 4 6 5 8 6 2 4 0 8 6 8 1 9 0 8 1 6 9 1 2]
np.where(preds == label_i) (array([ 1,  4,  5,  6, 24, 45, 64, 69, 91, 95, 98]),)
sample_indices [ 1  4  5  6 24 45 64 69 91 95 98]
subset_sample_indices [24 95  5 98]
subset_img_paths ['10class/val/n02504458/images/n02504458_364.JPEG', '10class/val/n12267677/images/n12267677_305.JPEG', '10class/val/n01443537/images/n01443537_495.JPEG', '10class/val/n12267677/images/n12267677_308.JPEG']
rows:  2
cols:  2
len imgs:  4
=> saved grid_9.pdf, accuracy = 0.273, nsamples = 11
=> grid 9 labels: [2 9 0 9]
Namespace(activation='leaky-relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='scratch', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=1, num_samples_per_class=16, pretrained='saved/scratch/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=True, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): BatchNorm1d(4096, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/scratch/model_best.pth.tar'
=> loaded pre-trained model 'saved/scratch/model_best.pth.tar' (epoch 92)
=> using 1 GPUs.
Test: [  0/275]	Time  1.991 ( 1.991)
Test: [ 10/275]	Time  0.017 ( 0.203)
Test: [ 20/275]	Time  0.036 ( 0.119)
Test: [ 30/275]	Time  0.020 ( 0.091)
Test: [ 40/275]	Time  0.025 ( 0.076)
Test: [ 50/275]	Time  0.014 ( 0.068)
Test: [ 60/275]	Time  0.033 ( 0.062)
Test: [ 70/275]	Time  0.016 ( 0.057)
Test: [ 80/275]	Time  0.027 ( 0.054)
Test: [ 90/275]	Time  0.020 ( 0.051)
Test: [100/275]	Time  0.029 ( 0.050)
Test: [110/275]	Time  0.024 ( 0.048)
Test: [120/275]	Time  0.017 ( 0.046)
Test: [130/275]	Time  0.024 ( 0.045)
Test: [140/275]	Time  0.024 ( 0.044)
Test: [150/275]	Time  0.056 ( 0.043)
Test: [160/275]	Time  0.018 ( 0.043)
Test: [170/275]	Time  0.049 ( 0.042)
Test: [180/275]	Time  0.036 ( 0.041)
Test: [190/275]	Time  0.031 ( 0.041)
Test: [200/275]	Time  0.016 ( 0.040)
Test: [210/275]	Time  0.034 ( 0.040)
Test: [220/275]	Time  0.026 ( 0.040)
Test: [230/275]	Time  0.015 ( 0.039)
Test: [240/275]	Time  0.022 ( 0.039)
Test: [250/275]	Time  0.059 ( 0.039)
Test: [260/275]	Time  0.028 ( 0.038)
Test: [270/275]	Time  0.045 ( 0.038)
targets:  [0 0 0 ... 9 9 9]
preds:  [8 8 8 ... 8 8 4]
=> number of samples: 4400
=> number of unique assignments: 10
=> NMI: 35.310%
=> Adjusted NMI: 35.045%
=> Adjusted Rand-Index: 24.206%
=> Accuracy: 43.295%
label_i 6
preds [8 8 8 ... 8 8 4]
np.where(preds == label_i) (array([  72,  234,  440,  464,  572,  629,  720,  807,  832,  889,  891,
        899,  933,  935,  987, 1008, 1051, 1064, 1085, 1089, 1125, 1131,
       1138, 1152, 1167, 1174, 1176, 1215, 1254, 1306, 1382, 1392, 1428,
       1481, 1615, 1668, 1692, 1721, 1761, 1768, 1769, 1771, 1772, 1775,
       1777, 1778, 1779, 1789, 1810, 1820, 1821, 1822, 1823, 1826, 1849,
       1883, 1888, 1889, 1892, 1902, 1905, 1909, 1915, 1918, 1923, 1930,
       1932, 1947, 1960, 1967, 1968, 1972, 1976, 1993, 1994, 2006, 2022,
       2041, 2052, 2084, 2091, 2094, 2098, 2102, 2107, 2117, 2139, 2145,
       2153, 2158, 2159, 2161, 2164, 2190, 2192, 2194, 2199, 2284, 2338,
       2350, 2406, 2433, 2648, 2650, 2747, 2762, 2901, 2906, 2919, 2934,
       2994, 3042, 3520, 3522, 3523, 3524, 3525, 3526, 3527, 3528, 3529,
       3530, 3531, 3532, 3534, 3535, 3536, 3539, 3540, 3541, 3542, 3543,
       3544, 3545, 3547, 3548, 3549, 3550, 3551, 3552, 3553, 3554, 3555,
       3556, 3557, 3560, 3561, 3562, 3563, 3564, 3565, 3566, 3567, 3568,
       3569, 3570, 3571, 3572, 3573, 3574, 3575, 3576, 3577, 3578, 3579,
       3580, 3582, 3584, 3585, 3586, 3587, 3588, 3589, 3591, 3592, 3594,
       3596, 3597, 3599, 3600, 3601, 3603, 3604, 3605, 3606, 3607, 3610,
       3611, 3612, 3613, 3614, 3615, 3616, 3617, 3618, 3620, 3621, 3622,
       3623, 3624, 3625, 3626, 3627, 3629, 3630, 3631, 3632, 3635, 3636,
       3637, 3638, 3639, 3641, 3642, 3643, 3645, 3647, 3648, 3650, 3651,
       3652, 3654, 3655, 3657, 3658, 3659, 3661, 3662, 3663, 3664, 3665,
       3666, 3667, 3668, 3669, 3670, 3671, 3672, 3673, 3674, 3675, 3676,
       3678, 3680, 3683, 3684, 3685, 3687, 3688, 3690, 3691, 3692, 3693,
       3694, 3695, 3696, 3697, 3698, 3699, 3702, 3703, 3705, 3706, 3707,
       3709, 3710, 3711, 3712, 3713, 3716, 3717, 3718, 3719, 3720, 3721,
       3722, 3723, 3724, 3726, 3727, 3728, 3729, 3730, 3731, 3732, 3733,
       3734, 3735, 3737, 3738, 3739, 3740, 3741, 3742, 3743, 3744, 3745,
       3746, 3747, 3748, 3749, 3750, 3753, 3756, 3758, 3760, 3761, 3762,
       3763, 3764, 3766, 3767, 3768, 3770, 3771, 3772, 3773, 3774, 3775,
       3776, 3778, 3779, 3780, 3782, 3783, 3785, 3786, 3787, 3788, 3789,
       3790, 3791, 3792, 3793, 3794, 3795, 3796, 3797, 3798, 3800, 3801,
       3802, 3805, 3806, 3807, 3808, 3809, 3810, 3811, 3812, 3813, 3814,
       3815, 3816, 3817, 3818, 3819, 3820, 3821, 3822, 3823, 3824, 3825,
       3827, 3828, 3829, 3830, 3831, 3832, 3833, 3834, 3835, 3836, 3837,
       3838, 3839, 3840, 3841, 3842, 3843, 3844, 3845, 3846, 3847, 3848,
       3849, 3851, 3852, 3853, 3854, 3855, 3856, 3857, 3858, 3859, 3860,
       3861, 3862, 3863, 3864, 3865, 3866, 3867, 3868, 3869, 3870, 3871,
       3873, 3874, 3875, 3876, 3877, 3878, 3880, 3881, 3882, 3883, 3885,
       3886, 3888, 3889, 3890, 3892, 3893, 3894, 3895, 3896, 3897, 3898,
       3899, 3900, 3901, 3902, 3903, 3904, 3905, 3906, 3907, 3908, 3909,
       3910, 3911, 3912, 3913, 3914, 3916, 3917, 3918, 3919, 3922, 3925,
       3926, 3927, 3930, 3932, 3933, 3934, 3937, 3938, 3939, 3940, 3941,
       3942, 3943, 3944, 3945, 3946, 3947, 3948, 3949, 3950, 3951, 3952,
       3953, 3954, 3955, 3956, 3957, 3958, 3959, 3995, 4067, 4225, 4367]),)
sample_indices [  72  234  440  464  572  629  720  807  832  889  891  899  933  935
  987 1008 1051 1064 1085 1089 1125 1131 1138 1152 1167 1174 1176 1215
 1254 1306 1382 1392 1428 1481 1615 1668 1692 1721 1761 1768 1769 1771
 1772 1775 1777 1778 1779 1789 1810 1820 1821 1822 1823 1826 1849 1883
 1888 1889 1892 1902 1905 1909 1915 1918 1923 1930 1932 1947 1960 1967
 1968 1972 1976 1993 1994 2006 2022 2041 2052 2084 2091 2094 2098 2102
 2107 2117 2139 2145 2153 2158 2159 2161 2164 2190 2192 2194 2199 2284
 2338 2350 2406 2433 2648 2650 2747 2762 2901 2906 2919 2934 2994 3042
 3520 3522 3523 3524 3525 3526 3527 3528 3529 3530 3531 3532 3534 3535
 3536 3539 3540 3541 3542 3543 3544 3545 3547 3548 3549 3550 3551 3552
 3553 3554 3555 3556 3557 3560 3561 3562 3563 3564 3565 3566 3567 3568
 3569 3570 3571 3572 3573 3574 3575 3576 3577 3578 3579 3580 3582 3584
 3585 3586 3587 3588 3589 3591 3592 3594 3596 3597 3599 3600 3601 3603
 3604 3605 3606 3607 3610 3611 3612 3613 3614 3615 3616 3617 3618 3620
 3621 3622 3623 3624 3625 3626 3627 3629 3630 3631 3632 3635 3636 3637
 3638 3639 3641 3642 3643 3645 3647 3648 3650 3651 3652 3654 3655 3657
 3658 3659 3661 3662 3663 3664 3665 3666 3667 3668 3669 3670 3671 3672
 3673 3674 3675 3676 3678 3680 3683 3684 3685 3687 3688 3690 3691 3692
 3693 3694 3695 3696 3697 3698 3699 3702 3703 3705 3706 3707 3709 3710
 3711 3712 3713 3716 3717 3718 3719 3720 3721 3722 3723 3724 3726 3727
 3728 3729 3730 3731 3732 3733 3734 3735 3737 3738 3739 3740 3741 3742
 3743 3744 3745 3746 3747 3748 3749 3750 3753 3756 3758 3760 3761 3762
 3763 3764 3766 3767 3768 3770 3771 3772 3773 3774 3775 3776 3778 3779
 3780 3782 3783 3785 3786 3787 3788 3789 3790 3791 3792 3793 3794 3795
 3796 3797 3798 3800 3801 3802 3805 3806 3807 3808 3809 3810 3811 3812
 3813 3814 3815 3816 3817 3818 3819 3820 3821 3822 3823 3824 3825 3827
 3828 3829 3830 3831 3832 3833 3834 3835 3836 3837 3838 3839 3840 3841
 3842 3843 3844 3845 3846 3847 3848 3849 3851 3852 3853 3854 3855 3856
 3857 3858 3859 3860 3861 3862 3863 3864 3865 3866 3867 3868 3869 3870
 3871 3873 3874 3875 3876 3877 3878 3880 3881 3882 3883 3885 3886 3888
 3889 3890 3892 3893 3894 3895 3896 3897 3898 3899 3900 3901 3902 3903
 3904 3905 3906 3907 3908 3909 3910 3911 3912 3913 3914 3916 3917 3918
 3919 3922 3925 3926 3927 3930 3932 3933 3934 3937 3938 3939 3940 3941
 3942 3943 3944 3945 3946 3947 3948 3949 3950 3951 3952 3953 3954 3955
 3956 3957 3958 3959 3995 4067 4225 4367]
subset_sample_indices [1008 3534 3554 3707 3587 3555 3849 3902 3522 1131 3807 3527 3914 3787
 3691 3659]
subset_img_paths ['scratch/val/n02988304/images/n02988304_228.JPEG', 'scratch/val/n09428293/images/n09428293_114.JPEG', 'scratch/val/n09428293/images/n09428293_134.JPEG', 'scratch/val/n09428293/images/n09428293_287.JPEG', 'scratch/val/n09428293/images/n09428293_167.JPEG', 'scratch/val/n09428293/images/n09428293_135.JPEG', 'scratch/val/n09428293/images/n09428293_429.JPEG', 'scratch/val/n09428293/images/n09428293_482.JPEG', 'scratch/val/n09428293/images/n09428293_102.JPEG', 'scratch/val/n02988304/images/n02988304_351.JPEG', 'scratch/val/n09428293/images/n09428293_387.JPEG', 'scratch/val/n09428293/images/n09428293_107.JPEG', 'scratch/val/n09428293/images/n09428293_494.JPEG', 'scratch/val/n09428293/images/n09428293_367.JPEG', 'scratch/val/n09428293/images/n09428293_271.JPEG', 'scratch/val/n09428293/images/n09428293_239.JPEG']
rows:  4
cols:  4
len imgs:  16
=> saved grid_0.pdf, accuracy = 0.760, nsamples = 484
=> grid 0 labels: [2 8 8 8 8 8 8 8 8 2 8 8 8 8 8 8]
label_i 2
preds [8 8 8 ... 8 8 4]
np.where(preds == label_i) (array([ 896,  911,  930,  939,  957,  958,  967,  968,  983,  986, 1007,
       1013, 1052, 1058, 1059, 1061, 1066, 1081, 1091, 1108, 1114, 1122,
       1150, 1202, 1205, 1219, 1244, 1255, 1259, 1282, 1287, 1295, 1320,
       1321, 1323, 1324, 1325, 1326, 1328, 1329, 1330, 1336, 1337, 1338,
       1339, 1341, 1342, 1343, 1345, 1347, 1348, 1352, 1353, 1354, 1356,
       1357, 1358, 1359, 1360, 1363, 1367, 1368, 1371, 1374, 1376, 1378,
       1379, 1380, 1387, 1388, 1391, 1393, 1395, 1396, 1397, 1398, 1400,
       1401, 1403, 1404, 1405, 1407, 1408, 1412, 1415, 1416, 1417, 1418,
       1423, 1424, 1426, 1427, 1430, 1432, 1434, 1436, 1438, 1439, 1440,
       1441, 1447, 1448, 1449, 1450, 1451, 1453, 1454, 1455, 1456, 1457,
       1458, 1460, 1461, 1462, 1463, 1464, 1465, 1467, 1468, 1471, 1473,
       1474, 1475, 1477, 1478, 1479, 1483, 1484, 1485, 1486, 1489, 1490,
       1493, 1495, 1496, 1497, 1499, 1500, 1501, 1505, 1506, 1507, 1508,
       1510, 1514, 1516, 1517, 1518, 1521, 1522, 1527, 1528, 1530, 1532,
       1533, 1535, 1538, 1542, 1543, 1544, 1546, 1547, 1548, 1549, 1551,
       1553, 1555, 1556, 1558, 1559, 1560, 1561, 1562, 1566, 1567, 1568,
       1569, 1570, 1572, 1573, 1574, 1576, 1577, 1578, 1579, 1580, 1582,
       1585, 1586, 1587, 1588, 1589, 1591, 1592, 1593, 1594, 1595, 1596,
       1597, 1599, 1600, 1601, 1603, 1606, 1610, 1611, 1612, 1613, 1616,
       1617, 1620, 1622, 1623, 1626, 1630, 1632, 1633, 1634, 1635, 1637,
       1638, 1640, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1651, 1652,
       1655, 1656, 1657, 1661, 1662, 1663, 1665, 1666, 1667, 1670, 1671,
       1674, 1676, 1679, 1683, 1685, 1686, 1687, 1689, 1691, 1693, 1694,
       1696, 1697, 1701, 1702, 1703, 1704, 1708, 1709, 1711, 1712, 1714,
       1715, 1716, 1717, 1718, 1719, 1720, 1723, 1725, 1727, 1728, 1729,
       1730, 1731, 1736, 1737, 1739, 1741, 1742, 1747, 1748, 1750, 1753,
       1754, 1755, 1758, 1759, 1782, 1792, 1795, 1798, 1804, 1807, 1811,
       1815, 1839, 1841, 1864, 1866, 1871, 1872, 1880, 1882, 1890, 1893,
       1896, 1899, 1900, 1919, 1920, 1926, 1927, 1928, 1931, 1934, 1941,
       1944, 1956, 1961, 1963, 1964, 1970, 1971, 1974, 1984, 1987, 1989,
       1990, 1992, 1999, 2019, 2029, 2030, 2033, 2035, 2042, 2045, 2055,
       2057, 2058, 2060, 2061, 2068, 2070, 2075, 2080, 2082, 2089, 2106,
       2114, 2115, 2119, 2120, 2123, 2129, 2131, 2137, 2144, 2154, 2160,
       2167, 2169, 2171, 2176, 2182, 2183, 2185, 2229, 2402, 2432, 2525,
       2534, 2568, 2569, 2600, 2634, 2644, 2645, 2651, 2676, 2677, 2693,
       2707, 2722, 2729, 2731, 2737, 2782, 2788, 2796, 2801, 2803, 2829,
       2846, 2854, 2858, 2893, 2916, 2957, 2958, 2959, 2962, 2986, 3010,
       3058, 3163, 3380, 3505, 3521, 3546, 3583, 3598, 3803, 3887, 3931]),)
sample_indices [ 896  911  930  939  957  958  967  968  983  986 1007 1013 1052 1058
 1059 1061 1066 1081 1091 1108 1114 1122 1150 1202 1205 1219 1244 1255
 1259 1282 1287 1295 1320 1321 1323 1324 1325 1326 1328 1329 1330 1336
 1337 1338 1339 1341 1342 1343 1345 1347 1348 1352 1353 1354 1356 1357
 1358 1359 1360 1363 1367 1368 1371 1374 1376 1378 1379 1380 1387 1388
 1391 1393 1395 1396 1397 1398 1400 1401 1403 1404 1405 1407 1408 1412
 1415 1416 1417 1418 1423 1424 1426 1427 1430 1432 1434 1436 1438 1439
 1440 1441 1447 1448 1449 1450 1451 1453 1454 1455 1456 1457 1458 1460
 1461 1462 1463 1464 1465 1467 1468 1471 1473 1474 1475 1477 1478 1479
 1483 1484 1485 1486 1489 1490 1493 1495 1496 1497 1499 1500 1501 1505
 1506 1507 1508 1510 1514 1516 1517 1518 1521 1522 1527 1528 1530 1532
 1533 1535 1538 1542 1543 1544 1546 1547 1548 1549 1551 1553 1555 1556
 1558 1559 1560 1561 1562 1566 1567 1568 1569 1570 1572 1573 1574 1576
 1577 1578 1579 1580 1582 1585 1586 1587 1588 1589 1591 1592 1593 1594
 1595 1596 1597 1599 1600 1601 1603 1606 1610 1611 1612 1613 1616 1617
 1620 1622 1623 1626 1630 1632 1633 1634 1635 1637 1638 1640 1642 1643
 1644 1645 1646 1647 1648 1651 1652 1655 1656 1657 1661 1662 1663 1665
 1666 1667 1670 1671 1674 1676 1679 1683 1685 1686 1687 1689 1691 1693
 1694 1696 1697 1701 1702 1703 1704 1708 1709 1711 1712 1714 1715 1716
 1717 1718 1719 1720 1723 1725 1727 1728 1729 1730 1731 1736 1737 1739
 1741 1742 1747 1748 1750 1753 1754 1755 1758 1759 1782 1792 1795 1798
 1804 1807 1811 1815 1839 1841 1864 1866 1871 1872 1880 1882 1890 1893
 1896 1899 1900 1919 1920 1926 1927 1928 1931 1934 1941 1944 1956 1961
 1963 1964 1970 1971 1974 1984 1987 1989 1990 1992 1999 2019 2029 2030
 2033 2035 2042 2045 2055 2057 2058 2060 2061 2068 2070 2075 2080 2082
 2089 2106 2114 2115 2119 2120 2123 2129 2131 2137 2144 2154 2160 2167
 2169 2171 2176 2182 2183 2185 2229 2402 2432 2525 2534 2568 2569 2600
 2634 2644 2645 2651 2676 2677 2693 2707 2722 2729 2731 2737 2782 2788
 2796 2801 2803 2829 2846 2854 2858 2893 2916 2957 2958 2959 2962 2986
 3010 3058 3163 3380 3505 3521 3546 3583 3598 3803 3887 3931]
subset_sample_indices [2144 1560 1644 2131 1899 1896 1527 1007 1122 1711 2082 1363 3010 1597
 2114 1400]
subset_img_paths ['scratch/val/n04285008/images/n04285008_484.JPEG', 'scratch/val/n03977966/images/n03977966_340.JPEG', 'scratch/val/n03977966/images/n03977966_424.JPEG', 'scratch/val/n04285008/images/n04285008_471.JPEG', 'scratch/val/n04285008/images/n04285008_239.JPEG', 'scratch/val/n04285008/images/n04285008_236.JPEG', 'scratch/val/n03977966/images/n03977966_307.JPEG', 'scratch/val/n02988304/images/n02988304_227.JPEG', 'scratch/val/n02988304/images/n02988304_342.JPEG', 'scratch/val/n03977966/images/n03977966_491.JPEG', 'scratch/val/n04285008/images/n04285008_422.JPEG', 'scratch/val/n03977966/images/n03977966_143.JPEG', 'scratch/val/n06596364/images/n06596364_470.JPEG', 'scratch/val/n03977966/images/n03977966_377.JPEG', 'scratch/val/n04285008/images/n04285008_454.JPEG', 'scratch/val/n03977966/images/n03977966_180.JPEG']
rows:  4
cols:  4
len imgs:  16
=> saved grid_1.pdf, accuracy = 0.617, nsamples = 418
=> grid 1 labels: [4 3 3 4 4 4 3 2 2 3 4 3 6 3 4 3]
label_i 0
preds [8 8 8 ... 8 8 4]
np.where(preds == label_i) (array([  87,  108,  136,  138,  154,  178,  196,  213,  256,  272,  280,
        282,  298,  318,  328,  341,  398,  406,  444,  449,  453,  457,
        459,  465,  475,  495,  530,  540,  541,  551,  553,  557,  561,
        565,  568,  575,  576,  593,  597,  608,  610,  612,  616,  617,
        624,  626,  636,  640,  656,  664,  670,  675,  676,  681,  688,
        692,  693,  695,  703,  719,  723,  727,  735,  739,  745,  753,
        754,  769,  777,  792,  793,  797,  802,  814,  822,  829,  831,
        843,  851,  862,  874,  877,  895, 1133, 1207, 1211, 1283, 1383,
       1422, 1511, 1575, 1649, 1809, 1827, 1832, 1969, 2027, 2059, 2073,
       2074, 2148, 2179, 2203, 2214, 2243, 2265, 2272, 2281, 2291, 2293,
       2312, 2317, 2323, 2324, 2332, 2344, 2345, 2356, 2358, 2380, 2383,
       2392, 2400, 2430, 2438, 2440, 2451, 2457, 2474, 2490, 2510, 2524,
       2531, 2536, 2551, 2553, 2556, 2559, 2563, 2603, 2604, 2613, 2622,
       2625, 2628, 2635, 2640, 2643, 2646, 2649, 2652, 2653, 2654, 2656,
       2657, 2658, 2661, 2662, 2663, 2664, 2665, 2666, 2667, 2669, 2670,
       2671, 2674, 2675, 2678, 2679, 2680, 2681, 2682, 2683, 2684, 2686,
       2688, 2689, 2691, 2692, 2694, 2695, 2696, 2699, 2700, 2701, 2702,
       2703, 2705, 2708, 2709, 2713, 2716, 2718, 2719, 2720, 2721, 2723,
       2724, 2725, 2726, 2727, 2730, 2732, 2733, 2735, 2738, 2739, 2740,
       2741, 2742, 2743, 2744, 2745, 2748, 2750, 2751, 2752, 2753, 2754,
       2755, 2756, 2757, 2758, 2759, 2763, 2764, 2765, 2767, 2772, 2773,
       2775, 2776, 2777, 2778, 2779, 2781, 2783, 2785, 2787, 2793, 2797,
       2798, 2800, 2804, 2805, 2806, 2807, 2808, 2810, 2811, 2814, 2815,
       2817, 2818, 2819, 2820, 2821, 2822, 2824, 2825, 2826, 2827, 2833,
       2835, 2836, 2839, 2840, 2841, 2843, 2844, 2847, 2851, 2853, 2855,
       2856, 2857, 2860, 2863, 2864, 2865, 2866, 2870, 2871, 2872, 2873,
       2874, 2876, 2879, 2880, 2881, 2883, 2884, 2885, 2886, 2887, 2888,
       2889, 2890, 2891, 2892, 2896, 2899, 2900, 2902, 2903, 2905, 2907,
       2908, 2910, 2914, 2915, 2917, 2921, 2922, 2923, 2924, 2925, 2926,
       2927, 2930, 2931, 2932, 2933, 2935, 2936, 2938, 2939, 2940, 2941,
       2942, 2943, 2945, 2946, 2947, 2948, 2950, 2951, 2952, 2953, 2954,
       2955, 2956, 2960, 2961, 2965, 2966, 2967, 2970, 2972, 2973, 2974,
       2977, 2978, 2979, 2980, 2982, 2984, 2985, 2987, 2988, 2989, 2990,
       2991, 2992, 2995, 2997, 3001, 3002, 3003, 3005, 3006, 3009, 3014,
       3015, 3018, 3023, 3024, 3026, 3030, 3031, 3032, 3035, 3036, 3038,
       3040, 3041, 3043, 3044, 3046, 3047, 3048, 3050, 3052, 3053, 3055,
       3056, 3057, 3059, 3060, 3061, 3062, 3064, 3065, 3066, 3069, 3070,
       3071, 3073, 3074, 3076, 3077, 3078, 3217, 3235, 3283, 3324, 3496,
       3533, 3593, 3595, 3633, 3634, 3644, 3653, 3660, 3701, 3751, 3754,
       3755, 3777, 3884, 3915, 3924, 3963, 3964, 3967, 3968, 3970, 3972,
       3975, 3982, 3990, 3992, 3993, 3994, 4002, 4005, 4008, 4015, 4017,
       4021, 4026, 4029, 4032, 4039, 4045, 4046, 4050, 4052, 4055, 4059,
       4060, 4061, 4082, 4085, 4093, 4097, 4100, 4101, 4109, 4111, 4112,
       4124, 4127, 4132, 4134, 4135, 4137, 4140, 4144, 4148, 4151, 4153,
       4160, 4162, 4169, 4172, 4173, 4175, 4179, 4181, 4192, 4194, 4199,
       4200, 4201, 4205, 4209, 4214, 4215, 4216, 4217, 4218, 4219, 4223,
       4228, 4229, 4230, 4231, 4237, 4238, 4240, 4241, 4245, 4246, 4262,
       4264, 4265, 4269, 4270, 4271, 4274, 4275, 4278, 4286, 4288, 4291,
       4297, 4298, 4307, 4309, 4310, 4319, 4320, 4322, 4324, 4325, 4334,
       4336, 4338, 4342, 4344, 4350, 4353, 4354, 4355, 4364, 4368, 4369,
       4373, 4375, 4386, 4393, 4395, 4396]),)
sample_indices [  87  108  136  138  154  178  196  213  256  272  280  282  298  318
  328  341  398  406  444  449  453  457  459  465  475  495  530  540
  541  551  553  557  561  565  568  575  576  593  597  608  610  612
  616  617  624  626  636  640  656  664  670  675  676  681  688  692
  693  695  703  719  723  727  735  739  745  753  754  769  777  792
  793  797  802  814  822  829  831  843  851  862  874  877  895 1133
 1207 1211 1283 1383 1422 1511 1575 1649 1809 1827 1832 1969 2027 2059
 2073 2074 2148 2179 2203 2214 2243 2265 2272 2281 2291 2293 2312 2317
 2323 2324 2332 2344 2345 2356 2358 2380 2383 2392 2400 2430 2438 2440
 2451 2457 2474 2490 2510 2524 2531 2536 2551 2553 2556 2559 2563 2603
 2604 2613 2622 2625 2628 2635 2640 2643 2646 2649 2652 2653 2654 2656
 2657 2658 2661 2662 2663 2664 2665 2666 2667 2669 2670 2671 2674 2675
 2678 2679 2680 2681 2682 2683 2684 2686 2688 2689 2691 2692 2694 2695
 2696 2699 2700 2701 2702 2703 2705 2708 2709 2713 2716 2718 2719 2720
 2721 2723 2724 2725 2726 2727 2730 2732 2733 2735 2738 2739 2740 2741
 2742 2743 2744 2745 2748 2750 2751 2752 2753 2754 2755 2756 2757 2758
 2759 2763 2764 2765 2767 2772 2773 2775 2776 2777 2778 2779 2781 2783
 2785 2787 2793 2797 2798 2800 2804 2805 2806 2807 2808 2810 2811 2814
 2815 2817 2818 2819 2820 2821 2822 2824 2825 2826 2827 2833 2835 2836
 2839 2840 2841 2843 2844 2847 2851 2853 2855 2856 2857 2860 2863 2864
 2865 2866 2870 2871 2872 2873 2874 2876 2879 2880 2881 2883 2884 2885
 2886 2887 2888 2889 2890 2891 2892 2896 2899 2900 2902 2903 2905 2907
 2908 2910 2914 2915 2917 2921 2922 2923 2924 2925 2926 2927 2930 2931
 2932 2933 2935 2936 2938 2939 2940 2941 2942 2943 2945 2946 2947 2948
 2950 2951 2952 2953 2954 2955 2956 2960 2961 2965 2966 2967 2970 2972
 2973 2974 2977 2978 2979 2980 2982 2984 2985 2987 2988 2989 2990 2991
 2992 2995 2997 3001 3002 3003 3005 3006 3009 3014 3015 3018 3023 3024
 3026 3030 3031 3032 3035 3036 3038 3040 3041 3043 3044 3046 3047 3048
 3050 3052 3053 3055 3056 3057 3059 3060 3061 3062 3064 3065 3066 3069
 3070 3071 3073 3074 3076 3077 3078 3217 3235 3283 3324 3496 3533 3593
 3595 3633 3634 3644 3653 3660 3701 3751 3754 3755 3777 3884 3915 3924
 3963 3964 3967 3968 3970 3972 3975 3982 3990 3992 3993 3994 4002 4005
 4008 4015 4017 4021 4026 4029 4032 4039 4045 4046 4050 4052 4055 4059
 4060 4061 4082 4085 4093 4097 4100 4101 4109 4111 4112 4124 4127 4132
 4134 4135 4137 4140 4144 4148 4151 4153 4160 4162 4169 4172 4173 4175
 4179 4181 4192 4194 4199 4200 4201 4205 4209 4214 4215 4216 4217 4218
 4219 4223 4228 4229 4230 4231 4237 4238 4240 4241 4245 4246 4262 4264
 4265 4269 4270 4271 4274 4275 4278 4286 4288 4291 4297 4298 4307 4309
 4310 4319 4320 4322 4324 4325 4334 4336 4338 4342 4344 4350 4353 4354
 4355 4364 4368 4369 4373 4375 4386 4393 4395 4396]
subset_sample_indices [1211 2531 2027 2281 2604  593 3060 1575 4262 2779 2682 4029  754 4205
 4201 2952]
subset_img_paths ['scratch/val/n02988304/images/n02988304_431.JPEG', 'scratch/val/n04597913/images/n04597913_431.JPEG', 'scratch/val/n04285008/images/n04285008_367.JPEG', 'scratch/val/n04597913/images/n04597913_181.JPEG', 'scratch/val/n04597913/images/n04597913_64.JPEG', 'scratch/val/n01983481/images/n01983481_253.JPEG', 'scratch/val/n06596364/images/n06596364_80.JPEG', 'scratch/val/n03977966/images/n03977966_355.JPEG', 'scratch/val/n12267677/images/n12267677_402.JPEG', 'scratch/val/n06596364/images/n06596364_239.JPEG', 'scratch/val/n06596364/images/n06596364_142.JPEG', 'scratch/val/n12267677/images/n12267677_169.JPEG', 'scratch/val/n01983481/images/n01983481_414.JPEG', 'scratch/val/n12267677/images/n12267677_345.JPEG', 'scratch/val/n12267677/images/n12267677_341.JPEG', 'scratch/val/n06596364/images/n06596364_412.JPEG']
rows:  4
cols:  4
len imgs:  16
=> saved grid_2.pdf, accuracy = 0.480, nsamples = 556
=> grid 2 labels: [2 5 4 5 5 1 6 3 9 6 6 9 1 9 9 6]
label_i 7
preds [8 8 8 ... 8 8 4]
np.where(preds == label_i) (array([   6,    9,   15,   16,   19,   20,   22,   29,   35,   37,   40,
         46,   63,   65,   67,   68,   74,   77,   79,   84,   85,   92,
         95,   98,  118,  122,  133,  135,  150,  157,  159,  169,  173,
        180,  183,  185,  187,  190,  194,  198,  203,  204,  206,  210,
        219,  223,  226,  227,  228,  241,  245,  249,  251,  253,  270,
        274,  281,  283,  289,  290,  293,  301,  303,  305,  310,  313,
        323,  329,  343,  347,  349,  356,  358,  366,  367,  368,  369,
        371,  381,  389,  390,  392,  393,  408,  411,  415,  422,  423,
        425,  432,  439,  534,  648,  667,  752,  820,  847,  882,  888,
        915,  941,  952,  978,  992, 1011, 1019, 1030, 1053, 1054, 1070,
       1116, 1126, 1151, 1164, 1170, 1171, 1187, 1194, 1301, 1302, 1304,
       1310, 1786, 2081, 2083, 2204, 2210, 2213, 2216, 2220, 2224, 2236,
       2237, 2242, 2251, 2252, 2258, 2271, 2273, 2278, 2279, 2282, 2285,
       2292, 2297, 2298, 2300, 2302, 2305, 2307, 2316, 2318, 2348, 2351,
       2355, 2362, 2364, 2373, 2381, 2385, 2389, 2393, 2397, 2405, 2409,
       2410, 2416, 2418, 2427, 2428, 2431, 2435, 2437, 2442, 2445, 2454,
       2455, 2456, 2459, 2478, 2483, 2494, 2501, 2504, 2505, 2509, 2514,
       2520, 2527, 2529, 2543, 2547, 2548, 2552, 2555, 2567, 2572, 2575,
       2580, 2581, 2588, 2589, 2590, 2596, 2605, 2610, 2614, 2615, 2629,
       2633, 2636, 2639, 3080, 3082, 3083, 3084, 3085, 3087, 3089, 3090,
       3092, 3093, 3096, 3097, 3099, 3100, 3104, 3106, 3108, 3109, 3110,
       3113, 3118, 3119, 3120, 3121, 3122, 3123, 3125, 3126, 3127, 3128,
       3129, 3131, 3132, 3134, 3135, 3136, 3138, 3139, 3140, 3141, 3143,
       3144, 3148, 3150, 3151, 3159, 3161, 3166, 3167, 3168, 3169, 3172,
       3173, 3176, 3181, 3182, 3183, 3188, 3189, 3194, 3195, 3196, 3199,
       3200, 3201, 3202, 3203, 3204, 3205, 3207, 3208, 3209, 3210, 3212,
       3215, 3216, 3218, 3222, 3223, 3228, 3229, 3233, 3234, 3239, 3240,
       3241, 3244, 3245, 3247, 3248, 3249, 3252, 3255, 3256, 3257, 3258,
       3259, 3261, 3263, 3264, 3266, 3268, 3269, 3270, 3272, 3274, 3275,
       3278, 3280, 3285, 3290, 3291, 3292, 3293, 3294, 3295, 3296, 3297,
       3298, 3300, 3301, 3302, 3304, 3310, 3313, 3316, 3317, 3320, 3323,
       3325, 3327, 3329, 3330, 3331, 3337, 3338, 3340, 3343, 3344, 3345,
       3346, 3347, 3349, 3350, 3351, 3354, 3356, 3358, 3361, 3366, 3367,
       3368, 3372, 3373, 3374, 3376, 3377, 3378, 3381, 3382, 3384, 3387,
       3388, 3389, 3391, 3392, 3393, 3394, 3397, 3398, 3399, 3401, 3403,
       3407, 3408, 3409, 3410, 3413, 3414, 3415, 3416, 3418, 3422, 3428,
       3430, 3432, 3433, 3434, 3435, 3438, 3445, 3446, 3448, 3449, 3450,
       3453, 3454, 3456, 3459, 3460, 3463, 3465, 3466, 3468, 3469, 3470,
       3472, 3473, 3476, 3477, 3478, 3480, 3482, 3483, 3485, 3486, 3491,
       3492, 3493, 3494, 3498, 3499, 3502, 3504, 3507, 3508, 3509, 3510,
       3511, 3512, 3513, 3515, 3516, 3517, 3538, 3559, 3628, 3656, 3679,
       3700, 3704, 3708, 3714, 3715, 3757, 3781, 3799, 3923, 3928, 3936,
       3978, 3980, 3983, 4007, 4009, 4043, 4056, 4058, 4069, 4081, 4086,
       4099, 4110, 4119, 4139, 4163, 4186, 4202, 4242, 4243, 4252, 4296,
       4302, 4323, 4337, 4341, 4347, 4374, 4389, 4392]),)
sample_indices [   6    9   15   16   19   20   22   29   35   37   40   46   63   65
   67   68   74   77   79   84   85   92   95   98  118  122  133  135
  150  157  159  169  173  180  183  185  187  190  194  198  203  204
  206  210  219  223  226  227  228  241  245  249  251  253  270  274
  281  283  289  290  293  301  303  305  310  313  323  329  343  347
  349  356  358  366  367  368  369  371  381  389  390  392  393  408
  411  415  422  423  425  432  439  534  648  667  752  820  847  882
  888  915  941  952  978  992 1011 1019 1030 1053 1054 1070 1116 1126
 1151 1164 1170 1171 1187 1194 1301 1302 1304 1310 1786 2081 2083 2204
 2210 2213 2216 2220 2224 2236 2237 2242 2251 2252 2258 2271 2273 2278
 2279 2282 2285 2292 2297 2298 2300 2302 2305 2307 2316 2318 2348 2351
 2355 2362 2364 2373 2381 2385 2389 2393 2397 2405 2409 2410 2416 2418
 2427 2428 2431 2435 2437 2442 2445 2454 2455 2456 2459 2478 2483 2494
 2501 2504 2505 2509 2514 2520 2527 2529 2543 2547 2548 2552 2555 2567
 2572 2575 2580 2581 2588 2589 2590 2596 2605 2610 2614 2615 2629 2633
 2636 2639 3080 3082 3083 3084 3085 3087 3089 3090 3092 3093 3096 3097
 3099 3100 3104 3106 3108 3109 3110 3113 3118 3119 3120 3121 3122 3123
 3125 3126 3127 3128 3129 3131 3132 3134 3135 3136 3138 3139 3140 3141
 3143 3144 3148 3150 3151 3159 3161 3166 3167 3168 3169 3172 3173 3176
 3181 3182 3183 3188 3189 3194 3195 3196 3199 3200 3201 3202 3203 3204
 3205 3207 3208 3209 3210 3212 3215 3216 3218 3222 3223 3228 3229 3233
 3234 3239 3240 3241 3244 3245 3247 3248 3249 3252 3255 3256 3257 3258
 3259 3261 3263 3264 3266 3268 3269 3270 3272 3274 3275 3278 3280 3285
 3290 3291 3292 3293 3294 3295 3296 3297 3298 3300 3301 3302 3304 3310
 3313 3316 3317 3320 3323 3325 3327 3329 3330 3331 3337 3338 3340 3343
 3344 3345 3346 3347 3349 3350 3351 3354 3356 3358 3361 3366 3367 3368
 3372 3373 3374 3376 3377 3378 3381 3382 3384 3387 3388 3389 3391 3392
 3393 3394 3397 3398 3399 3401 3403 3407 3408 3409 3410 3413 3414 3415
 3416 3418 3422 3428 3430 3432 3433 3434 3435 3438 3445 3446 3448 3449
 3450 3453 3454 3456 3459 3460 3463 3465 3466 3468 3469 3470 3472 3473
 3476 3477 3478 3480 3482 3483 3485 3486 3491 3492 3493 3494 3498 3499
 3502 3504 3507 3508 3509 3510 3511 3512 3513 3515 3516 3517 3538 3559
 3628 3656 3679 3700 3704 3708 3714 3715 3757 3781 3799 3923 3928 3936
 3978 3980 3983 4007 4009 4043 4056 4058 4069 4081 4086 4099 4110 4119
 4139 4163 4186 4202 4242 4243 4252 4296 4302 4323 4337 4341 4347 4374
 4389 4392]
subset_sample_indices [3367  847 3280 2297   68 3983 2282 3714   92 3502 3472 3272 2385  941
 2251 3482]
subset_img_paths ['scratch/val/n07920052/images/n07920052_387.JPEG', 'scratch/val/n01983481/images/n01983481_67.JPEG', 'scratch/val/n07920052/images/n07920052_300.JPEG', 'scratch/val/n04597913/images/n04597913_197.JPEG', 'scratch/val/n01443537/images/n01443537_168.JPEG', 'scratch/val/n12267677/images/n12267677_123.JPEG', 'scratch/val/n04597913/images/n04597913_182.JPEG', 'scratch/val/n09428293/images/n09428293_294.JPEG', 'scratch/val/n01443537/images/n01443537_192.JPEG', 'scratch/val/n07920052/images/n07920052_82.JPEG', 'scratch/val/n07920052/images/n07920052_492.JPEG', 'scratch/val/n07920052/images/n07920052_292.JPEG', 'scratch/val/n04597913/images/n04597913_285.JPEG', 'scratch/val/n02988304/images/n02988304_161.JPEG', 'scratch/val/n04597913/images/n04597913_151.JPEG', 'scratch/val/n07920052/images/n07920052_62.JPEG']
rows:  4
cols:  4
len imgs:  16
=> saved grid_3.pdf, accuracy = 0.476, nsamples = 492
=> grid 3 labels: [7 1 7 5 0 9 5 8 0 7 7 7 5 2 5 7]
label_i 1
preds [8 8 8 ... 8 8 4]
np.where(preds == label_i) (array([  55,  853,  883,  886,  892,  893,  894,  901,  902,  904,  906,
        908,  910,  912,  913,  914,  918,  920,  921,  922,  923,  926,
        931,  934,  940,  942,  943,  945,  946,  948,  951,  953,  955,
        956,  959,  962,  964,  969,  971,  972,  973,  975,  976,  977,
        980,  981,  982,  984,  985,  988,  989,  990,  991,  993,  994,
        995,  997, 1002, 1003, 1004, 1009, 1014, 1018, 1020, 1025, 1027,
       1031, 1033, 1035, 1037, 1038, 1041, 1042, 1043, 1047, 1048, 1049,
       1050, 1055, 1056, 1057, 1062, 1063, 1069, 1072, 1074, 1080, 1082,
       1083, 1084, 1090, 1092, 1093, 1097, 1098, 1099, 1100, 1102, 1104,
       1105, 1111, 1118, 1120, 1121, 1123, 1124, 1128, 1129, 1130, 1134,
       1136, 1137, 1139, 1140, 1142, 1143, 1149, 1154, 1156, 1157, 1160,
       1162, 1163, 1165, 1166, 1168, 1169, 1172, 1173, 1175, 1179, 1180,
       1181, 1182, 1183, 1184, 1186, 1188, 1190, 1191, 1193, 1195, 1200,
       1201, 1212, 1213, 1221, 1223, 1224, 1225, 1226, 1229, 1230, 1231,
       1233, 1235, 1236, 1237, 1238, 1240, 1241, 1242, 1245, 1246, 1247,
       1248, 1249, 1250, 1251, 1252, 1256, 1258, 1260, 1261, 1262, 1263,
       1265, 1266, 1267, 1268, 1269, 1271, 1272, 1274, 1275, 1277, 1279,
       1281, 1284, 1286, 1289, 1290, 1291, 1294, 1296, 1297, 1299, 1300,
       1303, 1305, 1311, 1312, 1313, 1314, 1317, 1318, 1319, 1322, 1327,
       1331, 1332, 1333, 1334, 1335, 1340, 1344, 1346, 1349, 1350, 1351,
       1364, 1366, 1370, 1373, 1375, 1381, 1384, 1385, 1386, 1390, 1399,
       1406, 1410, 1411, 1413, 1419, 1421, 1425, 1429, 1433, 1437, 1442,
       1443, 1446, 1452, 1459, 1466, 1469, 1470, 1480, 1482, 1488, 1491,
       1492, 1498, 1502, 1503, 1509, 1512, 1515, 1519, 1523, 1524, 1529,
       1534, 1536, 1537, 1539, 1540, 1541, 1545, 1554, 1557, 1563, 1565,
       1571, 1581, 1583, 1584, 1598, 1602, 1604, 1605, 1607, 1609, 1618,
       1619, 1621, 1628, 1629, 1631, 1636, 1639, 1650, 1653, 1658, 1659,
       1660, 1669, 1672, 1675, 1681, 1682, 1688, 1690, 1695, 1698, 1699,
       1700, 1705, 1713, 1726, 1732, 1733, 1734, 1735, 1738, 1740, 1743,
       1744, 1746, 1749, 1751, 1760, 1762, 1764, 1767, 1770, 1773, 1774,
       1776, 1783, 1784, 1787, 1791, 1799, 1803, 1806, 1812, 1814, 1828,
       1829, 1830, 1833, 1835, 1847, 1850, 1852, 1853, 1867, 1869, 1873,
       1877, 1886, 1891, 1897, 1898, 1901, 1908, 1911, 1917, 1921, 1938,
       1942, 1948, 1950, 1951, 1954, 1955, 1959, 1966, 1973, 1981, 1982,
       1986, 1997, 2002, 2003, 2004, 2005, 2007, 2008, 2010, 2011, 2013,
       2017, 2018, 2024, 2025, 2026, 2031, 2034, 2036, 2038, 2040, 2044,
       2047, 2048, 2049, 2050, 2056, 2064, 2065, 2071, 2072, 2077, 2079,
       2090, 2095, 2105, 2109, 2110, 2118, 2122, 2124, 2126, 2133, 2135,
       2140, 2143, 2152, 2156, 2166, 2170, 2172, 2173, 2174, 2186, 2189,
       2191, 2195, 2196, 2234, 2257, 2374, 2388, 2795, 2878, 2929, 3011,
       3079, 3155, 3184, 3211, 3246, 3307, 3348, 3363, 3395, 3537, 3558,
       3590, 3602, 3609, 3649, 3677, 3682, 3725, 3736, 3765, 3804, 3826,
       3850, 3872, 3879, 4210]),)
sample_indices [  55  853  883  886  892  893  894  901  902  904  906  908  910  912
  913  914  918  920  921  922  923  926  931  934  940  942  943  945
  946  948  951  953  955  956  959  962  964  969  971  972  973  975
  976  977  980  981  982  984  985  988  989  990  991  993  994  995
  997 1002 1003 1004 1009 1014 1018 1020 1025 1027 1031 1033 1035 1037
 1038 1041 1042 1043 1047 1048 1049 1050 1055 1056 1057 1062 1063 1069
 1072 1074 1080 1082 1083 1084 1090 1092 1093 1097 1098 1099 1100 1102
 1104 1105 1111 1118 1120 1121 1123 1124 1128 1129 1130 1134 1136 1137
 1139 1140 1142 1143 1149 1154 1156 1157 1160 1162 1163 1165 1166 1168
 1169 1172 1173 1175 1179 1180 1181 1182 1183 1184 1186 1188 1190 1191
 1193 1195 1200 1201 1212 1213 1221 1223 1224 1225 1226 1229 1230 1231
 1233 1235 1236 1237 1238 1240 1241 1242 1245 1246 1247 1248 1249 1250
 1251 1252 1256 1258 1260 1261 1262 1263 1265 1266 1267 1268 1269 1271
 1272 1274 1275 1277 1279 1281 1284 1286 1289 1290 1291 1294 1296 1297
 1299 1300 1303 1305 1311 1312 1313 1314 1317 1318 1319 1322 1327 1331
 1332 1333 1334 1335 1340 1344 1346 1349 1350 1351 1364 1366 1370 1373
 1375 1381 1384 1385 1386 1390 1399 1406 1410 1411 1413 1419 1421 1425
 1429 1433 1437 1442 1443 1446 1452 1459 1466 1469 1470 1480 1482 1488
 1491 1492 1498 1502 1503 1509 1512 1515 1519 1523 1524 1529 1534 1536
 1537 1539 1540 1541 1545 1554 1557 1563 1565 1571 1581 1583 1584 1598
 1602 1604 1605 1607 1609 1618 1619 1621 1628 1629 1631 1636 1639 1650
 1653 1658 1659 1660 1669 1672 1675 1681 1682 1688 1690 1695 1698 1699
 1700 1705 1713 1726 1732 1733 1734 1735 1738 1740 1743 1744 1746 1749
 1751 1760 1762 1764 1767 1770 1773 1774 1776 1783 1784 1787 1791 1799
 1803 1806 1812 1814 1828 1829 1830 1833 1835 1847 1850 1852 1853 1867
 1869 1873 1877 1886 1891 1897 1898 1901 1908 1911 1917 1921 1938 1942
 1948 1950 1951 1954 1955 1959 1966 1973 1981 1982 1986 1997 2002 2003
 2004 2005 2007 2008 2010 2011 2013 2017 2018 2024 2025 2026 2031 2034
 2036 2038 2040 2044 2047 2048 2049 2050 2056 2064 2065 2071 2072 2077
 2079 2090 2095 2105 2109 2110 2118 2122 2124 2126 2133 2135 2140 2143
 2152 2156 2166 2170 2172 2173 2174 2186 2189 2191 2195 2196 2234 2257
 2374 2388 2795 2878 2929 3011 3079 3155 3184 3211 3246 3307 3348 3363
 3395 3537 3558 3590 3602 3609 3649 3677 3682 3725 3736 3765 3804 3826
 3850 3872 3879 4210]
subset_sample_indices [2388 1828 1183 1090 2004  926 1437 1584 1492 1406 3850 1783 2195 1120
 2005 2189]
subset_img_paths ['scratch/val/n04597913/images/n04597913_288.JPEG', 'scratch/val/n04285008/images/n04285008_168.JPEG', 'scratch/val/n02988304/images/n02988304_403.JPEG', 'scratch/val/n02988304/images/n02988304_310.JPEG', 'scratch/val/n04285008/images/n04285008_344.JPEG', 'scratch/val/n02988304/images/n02988304_146.JPEG', 'scratch/val/n03977966/images/n03977966_217.JPEG', 'scratch/val/n03977966/images/n03977966_364.JPEG', 'scratch/val/n03977966/images/n03977966_272.JPEG', 'scratch/val/n03977966/images/n03977966_186.JPEG', 'scratch/val/n09428293/images/n09428293_430.JPEG', 'scratch/val/n04285008/images/n04285008_123.JPEG', 'scratch/val/n04285008/images/n04285008_95.JPEG', 'scratch/val/n02988304/images/n02988304_340.JPEG', 'scratch/val/n04285008/images/n04285008_345.JPEG', 'scratch/val/n04285008/images/n04285008_89.JPEG']
rows:  4
cols:  4
len imgs:  16
=> saved grid_4.pdf, accuracy = 0.440, nsamples = 466
=> grid 4 labels: [5 4 2 2 4 2 3 3 3 3 8 4 4 2 4 4]
label_i 3
preds [8 8 8 ... 8 8 4]
np.where(preds == label_i) (array([  18,   43,  151,  294,  370,  450,  466,  481,  487,  546,  582,
        604,  635,  712,  726,  762,  766,  789,  794,  880,  885,  890,
        905,  919,  937,  965,  970,  979, 1006, 1010, 1024, 1026, 1032,
       1039, 1065, 1067, 1086, 1087, 1094, 1109, 1127, 1178, 1203, 1208,
       1209, 1218, 1227, 1228, 1239, 1253, 1273, 1278, 1293, 1355, 1362,
       1372, 1414, 1444, 1472, 1476, 1513, 1520, 1564, 1590, 1614, 1722,
       1766, 1780, 1781, 1785, 1788, 1790, 1796, 1801, 1818, 1819, 1824,
       1838, 1842, 1844, 1845, 1848, 1854, 1857, 1858, 1860, 1861, 1865,
       1868, 1870, 1875, 1884, 1885, 1903, 1904, 1912, 1913, 1914, 1924,
       1925, 1929, 1933, 1939, 1940, 1945, 1952, 1957, 1962, 1975, 1978,
       1980, 1985, 1996, 1998, 2001, 2009, 2012, 2014, 2015, 2016, 2028,
       2032, 2053, 2066, 2086, 2087, 2088, 2093, 2099, 2108, 2128, 2132,
       2134, 2138, 2155, 2162, 2168, 2175, 2177, 2178, 2181, 2184, 2239,
       2341, 2346, 2382, 2408, 2413, 2414, 2417, 2425, 2497, 2513, 2519,
       2532, 2609, 2612, 2794, 2849, 2869, 2996, 3019, 3267, 3417, 3421,
       3440, 3581, 3920, 4147, 4150, 4189, 4335, 4345]),)
sample_indices [  18   43  151  294  370  450  466  481  487  546  582  604  635  712
  726  762  766  789  794  880  885  890  905  919  937  965  970  979
 1006 1010 1024 1026 1032 1039 1065 1067 1086 1087 1094 1109 1127 1178
 1203 1208 1209 1218 1227 1228 1239 1253 1273 1278 1293 1355 1362 1372
 1414 1444 1472 1476 1513 1520 1564 1590 1614 1722 1766 1780 1781 1785
 1788 1790 1796 1801 1818 1819 1824 1838 1842 1844 1845 1848 1854 1857
 1858 1860 1861 1865 1868 1870 1875 1884 1885 1903 1904 1912 1913 1914
 1924 1925 1929 1933 1939 1940 1945 1952 1957 1962 1975 1978 1980 1985
 1996 1998 2001 2009 2012 2014 2015 2016 2028 2032 2053 2066 2086 2087
 2088 2093 2099 2108 2128 2132 2134 2138 2155 2162 2168 2175 2177 2178
 2181 2184 2239 2341 2346 2382 2408 2413 2414 2417 2425 2497 2513 2519
 2532 2609 2612 2794 2849 2869 2996 3019 3267 3417 3421 3440 3581 3920
 4147 4150 4189 4335 4345]
subset_sample_indices [1362 2408 1590 1372 2087 1929  481 2609 1945 1870 2177 2341  450 1914
 3417 1903]
subset_img_paths ['scratch/val/n03977966/images/n03977966_142.JPEG', 'scratch/val/n04597913/images/n04597913_308.JPEG', 'scratch/val/n03977966/images/n03977966_370.JPEG', 'scratch/val/n03977966/images/n03977966_152.JPEG', 'scratch/val/n04285008/images/n04285008_427.JPEG', 'scratch/val/n04285008/images/n04285008_269.JPEG', 'scratch/val/n01983481/images/n01983481_141.JPEG', 'scratch/val/n04597913/images/n04597913_69.JPEG', 'scratch/val/n04285008/images/n04285008_285.JPEG', 'scratch/val/n04285008/images/n04285008_210.JPEG', 'scratch/val/n04285008/images/n04285008_77.JPEG', 'scratch/val/n04597913/images/n04597913_241.JPEG', 'scratch/val/n01983481/images/n01983481_110.JPEG', 'scratch/val/n04285008/images/n04285008_254.JPEG', 'scratch/val/n07920052/images/n07920052_437.JPEG', 'scratch/val/n04285008/images/n04285008_243.JPEG']
rows:  4
cols:  4
len imgs:  16
=> saved grid_5.pdf, accuracy = 0.439, nsamples = 173
=> grid 5 labels: [3 5 3 3 4 4 1 5 4 4 4 5 1 4 7 4]
label_i 8
preds [8 8 8 ... 8 8 4]
np.where(preds == label_i) (array([   0,    1,    2,    5,    7,    8,   10,   12,   14,   17,   21,
         25,   26,   27,   28,   30,   31,   33,   39,   41,   42,   44,
         45,   48,   49,   50,   51,   52,   54,   56,   57,   58,   59,
         60,   62,   64,   66,   69,   70,   71,   73,   78,   80,   81,
         82,   83,   86,   88,   89,   91,   93,   94,   96,   97,   99,
        100,  101,  103,  104,  105,  106,  109,  111,  112,  113,  114,
        115,  116,  117,  119,  121,  123,  127,  130,  132,  137,  139,
        140,  141,  142,  143,  146,  147,  149,  153,  155,  156,  158,
        161,  162,  164,  165,  166,  168,  170,  171,  172,  174,  175,
        177,  179,  181,  182,  184,  186,  188,  189,  191,  193,  199,
        201,  202,  205,  208,  212,  214,  215,  217,  220,  222,  224,
        225,  229,  231,  232,  233,  235,  236,  237,  238,  240,  243,
        246,  248,  250,  252,  255,  257,  258,  260,  261,  264,  265,
        266,  267,  268,  271,  273,  275,  277,  278,  284,  285,  287,
        288,  292,  295,  296,  297,  299,  300,  302,  304,  306,  307,
        314,  316,  317,  320,  321,  322,  324,  326,  327,  331,  332,
        334,  335,  336,  337,  339,  342,  344,  346,  350,  351,  354,
        357,  359,  361,  363,  365,  372,  373,  374,  375,  376,  377,
        379,  380,  382,  384,  385,  386,  388,  391,  394,  395,  397,
        399,  400,  401,  402,  403,  404,  405,  407,  409,  410,  412,
        413,  414,  416,  418,  419,  420,  421,  426,  427,  429,  430,
        431,  433,  435,  436,  437,  438,  446,  448,  455,  456,  458,
        460,  461,  463,  467,  470,  471,  472,  476,  478,  485,  497,
        500,  504,  505,  506,  508,  509,  512,  513,  517,  518,  519,
        521,  527,  529,  531,  532,  537,  542,  543,  545,  550,  552,
        555,  558,  564,  567,  569,  571,  573,  574,  579,  580,  581,
        584,  585,  588,  589,  603,  605,  607,  611,  615,  618,  622,
        623,  627,  628,  630,  633,  637,  644,  649,  650,  655,  658,
        661,  665,  668,  671,  672,  674,  677,  678,  684,  685,  687,
        690,  691,  694,  698,  699,  701,  706,  707,  708,  709,  711,
        724,  734,  737,  740,  741,  743,  746,  750,  751,  756,  759,
        765,  773,  775,  780,  783,  787,  791,  798,  799,  801,  803,
        804,  817,  818,  821,  825,  826,  833,  838,  839,  841,  845,
        855,  856,  857,  858,  859,  861,  865,  866,  870,  872,  873,
        876,  878,  881,  884,  887,  909,  927,  929,  963, 1001, 1012,
       1016, 1022, 1036, 1068, 1078, 1088, 1107, 1113, 1115, 1135, 1146,
       1153, 1159, 1161, 1177, 1185, 1189, 1220, 1257, 1264, 1285, 1307,
       1765, 1800, 1863, 1876, 1887, 1979, 2043, 2062, 2067, 2103, 2113,
       2141, 2165, 2180, 2200, 2202, 2205, 2208, 2211, 2217, 2218, 2232,
       2238, 2244, 2246, 2247, 2254, 2255, 2260, 2268, 2274, 2277, 2286,
       2296, 2299, 2308, 2311, 2313, 2320, 2326, 2327, 2328, 2331, 2334,
       2336, 2340, 2349, 2352, 2353, 2354, 2366, 2367, 2370, 2376, 2398,
       2403, 2404, 2411, 2419, 2420, 2426, 2434, 2436, 2441, 2443, 2444,
       2447, 2448, 2450, 2463, 2465, 2468, 2472, 2479, 2480, 2481, 2482,
       2484, 2485, 2487, 2488, 2489, 2491, 2493, 2502, 2512, 2515, 2516,
       2517, 2518, 2522, 2526, 2528, 2535, 2537, 2540, 2545, 2546, 2549,
       2550, 2557, 2560, 2562, 2573, 2577, 2578, 2591, 2592, 2595, 2599,
       2601, 2607, 2608, 2616, 2619, 2621, 2623, 2624, 2626, 2792, 2909,
       2971, 3017, 3111, 3124, 3130, 3137, 3142, 3149, 3153, 3157, 3165,
       3171, 3175, 3180, 3185, 3191, 3214, 3231, 3238, 3243, 3279, 3287,
       3305, 3309, 3311, 3315, 3328, 3332, 3333, 3334, 3353, 3355, 3357,
       3379, 3396, 3406, 3419, 3420, 3424, 3431, 3439, 3443, 3451, 3462,
       3464, 3489, 3490, 3497, 3503, 3619, 3689, 3759, 3784, 3891, 3921,
       3961, 3962, 3965, 3971, 3981, 3984, 3986, 3987, 3988, 3989, 3996,
       3997, 3999, 4003, 4004, 4006, 4010, 4011, 4018, 4025, 4027, 4031,
       4033, 4037, 4044, 4047, 4048, 4064, 4074, 4075, 4077, 4080, 4089,
       4090, 4094, 4095, 4098, 4103, 4105, 4108, 4118, 4120, 4121, 4125,
       4128, 4141, 4154, 4157, 4166, 4168, 4170, 4171, 4180, 4187, 4191,
       4193, 4195, 4198, 4204, 4207, 4213, 4220, 4221, 4224, 4233, 4234,
       4236, 4248, 4250, 4251, 4254, 4256, 4257, 4260, 4267, 4273, 4279,
       4281, 4282, 4283, 4285, 4287, 4289, 4292, 4294, 4299, 4300, 4305,
       4312, 4313, 4314, 4315, 4316, 4332, 4340, 4351, 4352, 4358, 4359,
       4365, 4370, 4371, 4377, 4382, 4385, 4387, 4390, 4391, 4397, 4398]),)
sample_indices [   0    1    2    5    7    8   10   12   14   17   21   25   26   27
   28   30   31   33   39   41   42   44   45   48   49   50   51   52
   54   56   57   58   59   60   62   64   66   69   70   71   73   78
   80   81   82   83   86   88   89   91   93   94   96   97   99  100
  101  103  104  105  106  109  111  112  113  114  115  116  117  119
  121  123  127  130  132  137  139  140  141  142  143  146  147  149
  153  155  156  158  161  162  164  165  166  168  170  171  172  174
  175  177  179  181  182  184  186  188  189  191  193  199  201  202
  205  208  212  214  215  217  220  222  224  225  229  231  232  233
  235  236  237  238  240  243  246  248  250  252  255  257  258  260
  261  264  265  266  267  268  271  273  275  277  278  284  285  287
  288  292  295  296  297  299  300  302  304  306  307  314  316  317
  320  321  322  324  326  327  331  332  334  335  336  337  339  342
  344  346  350  351  354  357  359  361  363  365  372  373  374  375
  376  377  379  380  382  384  385  386  388  391  394  395  397  399
  400  401  402  403  404  405  407  409  410  412  413  414  416  418
  419  420  421  426  427  429  430  431  433  435  436  437  438  446
  448  455  456  458  460  461  463  467  470  471  472  476  478  485
  497  500  504  505  506  508  509  512  513  517  518  519  521  527
  529  531  532  537  542  543  545  550  552  555  558  564  567  569
  571  573  574  579  580  581  584  585  588  589  603  605  607  611
  615  618  622  623  627  628  630  633  637  644  649  650  655  658
  661  665  668  671  672  674  677  678  684  685  687  690  691  694
  698  699  701  706  707  708  709  711  724  734  737  740  741  743
  746  750  751  756  759  765  773  775  780  783  787  791  798  799
  801  803  804  817  818  821  825  826  833  838  839  841  845  855
  856  857  858  859  861  865  866  870  872  873  876  878  881  884
  887  909  927  929  963 1001 1012 1016 1022 1036 1068 1078 1088 1107
 1113 1115 1135 1146 1153 1159 1161 1177 1185 1189 1220 1257 1264 1285
 1307 1765 1800 1863 1876 1887 1979 2043 2062 2067 2103 2113 2141 2165
 2180 2200 2202 2205 2208 2211 2217 2218 2232 2238 2244 2246 2247 2254
 2255 2260 2268 2274 2277 2286 2296 2299 2308 2311 2313 2320 2326 2327
 2328 2331 2334 2336 2340 2349 2352 2353 2354 2366 2367 2370 2376 2398
 2403 2404 2411 2419 2420 2426 2434 2436 2441 2443 2444 2447 2448 2450
 2463 2465 2468 2472 2479 2480 2481 2482 2484 2485 2487 2488 2489 2491
 2493 2502 2512 2515 2516 2517 2518 2522 2526 2528 2535 2537 2540 2545
 2546 2549 2550 2557 2560 2562 2573 2577 2578 2591 2592 2595 2599 2601
 2607 2608 2616 2619 2621 2623 2624 2626 2792 2909 2971 3017 3111 3124
 3130 3137 3142 3149 3153 3157 3165 3171 3175 3180 3185 3191 3214 3231
 3238 3243 3279 3287 3305 3309 3311 3315 3328 3332 3333 3334 3353 3355
 3357 3379 3396 3406 3419 3420 3424 3431 3439 3443 3451 3462 3464 3489
 3490 3497 3503 3619 3689 3759 3784 3891 3921 3961 3962 3965 3971 3981
 3984 3986 3987 3988 3989 3996 3997 3999 4003 4004 4006 4010 4011 4018
 4025 4027 4031 4033 4037 4044 4047 4048 4064 4074 4075 4077 4080 4089
 4090 4094 4095 4098 4103 4105 4108 4118 4120 4121 4125 4128 4141 4154
 4157 4166 4168 4170 4171 4180 4187 4191 4193 4195 4198 4204 4207 4213
 4220 4221 4224 4233 4234 4236 4248 4250 4251 4254 4256 4257 4260 4267
 4273 4279 4281 4282 4283 4285 4287 4289 4292 4294 4299 4300 4305 4312
 4313 4314 4315 4316 4332 4340 4351 4352 4358 4359 4365 4370 4371 4377
 4382 4385 4387 4390 4391 4397 4398]
subset_sample_indices [2353  267 4018 3759  833   58  467 4377  208 3171   28 4168  376 2218
 2419  229]
subset_img_paths ['scratch/val/n04597913/images/n04597913_253.JPEG', 'scratch/val/n01443537/images/n01443537_367.JPEG', 'scratch/val/n12267677/images/n12267677_158.JPEG', 'scratch/val/n09428293/images/n09428293_339.JPEG', 'scratch/val/n01983481/images/n01983481_493.JPEG', 'scratch/val/n01443537/images/n01443537_158.JPEG', 'scratch/val/n01983481/images/n01983481_127.JPEG', 'scratch/val/n12267677/images/n12267677_77.JPEG', 'scratch/val/n01443537/images/n01443537_308.JPEG', 'scratch/val/n07920052/images/n07920052_191.JPEG', 'scratch/val/n01443537/images/n01443537_128.JPEG', 'scratch/val/n12267677/images/n12267677_308.JPEG', 'scratch/val/n01443537/images/n01443537_476.JPEG', 'scratch/val/n04597913/images/n04597913_118.JPEG', 'scratch/val/n04597913/images/n04597913_319.JPEG', 'scratch/val/n01443537/images/n01443537_329.JPEG']
rows:  4
cols:  4
len imgs:  16
=> saved grid_6.pdf, accuracy = 0.342, nsamples = 693
=> grid 6 labels: [5 0 9 8 1 0 1 9 0 7 0 9 0 5 5 0]
label_i 4
preds [8 8 8 ... 8 8 4]
np.where(preds == label_i) (array([   3,   11,   23,   24,   32,   34,   38,   47,   75,   76,   90,
        102,  107,  110,  120,  124,  125,  128,  129,  131,  134,  144,
        145,  148,  152,  163,  167,  192,  195,  200,  207,  209,  211,
        216,  218,  221,  239,  242,  244,  247,  254,  262,  263,  269,
        276,  291,  308,  309,  311,  312,  315,  325,  330,  338,  352,
        355,  360,  362,  378,  383,  387,  396,  417,  424,  434,  441,
        445,  447,  451,  454,  462,  468,  469,  473,  474,  477,  479,
        480,  482,  484,  486,  488,  489,  490,  491,  492,  493,  494,
        496,  498,  499,  501,  502,  503,  507,  510,  511,  514,  515,
        516,  520,  524,  526,  533,  535,  536,  538,  547,  548,  549,
        556,  559,  560,  566,  570,  578,  583,  586,  587,  590,  592,
        594,  595,  596,  598,  599,  601,  602,  609,  613,  614,  621,
        625,  631,  632,  639,  641,  642,  643,  645,  646,  647,  651,
        653,  654,  657,  659,  660,  666,  669,  680,  682,  683,  686,
        689,  696,  697,  700,  702,  704,  705,  710,  714,  715,  716,
        717,  718,  721,  722,  725,  728,  731,  732,  733,  736,  738,
        742,  747,  748,  749,  755,  757,  758,  760,  761,  763,  764,
        767,  768,  770,  771,  772,  774,  776,  779,  781,  784,  785,
        788,  790,  795,  800,  805,  806,  809,  810,  812,  815,  816,
        819,  823,  824,  827,  828,  830,  834,  835,  836,  840,  842,
        844,  846,  848,  850,  852,  854,  863,  864,  867,  868,  869,
        871,  875,  879,  925,  932,  936,  947,  960,  974,  996, 1029,
       1040, 1079, 1110, 1158, 1192, 1198, 1204, 1206, 1232, 1243, 1288,
       1292, 1298, 1365, 1389, 1793, 1805, 1840, 1874, 1879, 1895, 1907,
       1910, 1935, 1988, 1991, 1995, 2021, 2037, 2051, 2076, 2100, 2142,
       2150, 2151, 2157, 2201, 2207, 2212, 2219, 2221, 2228, 2233, 2235,
       2245, 2253, 2256, 2259, 2261, 2262, 2264, 2266, 2270, 2280, 2289,
       2295, 2301, 2304, 2309, 2314, 2322, 2335, 2347, 2357, 2359, 2365,
       2368, 2369, 2372, 2375, 2377, 2378, 2379, 2386, 2387, 2390, 2395,
       2401, 2412, 2415, 2421, 2423, 2449, 2461, 2464, 2467, 2470, 2477,
       2495, 2500, 2503, 2508, 2521, 2523, 2530, 2541, 2544, 2570, 2571,
       2574, 2579, 2582, 2583, 2586, 2598, 2606, 2611, 2618, 2620, 2627,
       2632, 2638, 2647, 2672, 2697, 2698, 2704, 2710, 2760, 2761, 2768,
       2770, 2789, 2830, 2861, 2875, 2877, 2894, 2895, 2898, 2904, 2911,
       2913, 2981, 3000, 3004, 3007, 3013, 3016, 3028, 3029, 3034, 3049,
       3086, 3091, 3103, 3117, 3158, 3341, 3352, 3404, 3423, 3457, 3484,
       3646, 3960, 3969, 3973, 3974, 3976, 3977, 3979, 3985, 3991, 3998,
       4000, 4012, 4013, 4014, 4019, 4020, 4022, 4023, 4024, 4028, 4030,
       4034, 4035, 4036, 4038, 4040, 4042, 4049, 4051, 4053, 4054, 4057,
       4062, 4063, 4065, 4066, 4068, 4070, 4071, 4072, 4073, 4076, 4078,
       4079, 4083, 4084, 4087, 4088, 4091, 4092, 4096, 4102, 4104, 4106,
       4107, 4113, 4114, 4115, 4116, 4117, 4122, 4123, 4126, 4129, 4130,
       4131, 4133, 4138, 4143, 4145, 4146, 4149, 4155, 4156, 4158, 4159,
       4161, 4164, 4165, 4167, 4174, 4176, 4177, 4183, 4184, 4185, 4188,
       4190, 4196, 4197, 4203, 4208, 4211, 4212, 4222, 4226, 4227, 4232,
       4235, 4239, 4244, 4247, 4249, 4253, 4255, 4258, 4259, 4261, 4263,
       4266, 4268, 4276, 4277, 4280, 4284, 4290, 4293, 4295, 4303, 4304,
       4306, 4308, 4311, 4317, 4318, 4321, 4326, 4327, 4328, 4329, 4330,
       4331, 4333, 4339, 4343, 4346, 4348, 4349, 4356, 4357, 4360, 4361,
       4362, 4366, 4372, 4376, 4378, 4379, 4380, 4381, 4383, 4384, 4388,
       4394, 4399]),)
sample_indices [   3   11   23   24   32   34   38   47   75   76   90  102  107  110
  120  124  125  128  129  131  134  144  145  148  152  163  167  192
  195  200  207  209  211  216  218  221  239  242  244  247  254  262
  263  269  276  291  308  309  311  312  315  325  330  338  352  355
  360  362  378  383  387  396  417  424  434  441  445  447  451  454
  462  468  469  473  474  477  479  480  482  484  486  488  489  490
  491  492  493  494  496  498  499  501  502  503  507  510  511  514
  515  516  520  524  526  533  535  536  538  547  548  549  556  559
  560  566  570  578  583  586  587  590  592  594  595  596  598  599
  601  602  609  613  614  621  625  631  632  639  641  642  643  645
  646  647  651  653  654  657  659  660  666  669  680  682  683  686
  689  696  697  700  702  704  705  710  714  715  716  717  718  721
  722  725  728  731  732  733  736  738  742  747  748  749  755  757
  758  760  761  763  764  767  768  770  771  772  774  776  779  781
  784  785  788  790  795  800  805  806  809  810  812  815  816  819
  823  824  827  828  830  834  835  836  840  842  844  846  848  850
  852  854  863  864  867  868  869  871  875  879  925  932  936  947
  960  974  996 1029 1040 1079 1110 1158 1192 1198 1204 1206 1232 1243
 1288 1292 1298 1365 1389 1793 1805 1840 1874 1879 1895 1907 1910 1935
 1988 1991 1995 2021 2037 2051 2076 2100 2142 2150 2151 2157 2201 2207
 2212 2219 2221 2228 2233 2235 2245 2253 2256 2259 2261 2262 2264 2266
 2270 2280 2289 2295 2301 2304 2309 2314 2322 2335 2347 2357 2359 2365
 2368 2369 2372 2375 2377 2378 2379 2386 2387 2390 2395 2401 2412 2415
 2421 2423 2449 2461 2464 2467 2470 2477 2495 2500 2503 2508 2521 2523
 2530 2541 2544 2570 2571 2574 2579 2582 2583 2586 2598 2606 2611 2618
 2620 2627 2632 2638 2647 2672 2697 2698 2704 2710 2760 2761 2768 2770
 2789 2830 2861 2875 2877 2894 2895 2898 2904 2911 2913 2981 3000 3004
 3007 3013 3016 3028 3029 3034 3049 3086 3091 3103 3117 3158 3341 3352
 3404 3423 3457 3484 3646 3960 3969 3973 3974 3976 3977 3979 3985 3991
 3998 4000 4012 4013 4014 4019 4020 4022 4023 4024 4028 4030 4034 4035
 4036 4038 4040 4042 4049 4051 4053 4054 4057 4062 4063 4065 4066 4068
 4070 4071 4072 4073 4076 4078 4079 4083 4084 4087 4088 4091 4092 4096
 4102 4104 4106 4107 4113 4114 4115 4116 4117 4122 4123 4126 4129 4130
 4131 4133 4138 4143 4145 4146 4149 4155 4156 4158 4159 4161 4164 4165
 4167 4174 4176 4177 4183 4184 4185 4188 4190 4196 4197 4203 4208 4211
 4212 4222 4226 4227 4232 4235 4239 4244 4247 4249 4253 4255 4258 4259
 4261 4263 4266 4268 4276 4277 4280 4284 4290 4293 4295 4303 4304 4306
 4308 4311 4317 4318 4321 4326 4327 4328 4329 4330 4331 4333 4339 4343
 4346 4348 4349 4356 4357 4360 4361 4362 4366 4372 4376 4378 4379 4380
 4381 4383 4384 4388 4394 4399]
subset_sample_indices [ 492 4212  511  547 1907  242 3484  499 4290 3028  717 4076  445  625
 4091 4308]
subset_img_paths ['scratch/val/n01983481/images/n01983481_152.JPEG', 'scratch/val/n12267677/images/n12267677_352.JPEG', 'scratch/val/n01983481/images/n01983481_171.JPEG', 'scratch/val/n01983481/images/n01983481_207.JPEG', 'scratch/val/n04285008/images/n04285008_247.JPEG', 'scratch/val/n01443537/images/n01443537_342.JPEG', 'scratch/val/n07920052/images/n07920052_64.JPEG', 'scratch/val/n01983481/images/n01983481_159.JPEG', 'scratch/val/n12267677/images/n12267677_430.JPEG', 'scratch/val/n06596364/images/n06596364_488.JPEG', 'scratch/val/n01983481/images/n01983481_377.JPEG', 'scratch/val/n12267677/images/n12267677_216.JPEG', 'scratch/val/n01983481/images/n01983481_105.JPEG', 'scratch/val/n01983481/images/n01983481_285.JPEG', 'scratch/val/n12267677/images/n12267677_231.JPEG', 'scratch/val/n12267677/images/n12267677_448.JPEG']
rows:  4
cols:  4
len imgs:  16
=> saved grid_7.pdf, accuracy = 0.281, nsamples = 552
=> grid 7 labels: [1 9 1 1 4 0 7 1 9 6 1 9 1 1 9 9]
label_i 9
preds [8 8 8 ... 8 8 4]
np.where(preds == label_i) (array([   4,   13,   36,   53,   61,  126,  160,  176,  197,  230,  259,
        279,  286,  319,  333,  345,  353,  364,  428,  452,  483,  554,
        619,  620,  662,  663,  673,  679,  713,  730,  778,  786,  796,
        808,  837,  897,  898,  900,  903,  907,  916,  917,  924,  928,
        938,  944,  949,  950,  954,  961,  966,  998, 1000, 1017, 1021,
       1023, 1028, 1034, 1044, 1060, 1071, 1073, 1075, 1076, 1077, 1095,
       1101, 1103, 1106, 1112, 1117, 1119, 1132, 1141, 1144, 1145, 1147,
       1148, 1155, 1196, 1197, 1210, 1216, 1217, 1234, 1270, 1276, 1280,
       1308, 1309, 1315, 1504, 1552, 1678, 1684, 1797, 1836, 1846, 1878,
       1922, 1983, 2039, 2206, 2209, 2215, 2222, 2223, 2225, 2226, 2230,
       2231, 2240, 2241, 2248, 2249, 2250, 2263, 2267, 2269, 2275, 2276,
       2283, 2287, 2288, 2294, 2303, 2306, 2310, 2315, 2319, 2325, 2329,
       2330, 2333, 2337, 2339, 2342, 2343, 2360, 2361, 2363, 2371, 2384,
       2391, 2396, 2407, 2422, 2424, 2429, 2439, 2446, 2452, 2458, 2460,
       2462, 2466, 2471, 2473, 2475, 2476, 2486, 2492, 2498, 2499, 2507,
       2511, 2533, 2539, 2554, 2558, 2561, 2565, 2566, 2576, 2585, 2587,
       2593, 2594, 2597, 2602, 2630, 2631, 2637, 2660, 2780, 2949, 3021,
       3081, 3088, 3094, 3095, 3098, 3101, 3102, 3105, 3107, 3112, 3114,
       3115, 3116, 3133, 3145, 3146, 3147, 3152, 3154, 3156, 3160, 3164,
       3170, 3174, 3177, 3178, 3179, 3186, 3187, 3190, 3192, 3193, 3197,
       3198, 3206, 3213, 3219, 3220, 3221, 3224, 3225, 3226, 3227, 3230,
       3232, 3236, 3237, 3242, 3250, 3251, 3253, 3254, 3260, 3262, 3265,
       3271, 3273, 3276, 3277, 3281, 3282, 3284, 3288, 3289, 3299, 3303,
       3306, 3308, 3312, 3314, 3318, 3319, 3321, 3322, 3326, 3335, 3336,
       3339, 3342, 3359, 3360, 3362, 3364, 3365, 3369, 3370, 3371, 3375,
       3383, 3385, 3386, 3390, 3400, 3402, 3405, 3411, 3412, 3425, 3426,
       3427, 3429, 3436, 3437, 3441, 3442, 3444, 3447, 3452, 3455, 3458,
       3461, 3467, 3471, 3474, 3475, 3479, 3481, 3487, 3488, 3495, 3500,
       3501, 3506, 3514, 3518, 3519, 3935, 4001, 4016, 4041, 4136, 4142,
       4152, 4178, 4182, 4206, 4272, 4301, 4363]),)
sample_indices [   4   13   36   53   61  126  160  176  197  230  259  279  286  319
  333  345  353  364  428  452  483  554  619  620  662  663  673  679
  713  730  778  786  796  808  837  897  898  900  903  907  916  917
  924  928  938  944  949  950  954  961  966  998 1000 1017 1021 1023
 1028 1034 1044 1060 1071 1073 1075 1076 1077 1095 1101 1103 1106 1112
 1117 1119 1132 1141 1144 1145 1147 1148 1155 1196 1197 1210 1216 1217
 1234 1270 1276 1280 1308 1309 1315 1504 1552 1678 1684 1797 1836 1846
 1878 1922 1983 2039 2206 2209 2215 2222 2223 2225 2226 2230 2231 2240
 2241 2248 2249 2250 2263 2267 2269 2275 2276 2283 2287 2288 2294 2303
 2306 2310 2315 2319 2325 2329 2330 2333 2337 2339 2342 2343 2360 2361
 2363 2371 2384 2391 2396 2407 2422 2424 2429 2439 2446 2452 2458 2460
 2462 2466 2471 2473 2475 2476 2486 2492 2498 2499 2507 2511 2533 2539
 2554 2558 2561 2565 2566 2576 2585 2587 2593 2594 2597 2602 2630 2631
 2637 2660 2780 2949 3021 3081 3088 3094 3095 3098 3101 3102 3105 3107
 3112 3114 3115 3116 3133 3145 3146 3147 3152 3154 3156 3160 3164 3170
 3174 3177 3178 3179 3186 3187 3190 3192 3193 3197 3198 3206 3213 3219
 3220 3221 3224 3225 3226 3227 3230 3232 3236 3237 3242 3250 3251 3253
 3254 3260 3262 3265 3271 3273 3276 3277 3281 3282 3284 3288 3289 3299
 3303 3306 3308 3312 3314 3318 3319 3321 3322 3326 3335 3336 3339 3342
 3359 3360 3362 3364 3365 3369 3370 3371 3375 3383 3385 3386 3390 3400
 3402 3405 3411 3412 3425 3426 3427 3429 3436 3437 3441 3442 3444 3447
 3452 3455 3458 3461 3467 3471 3474 3475 3479 3481 3487 3488 3495 3500
 3501 3506 3514 3518 3519 3935 4001 4016 4041 4136 4142 4152 4178 4182
 4206 4272 4301 4363]
subset_sample_indices [2287 1101 2384 3277 2422 1076 3364  345 2342 2396 3359 1060  673 1106
 3178 3288]
subset_img_paths ['scratch/val/n04597913/images/n04597913_187.JPEG', 'scratch/val/n02988304/images/n02988304_321.JPEG', 'scratch/val/n04597913/images/n04597913_284.JPEG', 'scratch/val/n07920052/images/n07920052_297.JPEG', 'scratch/val/n04597913/images/n04597913_322.JPEG', 'scratch/val/n02988304/images/n02988304_296.JPEG', 'scratch/val/n07920052/images/n07920052_384.JPEG', 'scratch/val/n01443537/images/n01443537_445.JPEG', 'scratch/val/n04597913/images/n04597913_242.JPEG', 'scratch/val/n04597913/images/n04597913_296.JPEG', 'scratch/val/n07920052/images/n07920052_379.JPEG', 'scratch/val/n02988304/images/n02988304_280.JPEG', 'scratch/val/n01983481/images/n01983481_333.JPEG', 'scratch/val/n02988304/images/n02988304_326.JPEG', 'scratch/val/n07920052/images/n07920052_198.JPEG', 'scratch/val/n07920052/images/n07920052_308.JPEG']
rows:  4
cols:  4
len imgs:  16
=> saved grid_8.pdf, accuracy = 0.248, nsamples = 326
=> grid 8 labels: [5 2 5 7 5 2 7 0 5 5 7 2 1 2 7 7]
label_i 5
preds [8 8 8 ... 8 8 4]
np.where(preds == label_i) (array([ 340,  348,  442,  443,  522,  523,  525,  528,  539,  544,  562,
        563,  577,  591,  600,  606,  634,  638,  652,  729,  744,  782,
        811,  813,  849,  860,  999, 1005, 1015, 1045, 1046, 1096, 1199,
       1214, 1222, 1316, 1361, 1369, 1377, 1394, 1402, 1409, 1420, 1431,
       1435, 1445, 1487, 1494, 1525, 1526, 1531, 1550, 1608, 1624, 1625,
       1627, 1641, 1654, 1664, 1673, 1677, 1680, 1706, 1707, 1710, 1724,
       1745, 1752, 1756, 1757, 1763, 1794, 1802, 1808, 1813, 1816, 1817,
       1825, 1831, 1834, 1837, 1843, 1851, 1855, 1856, 1859, 1862, 1881,
       1894, 1906, 1916, 1936, 1937, 1943, 1946, 1949, 1953, 1958, 1965,
       1977, 2000, 2020, 2023, 2046, 2054, 2063, 2069, 2078, 2085, 2092,
       2096, 2097, 2101, 2104, 2111, 2112, 2116, 2121, 2125, 2127, 2130,
       2136, 2146, 2147, 2149, 2163, 2187, 2188, 2193, 2197, 2198, 2227,
       2290, 2321, 2394, 2399, 2453, 2469, 2496, 2506, 2538, 2542, 2564,
       2584, 2617, 2641, 2642, 2655, 2659, 2668, 2673, 2685, 2687, 2690,
       2706, 2711, 2712, 2714, 2715, 2717, 2728, 2734, 2736, 2746, 2749,
       2766, 2769, 2771, 2774, 2784, 2786, 2790, 2791, 2799, 2802, 2809,
       2812, 2813, 2816, 2823, 2828, 2831, 2832, 2834, 2837, 2838, 2842,
       2845, 2848, 2850, 2852, 2859, 2862, 2867, 2868, 2882, 2897, 2912,
       2918, 2920, 2928, 2937, 2944, 2963, 2964, 2968, 2969, 2975, 2976,
       2983, 2993, 2998, 2999, 3008, 3012, 3020, 3022, 3025, 3027, 3033,
       3037, 3039, 3045, 3051, 3054, 3063, 3067, 3068, 3072, 3075, 3162,
       3286, 3608, 3640, 3681, 3686, 3752, 3769, 3929, 3966]),)
sample_indices [ 340  348  442  443  522  523  525  528  539  544  562  563  577  591
  600  606  634  638  652  729  744  782  811  813  849  860  999 1005
 1015 1045 1046 1096 1199 1214 1222 1316 1361 1369 1377 1394 1402 1409
 1420 1431 1435 1445 1487 1494 1525 1526 1531 1550 1608 1624 1625 1627
 1641 1654 1664 1673 1677 1680 1706 1707 1710 1724 1745 1752 1756 1757
 1763 1794 1802 1808 1813 1816 1817 1825 1831 1834 1837 1843 1851 1855
 1856 1859 1862 1881 1894 1906 1916 1936 1937 1943 1946 1949 1953 1958
 1965 1977 2000 2020 2023 2046 2054 2063 2069 2078 2085 2092 2096 2097
 2101 2104 2111 2112 2116 2121 2125 2127 2130 2136 2146 2147 2149 2163
 2187 2188 2193 2197 2198 2227 2290 2321 2394 2399 2453 2469 2496 2506
 2538 2542 2564 2584 2617 2641 2642 2655 2659 2668 2673 2685 2687 2690
 2706 2711 2712 2714 2715 2717 2728 2734 2736 2746 2749 2766 2769 2771
 2774 2784 2786 2790 2791 2799 2802 2809 2812 2813 2816 2823 2828 2831
 2832 2834 2837 2838 2842 2845 2848 2850 2852 2859 2862 2867 2868 2882
 2897 2912 2918 2920 2928 2937 2944 2963 2964 2968 2969 2975 2976 2983
 2993 2998 2999 3008 3012 3020 3022 3025 3027 3033 3037 3039 3045 3051
 3054 3063 3067 3068 3072 3075 3162 3286 3608 3640 3681 3686 3752 3769
 3929 3966]
subset_sample_indices [2092 1794 1369 1813 2085 3068 2712 3037 2687 2868 1817 2944 1855 2714
 3681 2394]
subset_img_paths ['scratch/val/n04285008/images/n04285008_432.JPEG', 'scratch/val/n04285008/images/n04285008_134.JPEG', 'scratch/val/n03977966/images/n03977966_149.JPEG', 'scratch/val/n04285008/images/n04285008_153.JPEG', 'scratch/val/n04285008/images/n04285008_425.JPEG', 'scratch/val/n06596364/images/n06596364_88.JPEG', 'scratch/val/n06596364/images/n06596364_172.JPEG', 'scratch/val/n06596364/images/n06596364_497.JPEG', 'scratch/val/n06596364/images/n06596364_147.JPEG', 'scratch/val/n06596364/images/n06596364_328.JPEG', 'scratch/val/n04285008/images/n04285008_157.JPEG', 'scratch/val/n06596364/images/n06596364_404.JPEG', 'scratch/val/n04285008/images/n04285008_195.JPEG', 'scratch/val/n06596364/images/n06596364_174.JPEG', 'scratch/val/n09428293/images/n09428293_261.JPEG', 'scratch/val/n04597913/images/n04597913_294.JPEG']
rows:  4
cols:  4
len imgs:  16
=> saved grid_9.pdf, accuracy = 0.100, nsamples = 240
=> grid 9 labels: [4 4 3 4 4 6 6 6 6 6 4 6 4 6 8 5]
Namespace(activation='leaky-relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='scratch', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=1, num_samples_per_class=100, pretrained='saved/scratch/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=True, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): BatchNorm1d(4096, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/scratch/model_best.pth.tar'
=> loaded pre-trained model 'saved/scratch/model_best.pth.tar' (epoch 92)
=> using 1 GPUs.
Test: [  0/275]	Time  2.038 ( 2.038)
Test: [ 10/275]	Time  0.016 ( 0.203)
Test: [ 20/275]	Time  0.022 ( 0.122)
Test: [ 30/275]	Time  0.024 ( 0.093)
Test: [ 40/275]	Time  0.026 ( 0.079)
Test: [ 50/275]	Time  0.023 ( 0.070)
Test: [ 60/275]	Time  0.020 ( 0.063)
Test: [ 70/275]	Time  0.026 ( 0.059)
Test: [ 80/275]	Time  0.040 ( 0.056)
Test: [ 90/275]	Time  0.059 ( 0.053)
Test: [100/275]	Time  0.016 ( 0.050)
Test: [110/275]	Time  0.025 ( 0.049)
Test: [120/275]	Time  0.024 ( 0.048)
Test: [130/275]	Time  0.024 ( 0.046)
Test: [140/275]	Time  0.050 ( 0.045)
Test: [150/275]	Time  0.025 ( 0.044)
Test: [160/275]	Time  0.036 ( 0.043)
Test: [170/275]	Time  0.019 ( 0.043)
Test: [180/275]	Time  0.021 ( 0.042)
Test: [190/275]	Time  0.028 ( 0.042)
Test: [200/275]	Time  0.014 ( 0.041)
Test: [210/275]	Time  0.018 ( 0.041)
Test: [220/275]	Time  0.021 ( 0.041)
Test: [230/275]	Time  0.016 ( 0.040)
Test: [240/275]	Time  0.024 ( 0.040)
Test: [250/275]	Time  0.018 ( 0.039)
Test: [260/275]	Time  0.028 ( 0.039)
Test: [270/275]	Time  0.026 ( 0.039)
targets:  [0 0 0 ... 9 9 9]
preds:  [8 8 8 ... 8 8 4]
=> number of samples: 4400
=> number of unique assignments: 10
=> NMI: 35.310%
=> Adjusted NMI: 35.045%
=> Adjusted Rand-Index: 24.206%
=> Accuracy: 43.295%
label_i 6
preds [8 8 8 ... 8 8 4]
np.where(preds == label_i) (array([  72,  234,  440,  464,  572,  629,  720,  807,  832,  889,  891,
        899,  933,  935,  987, 1008, 1051, 1064, 1085, 1089, 1125, 1131,
       1138, 1152, 1167, 1174, 1176, 1215, 1254, 1306, 1382, 1392, 1428,
       1481, 1615, 1668, 1692, 1721, 1761, 1768, 1769, 1771, 1772, 1775,
       1777, 1778, 1779, 1789, 1810, 1820, 1821, 1822, 1823, 1826, 1849,
       1883, 1888, 1889, 1892, 1902, 1905, 1909, 1915, 1918, 1923, 1930,
       1932, 1947, 1960, 1967, 1968, 1972, 1976, 1993, 1994, 2006, 2022,
       2041, 2052, 2084, 2091, 2094, 2098, 2102, 2107, 2117, 2139, 2145,
       2153, 2158, 2159, 2161, 2164, 2190, 2192, 2194, 2199, 2284, 2338,
       2350, 2406, 2433, 2648, 2650, 2747, 2762, 2901, 2906, 2919, 2934,
       2994, 3042, 3520, 3522, 3523, 3524, 3525, 3526, 3527, 3528, 3529,
       3530, 3531, 3532, 3534, 3535, 3536, 3539, 3540, 3541, 3542, 3543,
       3544, 3545, 3547, 3548, 3549, 3550, 3551, 3552, 3553, 3554, 3555,
       3556, 3557, 3560, 3561, 3562, 3563, 3564, 3565, 3566, 3567, 3568,
       3569, 3570, 3571, 3572, 3573, 3574, 3575, 3576, 3577, 3578, 3579,
       3580, 3582, 3584, 3585, 3586, 3587, 3588, 3589, 3591, 3592, 3594,
       3596, 3597, 3599, 3600, 3601, 3603, 3604, 3605, 3606, 3607, 3610,
       3611, 3612, 3613, 3614, 3615, 3616, 3617, 3618, 3620, 3621, 3622,
       3623, 3624, 3625, 3626, 3627, 3629, 3630, 3631, 3632, 3635, 3636,
       3637, 3638, 3639, 3641, 3642, 3643, 3645, 3647, 3648, 3650, 3651,
       3652, 3654, 3655, 3657, 3658, 3659, 3661, 3662, 3663, 3664, 3665,
       3666, 3667, 3668, 3669, 3670, 3671, 3672, 3673, 3674, 3675, 3676,
       3678, 3680, 3683, 3684, 3685, 3687, 3688, 3690, 3691, 3692, 3693,
       3694, 3695, 3696, 3697, 3698, 3699, 3702, 3703, 3705, 3706, 3707,
       3709, 3710, 3711, 3712, 3713, 3716, 3717, 3718, 3719, 3720, 3721,
       3722, 3723, 3724, 3726, 3727, 3728, 3729, 3730, 3731, 3732, 3733,
       3734, 3735, 3737, 3738, 3739, 3740, 3741, 3742, 3743, 3744, 3745,
       3746, 3747, 3748, 3749, 3750, 3753, 3756, 3758, 3760, 3761, 3762,
       3763, 3764, 3766, 3767, 3768, 3770, 3771, 3772, 3773, 3774, 3775,
       3776, 3778, 3779, 3780, 3782, 3783, 3785, 3786, 3787, 3788, 3789,
       3790, 3791, 3792, 3793, 3794, 3795, 3796, 3797, 3798, 3800, 3801,
       3802, 3805, 3806, 3807, 3808, 3809, 3810, 3811, 3812, 3813, 3814,
       3815, 3816, 3817, 3818, 3819, 3820, 3821, 3822, 3823, 3824, 3825,
       3827, 3828, 3829, 3830, 3831, 3832, 3833, 3834, 3835, 3836, 3837,
       3838, 3839, 3840, 3841, 3842, 3843, 3844, 3845, 3846, 3847, 3848,
       3849, 3851, 3852, 3853, 3854, 3855, 3856, 3857, 3858, 3859, 3860,
       3861, 3862, 3863, 3864, 3865, 3866, 3867, 3868, 3869, 3870, 3871,
       3873, 3874, 3875, 3876, 3877, 3878, 3880, 3881, 3882, 3883, 3885,
       3886, 3888, 3889, 3890, 3892, 3893, 3894, 3895, 3896, 3897, 3898,
       3899, 3900, 3901, 3902, 3903, 3904, 3905, 3906, 3907, 3908, 3909,
       3910, 3911, 3912, 3913, 3914, 3916, 3917, 3918, 3919, 3922, 3925,
       3926, 3927, 3930, 3932, 3933, 3934, 3937, 3938, 3939, 3940, 3941,
       3942, 3943, 3944, 3945, 3946, 3947, 3948, 3949, 3950, 3951, 3952,
       3953, 3954, 3955, 3956, 3957, 3958, 3959, 3995, 4067, 4225, 4367]),)
sample_indices [  72  234  440  464  572  629  720  807  832  889  891  899  933  935
  987 1008 1051 1064 1085 1089 1125 1131 1138 1152 1167 1174 1176 1215
 1254 1306 1382 1392 1428 1481 1615 1668 1692 1721 1761 1768 1769 1771
 1772 1775 1777 1778 1779 1789 1810 1820 1821 1822 1823 1826 1849 1883
 1888 1889 1892 1902 1905 1909 1915 1918 1923 1930 1932 1947 1960 1967
 1968 1972 1976 1993 1994 2006 2022 2041 2052 2084 2091 2094 2098 2102
 2107 2117 2139 2145 2153 2158 2159 2161 2164 2190 2192 2194 2199 2284
 2338 2350 2406 2433 2648 2650 2747 2762 2901 2906 2919 2934 2994 3042
 3520 3522 3523 3524 3525 3526 3527 3528 3529 3530 3531 3532 3534 3535
 3536 3539 3540 3541 3542 3543 3544 3545 3547 3548 3549 3550 3551 3552
 3553 3554 3555 3556 3557 3560 3561 3562 3563 3564 3565 3566 3567 3568
 3569 3570 3571 3572 3573 3574 3575 3576 3577 3578 3579 3580 3582 3584
 3585 3586 3587 3588 3589 3591 3592 3594 3596 3597 3599 3600 3601 3603
 3604 3605 3606 3607 3610 3611 3612 3613 3614 3615 3616 3617 3618 3620
 3621 3622 3623 3624 3625 3626 3627 3629 3630 3631 3632 3635 3636 3637
 3638 3639 3641 3642 3643 3645 3647 3648 3650 3651 3652 3654 3655 3657
 3658 3659 3661 3662 3663 3664 3665 3666 3667 3668 3669 3670 3671 3672
 3673 3674 3675 3676 3678 3680 3683 3684 3685 3687 3688 3690 3691 3692
 3693 3694 3695 3696 3697 3698 3699 3702 3703 3705 3706 3707 3709 3710
 3711 3712 3713 3716 3717 3718 3719 3720 3721 3722 3723 3724 3726 3727
 3728 3729 3730 3731 3732 3733 3734 3735 3737 3738 3739 3740 3741 3742
 3743 3744 3745 3746 3747 3748 3749 3750 3753 3756 3758 3760 3761 3762
 3763 3764 3766 3767 3768 3770 3771 3772 3773 3774 3775 3776 3778 3779
 3780 3782 3783 3785 3786 3787 3788 3789 3790 3791 3792 3793 3794 3795
 3796 3797 3798 3800 3801 3802 3805 3806 3807 3808 3809 3810 3811 3812
 3813 3814 3815 3816 3817 3818 3819 3820 3821 3822 3823 3824 3825 3827
 3828 3829 3830 3831 3832 3833 3834 3835 3836 3837 3838 3839 3840 3841
 3842 3843 3844 3845 3846 3847 3848 3849 3851 3852 3853 3854 3855 3856
 3857 3858 3859 3860 3861 3862 3863 3864 3865 3866 3867 3868 3869 3870
 3871 3873 3874 3875 3876 3877 3878 3880 3881 3882 3883 3885 3886 3888
 3889 3890 3892 3893 3894 3895 3896 3897 3898 3899 3900 3901 3902 3903
 3904 3905 3906 3907 3908 3909 3910 3911 3912 3913 3914 3916 3917 3918
 3919 3922 3925 3926 3927 3930 3932 3933 3934 3937 3938 3939 3940 3941
 3942 3943 3944 3945 3946 3947 3948 3949 3950 3951 3952 3953 3954 3955
 3956 3957 3958 3959 3995 4067 4225 4367]
subset_sample_indices [1008 3534 3554 3707 3587 3555 3849 3902 3522 1131 3807 3527 3914 3787
 3691 3659 2006 2648 3766 3818 3952 2406 3684 1721 3856 3776 3651 3995
 3908 3811 3906  933 3855 3820 3882 3600 3773 3675 3763 3831  891 2052
 3913 3897 3547  234 3789 3676 3713 3615 3618 3631 3774 3544 3674 2199
 3671 3814 3815 3764 3939 3954 3775 3870 3621 3652 3767 2022 3874 3791
 3557 1849 3957 3666 3685 3748 3956 1888 3579 1905 3610 1972 3898  720
 2159 3873 3673 3729  807 3825  832 3886 3888 2906 3946 3612 3839 3709
 3670 3625]
subset_img_paths ['scratch/val/n02988304/images/n02988304_228.JPEG', 'scratch/val/n09428293/images/n09428293_114.JPEG', 'scratch/val/n09428293/images/n09428293_134.JPEG', 'scratch/val/n09428293/images/n09428293_287.JPEG', 'scratch/val/n09428293/images/n09428293_167.JPEG', 'scratch/val/n09428293/images/n09428293_135.JPEG', 'scratch/val/n09428293/images/n09428293_429.JPEG', 'scratch/val/n09428293/images/n09428293_482.JPEG', 'scratch/val/n09428293/images/n09428293_102.JPEG', 'scratch/val/n02988304/images/n02988304_351.JPEG', 'scratch/val/n09428293/images/n09428293_387.JPEG', 'scratch/val/n09428293/images/n09428293_107.JPEG', 'scratch/val/n09428293/images/n09428293_494.JPEG', 'scratch/val/n09428293/images/n09428293_367.JPEG', 'scratch/val/n09428293/images/n09428293_271.JPEG', 'scratch/val/n09428293/images/n09428293_239.JPEG', 'scratch/val/n04285008/images/n04285008_346.JPEG', 'scratch/val/n06596364/images/n06596364_108.JPEG', 'scratch/val/n09428293/images/n09428293_346.JPEG', 'scratch/val/n09428293/images/n09428293_398.JPEG', 'scratch/val/n09428293/images/n09428293_92.JPEG', 'scratch/val/n04597913/images/n04597913_306.JPEG', 'scratch/val/n09428293/images/n09428293_264.JPEG', 'scratch/val/n03977966/images/n03977966_61.JPEG', 'scratch/val/n09428293/images/n09428293_436.JPEG', 'scratch/val/n09428293/images/n09428293_356.JPEG', 'scratch/val/n09428293/images/n09428293_231.JPEG', 'scratch/val/n12267677/images/n12267677_135.JPEG', 'scratch/val/n09428293/images/n09428293_488.JPEG', 'scratch/val/n09428293/images/n09428293_391.JPEG', 'scratch/val/n09428293/images/n09428293_486.JPEG', 'scratch/val/n02988304/images/n02988304_153.JPEG', 'scratch/val/n09428293/images/n09428293_435.JPEG', 'scratch/val/n09428293/images/n09428293_400.JPEG', 'scratch/val/n09428293/images/n09428293_462.JPEG', 'scratch/val/n09428293/images/n09428293_180.JPEG', 'scratch/val/n09428293/images/n09428293_353.JPEG', 'scratch/val/n09428293/images/n09428293_255.JPEG', 'scratch/val/n09428293/images/n09428293_343.JPEG', 'scratch/val/n09428293/images/n09428293_411.JPEG', 'scratch/val/n02988304/images/n02988304_111.JPEG', 'scratch/val/n04285008/images/n04285008_392.JPEG', 'scratch/val/n09428293/images/n09428293_493.JPEG', 'scratch/val/n09428293/images/n09428293_477.JPEG', 'scratch/val/n09428293/images/n09428293_127.JPEG', 'scratch/val/n01443537/images/n01443537_334.JPEG', 'scratch/val/n09428293/images/n09428293_369.JPEG', 'scratch/val/n09428293/images/n09428293_256.JPEG', 'scratch/val/n09428293/images/n09428293_293.JPEG', 'scratch/val/n09428293/images/n09428293_195.JPEG', 'scratch/val/n09428293/images/n09428293_198.JPEG', 'scratch/val/n09428293/images/n09428293_211.JPEG', 'scratch/val/n09428293/images/n09428293_354.JPEG', 'scratch/val/n09428293/images/n09428293_124.JPEG', 'scratch/val/n09428293/images/n09428293_254.JPEG', 'scratch/val/n04285008/images/n04285008_99.JPEG', 'scratch/val/n09428293/images/n09428293_251.JPEG', 'scratch/val/n09428293/images/n09428293_394.JPEG', 'scratch/val/n09428293/images/n09428293_395.JPEG', 'scratch/val/n09428293/images/n09428293_344.JPEG', 'scratch/val/n09428293/images/n09428293_79.JPEG', 'scratch/val/n09428293/images/n09428293_94.JPEG', 'scratch/val/n09428293/images/n09428293_355.JPEG', 'scratch/val/n09428293/images/n09428293_450.JPEG', 'scratch/val/n09428293/images/n09428293_201.JPEG', 'scratch/val/n09428293/images/n09428293_232.JPEG', 'scratch/val/n09428293/images/n09428293_347.JPEG', 'scratch/val/n04285008/images/n04285008_362.JPEG', 'scratch/val/n09428293/images/n09428293_454.JPEG', 'scratch/val/n09428293/images/n09428293_371.JPEG', 'scratch/val/n09428293/images/n09428293_137.JPEG', 'scratch/val/n04285008/images/n04285008_189.JPEG', 'scratch/val/n09428293/images/n09428293_97.JPEG', 'scratch/val/n09428293/images/n09428293_246.JPEG', 'scratch/val/n09428293/images/n09428293_265.JPEG', 'scratch/val/n09428293/images/n09428293_328.JPEG', 'scratch/val/n09428293/images/n09428293_96.JPEG', 'scratch/val/n04285008/images/n04285008_228.JPEG', 'scratch/val/n09428293/images/n09428293_159.JPEG', 'scratch/val/n04285008/images/n04285008_245.JPEG', 'scratch/val/n09428293/images/n09428293_190.JPEG', 'scratch/val/n04285008/images/n04285008_312.JPEG', 'scratch/val/n09428293/images/n09428293_478.JPEG', 'scratch/val/n01983481/images/n01983481_380.JPEG', 'scratch/val/n04285008/images/n04285008_499.JPEG', 'scratch/val/n09428293/images/n09428293_453.JPEG', 'scratch/val/n09428293/images/n09428293_253.JPEG', 'scratch/val/n09428293/images/n09428293_309.JPEG', 'scratch/val/n01983481/images/n01983481_467.JPEG', 'scratch/val/n09428293/images/n09428293_405.JPEG', 'scratch/val/n01983481/images/n01983481_492.JPEG', 'scratch/val/n09428293/images/n09428293_466.JPEG', 'scratch/val/n09428293/images/n09428293_468.JPEG', 'scratch/val/n06596364/images/n06596364_366.JPEG', 'scratch/val/n09428293/images/n09428293_86.JPEG', 'scratch/val/n09428293/images/n09428293_192.JPEG', 'scratch/val/n09428293/images/n09428293_419.JPEG', 'scratch/val/n09428293/images/n09428293_289.JPEG', 'scratch/val/n09428293/images/n09428293_250.JPEG', 'scratch/val/n09428293/images/n09428293_205.JPEG']
rows:  10
cols:  10
len imgs:  100
=> saved grid_0.pdf, accuracy = 0.760, nsamples = 484
=> grid 0 labels: [2 8 8 8 8 8 8 8 8 2 8 8 8 8 8 8 4 6 8 8 8 5 8 3 8 8 8 9 8 8 8 2 8 8 8 8 8
 8 8 8 2 4 8 8 8 0 8 8 8 8 8 8 8 8 8 4 8 8 8 8 8 8 8 8 8 8 8 4 8 8 8 4 8 8
 8 8 8 4 8 4 8 4 8 1 4 8 8 8 1 8 1 8 8 6 8 8 8 8 8 8]
label_i 2
preds [8 8 8 ... 8 8 4]
np.where(preds == label_i) (array([ 896,  911,  930,  939,  957,  958,  967,  968,  983,  986, 1007,
       1013, 1052, 1058, 1059, 1061, 1066, 1081, 1091, 1108, 1114, 1122,
       1150, 1202, 1205, 1219, 1244, 1255, 1259, 1282, 1287, 1295, 1320,
       1321, 1323, 1324, 1325, 1326, 1328, 1329, 1330, 1336, 1337, 1338,
       1339, 1341, 1342, 1343, 1345, 1347, 1348, 1352, 1353, 1354, 1356,
       1357, 1358, 1359, 1360, 1363, 1367, 1368, 1371, 1374, 1376, 1378,
       1379, 1380, 1387, 1388, 1391, 1393, 1395, 1396, 1397, 1398, 1400,
       1401, 1403, 1404, 1405, 1407, 1408, 1412, 1415, 1416, 1417, 1418,
       1423, 1424, 1426, 1427, 1430, 1432, 1434, 1436, 1438, 1439, 1440,
       1441, 1447, 1448, 1449, 1450, 1451, 1453, 1454, 1455, 1456, 1457,
       1458, 1460, 1461, 1462, 1463, 1464, 1465, 1467, 1468, 1471, 1473,
       1474, 1475, 1477, 1478, 1479, 1483, 1484, 1485, 1486, 1489, 1490,
       1493, 1495, 1496, 1497, 1499, 1500, 1501, 1505, 1506, 1507, 1508,
       1510, 1514, 1516, 1517, 1518, 1521, 1522, 1527, 1528, 1530, 1532,
       1533, 1535, 1538, 1542, 1543, 1544, 1546, 1547, 1548, 1549, 1551,
       1553, 1555, 1556, 1558, 1559, 1560, 1561, 1562, 1566, 1567, 1568,
       1569, 1570, 1572, 1573, 1574, 1576, 1577, 1578, 1579, 1580, 1582,
       1585, 1586, 1587, 1588, 1589, 1591, 1592, 1593, 1594, 1595, 1596,
       1597, 1599, 1600, 1601, 1603, 1606, 1610, 1611, 1612, 1613, 1616,
       1617, 1620, 1622, 1623, 1626, 1630, 1632, 1633, 1634, 1635, 1637,
       1638, 1640, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1651, 1652,
       1655, 1656, 1657, 1661, 1662, 1663, 1665, 1666, 1667, 1670, 1671,
       1674, 1676, 1679, 1683, 1685, 1686, 1687, 1689, 1691, 1693, 1694,
       1696, 1697, 1701, 1702, 1703, 1704, 1708, 1709, 1711, 1712, 1714,
       1715, 1716, 1717, 1718, 1719, 1720, 1723, 1725, 1727, 1728, 1729,
       1730, 1731, 1736, 1737, 1739, 1741, 1742, 1747, 1748, 1750, 1753,
       1754, 1755, 1758, 1759, 1782, 1792, 1795, 1798, 1804, 1807, 1811,
       1815, 1839, 1841, 1864, 1866, 1871, 1872, 1880, 1882, 1890, 1893,
       1896, 1899, 1900, 1919, 1920, 1926, 1927, 1928, 1931, 1934, 1941,
       1944, 1956, 1961, 1963, 1964, 1970, 1971, 1974, 1984, 1987, 1989,
       1990, 1992, 1999, 2019, 2029, 2030, 2033, 2035, 2042, 2045, 2055,
       2057, 2058, 2060, 2061, 2068, 2070, 2075, 2080, 2082, 2089, 2106,
       2114, 2115, 2119, 2120, 2123, 2129, 2131, 2137, 2144, 2154, 2160,
       2167, 2169, 2171, 2176, 2182, 2183, 2185, 2229, 2402, 2432, 2525,
       2534, 2568, 2569, 2600, 2634, 2644, 2645, 2651, 2676, 2677, 2693,
       2707, 2722, 2729, 2731, 2737, 2782, 2788, 2796, 2801, 2803, 2829,
       2846, 2854, 2858, 2893, 2916, 2957, 2958, 2959, 2962, 2986, 3010,
       3058, 3163, 3380, 3505, 3521, 3546, 3583, 3598, 3803, 3887, 3931]),)
sample_indices [ 896  911  930  939  957  958  967  968  983  986 1007 1013 1052 1058
 1059 1061 1066 1081 1091 1108 1114 1122 1150 1202 1205 1219 1244 1255
 1259 1282 1287 1295 1320 1321 1323 1324 1325 1326 1328 1329 1330 1336
 1337 1338 1339 1341 1342 1343 1345 1347 1348 1352 1353 1354 1356 1357
 1358 1359 1360 1363 1367 1368 1371 1374 1376 1378 1379 1380 1387 1388
 1391 1393 1395 1396 1397 1398 1400 1401 1403 1404 1405 1407 1408 1412
 1415 1416 1417 1418 1423 1424 1426 1427 1430 1432 1434 1436 1438 1439
 1440 1441 1447 1448 1449 1450 1451 1453 1454 1455 1456 1457 1458 1460
 1461 1462 1463 1464 1465 1467 1468 1471 1473 1474 1475 1477 1478 1479
 1483 1484 1485 1486 1489 1490 1493 1495 1496 1497 1499 1500 1501 1505
 1506 1507 1508 1510 1514 1516 1517 1518 1521 1522 1527 1528 1530 1532
 1533 1535 1538 1542 1543 1544 1546 1547 1548 1549 1551 1553 1555 1556
 1558 1559 1560 1561 1562 1566 1567 1568 1569 1570 1572 1573 1574 1576
 1577 1578 1579 1580 1582 1585 1586 1587 1588 1589 1591 1592 1593 1594
 1595 1596 1597 1599 1600 1601 1603 1606 1610 1611 1612 1613 1616 1617
 1620 1622 1623 1626 1630 1632 1633 1634 1635 1637 1638 1640 1642 1643
 1644 1645 1646 1647 1648 1651 1652 1655 1656 1657 1661 1662 1663 1665
 1666 1667 1670 1671 1674 1676 1679 1683 1685 1686 1687 1689 1691 1693
 1694 1696 1697 1701 1702 1703 1704 1708 1709 1711 1712 1714 1715 1716
 1717 1718 1719 1720 1723 1725 1727 1728 1729 1730 1731 1736 1737 1739
 1741 1742 1747 1748 1750 1753 1754 1755 1758 1759 1782 1792 1795 1798
 1804 1807 1811 1815 1839 1841 1864 1866 1871 1872 1880 1882 1890 1893
 1896 1899 1900 1919 1920 1926 1927 1928 1931 1934 1941 1944 1956 1961
 1963 1964 1970 1971 1974 1984 1987 1989 1990 1992 1999 2019 2029 2030
 2033 2035 2042 2045 2055 2057 2058 2060 2061 2068 2070 2075 2080 2082
 2089 2106 2114 2115 2119 2120 2123 2129 2131 2137 2144 2154 2160 2167
 2169 2171 2176 2182 2183 2185 2229 2402 2432 2525 2534 2568 2569 2600
 2634 2644 2645 2651 2676 2677 2693 2707 2722 2729 2731 2737 2782 2788
 2796 2801 2803 2829 2846 2854 2858 2893 2916 2957 2958 2959 2962 2986
 3010 3058 3163 3380 3505 3521 3546 3583 3598 3803 3887 3931]
subset_sample_indices [2144 1560 1644 2131 1899 1896 1527 1007 1122 1711 2082 1363 3010 1597
 2114 1400 2569 1551 1052 1586 2070 1326 2693 1356 1516 1755 1599 1697
 2634 1900 2568 1667 1426 1061 3505 2045 1871 1507 1397 1689 2154 1403
 1747 2182 1866 1532 1637 2731 1367 1989 3931  967  911 1920 1514 1727
 1725 1493 1662 1754 1588 1378 1573 1478 1496 1582 1347 1353 1244 1341
 1497  957 1638 2402 1475 1652  958 1569 1919 1447  968 1150 1387 1987
 1114 1890 1508 1059 1750 1449 1719 1462 1398 1376 1357 1691 2089 1685
 1533 1683]
subset_img_paths ['scratch/val/n04285008/images/n04285008_484.JPEG', 'scratch/val/n03977966/images/n03977966_340.JPEG', 'scratch/val/n03977966/images/n03977966_424.JPEG', 'scratch/val/n04285008/images/n04285008_471.JPEG', 'scratch/val/n04285008/images/n04285008_239.JPEG', 'scratch/val/n04285008/images/n04285008_236.JPEG', 'scratch/val/n03977966/images/n03977966_307.JPEG', 'scratch/val/n02988304/images/n02988304_227.JPEG', 'scratch/val/n02988304/images/n02988304_342.JPEG', 'scratch/val/n03977966/images/n03977966_491.JPEG', 'scratch/val/n04285008/images/n04285008_422.JPEG', 'scratch/val/n03977966/images/n03977966_143.JPEG', 'scratch/val/n06596364/images/n06596364_470.JPEG', 'scratch/val/n03977966/images/n03977966_377.JPEG', 'scratch/val/n04285008/images/n04285008_454.JPEG', 'scratch/val/n03977966/images/n03977966_180.JPEG', 'scratch/val/n04597913/images/n04597913_469.JPEG', 'scratch/val/n03977966/images/n03977966_331.JPEG', 'scratch/val/n02988304/images/n02988304_272.JPEG', 'scratch/val/n03977966/images/n03977966_366.JPEG', 'scratch/val/n04285008/images/n04285008_410.JPEG', 'scratch/val/n03977966/images/n03977966_106.JPEG', 'scratch/val/n06596364/images/n06596364_153.JPEG', 'scratch/val/n03977966/images/n03977966_136.JPEG', 'scratch/val/n03977966/images/n03977966_296.JPEG', 'scratch/val/n03977966/images/n03977966_95.JPEG', 'scratch/val/n03977966/images/n03977966_379.JPEG', 'scratch/val/n03977966/images/n03977966_477.JPEG', 'scratch/val/n04597913/images/n04597913_94.JPEG', 'scratch/val/n04285008/images/n04285008_240.JPEG', 'scratch/val/n04597913/images/n04597913_468.JPEG', 'scratch/val/n03977966/images/n03977966_447.JPEG', 'scratch/val/n03977966/images/n03977966_206.JPEG', 'scratch/val/n02988304/images/n02988304_281.JPEG', 'scratch/val/n07920052/images/n07920052_85.JPEG', 'scratch/val/n04285008/images/n04285008_385.JPEG', 'scratch/val/n04285008/images/n04285008_211.JPEG', 'scratch/val/n03977966/images/n03977966_287.JPEG', 'scratch/val/n03977966/images/n03977966_177.JPEG', 'scratch/val/n03977966/images/n03977966_469.JPEG', 'scratch/val/n04285008/images/n04285008_494.JPEG', 'scratch/val/n03977966/images/n03977966_183.JPEG', 'scratch/val/n03977966/images/n03977966_87.JPEG', 'scratch/val/n04285008/images/n04285008_82.JPEG', 'scratch/val/n04285008/images/n04285008_206.JPEG', 'scratch/val/n03977966/images/n03977966_312.JPEG', 'scratch/val/n03977966/images/n03977966_417.JPEG', 'scratch/val/n06596364/images/n06596364_191.JPEG', 'scratch/val/n03977966/images/n03977966_147.JPEG', 'scratch/val/n04285008/images/n04285008_329.JPEG', 'scratch/val/n09428293/images/n09428293_71.JPEG', 'scratch/val/n02988304/images/n02988304_187.JPEG', 'scratch/val/n02988304/images/n02988304_131.JPEG', 'scratch/val/n04285008/images/n04285008_260.JPEG', 'scratch/val/n03977966/images/n03977966_294.JPEG', 'scratch/val/n03977966/images/n03977966_67.JPEG', 'scratch/val/n03977966/images/n03977966_65.JPEG', 'scratch/val/n03977966/images/n03977966_273.JPEG', 'scratch/val/n03977966/images/n03977966_442.JPEG', 'scratch/val/n03977966/images/n03977966_94.JPEG', 'scratch/val/n03977966/images/n03977966_368.JPEG', 'scratch/val/n03977966/images/n03977966_158.JPEG', 'scratch/val/n03977966/images/n03977966_353.JPEG', 'scratch/val/n03977966/images/n03977966_258.JPEG', 'scratch/val/n03977966/images/n03977966_276.JPEG', 'scratch/val/n03977966/images/n03977966_362.JPEG', 'scratch/val/n03977966/images/n03977966_127.JPEG', 'scratch/val/n03977966/images/n03977966_133.JPEG', 'scratch/val/n02988304/images/n02988304_464.JPEG', 'scratch/val/n03977966/images/n03977966_121.JPEG', 'scratch/val/n03977966/images/n03977966_277.JPEG', 'scratch/val/n02988304/images/n02988304_177.JPEG', 'scratch/val/n03977966/images/n03977966_418.JPEG', 'scratch/val/n04597913/images/n04597913_302.JPEG', 'scratch/val/n03977966/images/n03977966_255.JPEG', 'scratch/val/n03977966/images/n03977966_432.JPEG', 'scratch/val/n02988304/images/n02988304_178.JPEG', 'scratch/val/n03977966/images/n03977966_349.JPEG', 'scratch/val/n04285008/images/n04285008_259.JPEG', 'scratch/val/n03977966/images/n03977966_227.JPEG', 'scratch/val/n02988304/images/n02988304_188.JPEG', 'scratch/val/n02988304/images/n02988304_370.JPEG', 'scratch/val/n03977966/images/n03977966_167.JPEG', 'scratch/val/n04285008/images/n04285008_327.JPEG', 'scratch/val/n02988304/images/n02988304_334.JPEG', 'scratch/val/n04285008/images/n04285008_230.JPEG', 'scratch/val/n03977966/images/n03977966_288.JPEG', 'scratch/val/n02988304/images/n02988304_279.JPEG', 'scratch/val/n03977966/images/n03977966_90.JPEG', 'scratch/val/n03977966/images/n03977966_229.JPEG', 'scratch/val/n03977966/images/n03977966_499.JPEG', 'scratch/val/n03977966/images/n03977966_242.JPEG', 'scratch/val/n03977966/images/n03977966_178.JPEG', 'scratch/val/n03977966/images/n03977966_156.JPEG', 'scratch/val/n03977966/images/n03977966_137.JPEG', 'scratch/val/n03977966/images/n03977966_471.JPEG', 'scratch/val/n04285008/images/n04285008_429.JPEG', 'scratch/val/n03977966/images/n03977966_465.JPEG', 'scratch/val/n03977966/images/n03977966_313.JPEG', 'scratch/val/n03977966/images/n03977966_463.JPEG']
rows:  10
cols:  10
len imgs:  100
=> saved grid_1.pdf, accuracy = 0.617, nsamples = 418
=> grid 1 labels: [4 3 3 4 4 4 3 2 2 3 4 3 6 3 4 3 5 3 2 3 4 3 6 3 3 3 3 3 5 4 5 3 3 2 7 4 4
 3 3 3 4 3 3 4 4 3 3 6 3 4 8 2 2 4 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2 3 3 2 3 5
 3 3 2 3 4 3 2 2 3 4 2 4 3 2 3 3 3 3 3 3 3 3 4 3 3 3]
label_i 0
preds [8 8 8 ... 8 8 4]
np.where(preds == label_i) (array([  87,  108,  136,  138,  154,  178,  196,  213,  256,  272,  280,
        282,  298,  318,  328,  341,  398,  406,  444,  449,  453,  457,
        459,  465,  475,  495,  530,  540,  541,  551,  553,  557,  561,
        565,  568,  575,  576,  593,  597,  608,  610,  612,  616,  617,
        624,  626,  636,  640,  656,  664,  670,  675,  676,  681,  688,
        692,  693,  695,  703,  719,  723,  727,  735,  739,  745,  753,
        754,  769,  777,  792,  793,  797,  802,  814,  822,  829,  831,
        843,  851,  862,  874,  877,  895, 1133, 1207, 1211, 1283, 1383,
       1422, 1511, 1575, 1649, 1809, 1827, 1832, 1969, 2027, 2059, 2073,
       2074, 2148, 2179, 2203, 2214, 2243, 2265, 2272, 2281, 2291, 2293,
       2312, 2317, 2323, 2324, 2332, 2344, 2345, 2356, 2358, 2380, 2383,
       2392, 2400, 2430, 2438, 2440, 2451, 2457, 2474, 2490, 2510, 2524,
       2531, 2536, 2551, 2553, 2556, 2559, 2563, 2603, 2604, 2613, 2622,
       2625, 2628, 2635, 2640, 2643, 2646, 2649, 2652, 2653, 2654, 2656,
       2657, 2658, 2661, 2662, 2663, 2664, 2665, 2666, 2667, 2669, 2670,
       2671, 2674, 2675, 2678, 2679, 2680, 2681, 2682, 2683, 2684, 2686,
       2688, 2689, 2691, 2692, 2694, 2695, 2696, 2699, 2700, 2701, 2702,
       2703, 2705, 2708, 2709, 2713, 2716, 2718, 2719, 2720, 2721, 2723,
       2724, 2725, 2726, 2727, 2730, 2732, 2733, 2735, 2738, 2739, 2740,
       2741, 2742, 2743, 2744, 2745, 2748, 2750, 2751, 2752, 2753, 2754,
       2755, 2756, 2757, 2758, 2759, 2763, 2764, 2765, 2767, 2772, 2773,
       2775, 2776, 2777, 2778, 2779, 2781, 2783, 2785, 2787, 2793, 2797,
       2798, 2800, 2804, 2805, 2806, 2807, 2808, 2810, 2811, 2814, 2815,
       2817, 2818, 2819, 2820, 2821, 2822, 2824, 2825, 2826, 2827, 2833,
       2835, 2836, 2839, 2840, 2841, 2843, 2844, 2847, 2851, 2853, 2855,
       2856, 2857, 2860, 2863, 2864, 2865, 2866, 2870, 2871, 2872, 2873,
       2874, 2876, 2879, 2880, 2881, 2883, 2884, 2885, 2886, 2887, 2888,
       2889, 2890, 2891, 2892, 2896, 2899, 2900, 2902, 2903, 2905, 2907,
       2908, 2910, 2914, 2915, 2917, 2921, 2922, 2923, 2924, 2925, 2926,
       2927, 2930, 2931, 2932, 2933, 2935, 2936, 2938, 2939, 2940, 2941,
       2942, 2943, 2945, 2946, 2947, 2948, 2950, 2951, 2952, 2953, 2954,
       2955, 2956, 2960, 2961, 2965, 2966, 2967, 2970, 2972, 2973, 2974,
       2977, 2978, 2979, 2980, 2982, 2984, 2985, 2987, 2988, 2989, 2990,
       2991, 2992, 2995, 2997, 3001, 3002, 3003, 3005, 3006, 3009, 3014,
       3015, 3018, 3023, 3024, 3026, 3030, 3031, 3032, 3035, 3036, 3038,
       3040, 3041, 3043, 3044, 3046, 3047, 3048, 3050, 3052, 3053, 3055,
       3056, 3057, 3059, 3060, 3061, 3062, 3064, 3065, 3066, 3069, 3070,
       3071, 3073, 3074, 3076, 3077, 3078, 3217, 3235, 3283, 3324, 3496,
       3533, 3593, 3595, 3633, 3634, 3644, 3653, 3660, 3701, 3751, 3754,
       3755, 3777, 3884, 3915, 3924, 3963, 3964, 3967, 3968, 3970, 3972,
       3975, 3982, 3990, 3992, 3993, 3994, 4002, 4005, 4008, 4015, 4017,
       4021, 4026, 4029, 4032, 4039, 4045, 4046, 4050, 4052, 4055, 4059,
       4060, 4061, 4082, 4085, 4093, 4097, 4100, 4101, 4109, 4111, 4112,
       4124, 4127, 4132, 4134, 4135, 4137, 4140, 4144, 4148, 4151, 4153,
       4160, 4162, 4169, 4172, 4173, 4175, 4179, 4181, 4192, 4194, 4199,
       4200, 4201, 4205, 4209, 4214, 4215, 4216, 4217, 4218, 4219, 4223,
       4228, 4229, 4230, 4231, 4237, 4238, 4240, 4241, 4245, 4246, 4262,
       4264, 4265, 4269, 4270, 4271, 4274, 4275, 4278, 4286, 4288, 4291,
       4297, 4298, 4307, 4309, 4310, 4319, 4320, 4322, 4324, 4325, 4334,
       4336, 4338, 4342, 4344, 4350, 4353, 4354, 4355, 4364, 4368, 4369,
       4373, 4375, 4386, 4393, 4395, 4396]),)
sample_indices [  87  108  136  138  154  178  196  213  256  272  280  282  298  318
  328  341  398  406  444  449  453  457  459  465  475  495  530  540
  541  551  553  557  561  565  568  575  576  593  597  608  610  612
  616  617  624  626  636  640  656  664  670  675  676  681  688  692
  693  695  703  719  723  727  735  739  745  753  754  769  777  792
  793  797  802  814  822  829  831  843  851  862  874  877  895 1133
 1207 1211 1283 1383 1422 1511 1575 1649 1809 1827 1832 1969 2027 2059
 2073 2074 2148 2179 2203 2214 2243 2265 2272 2281 2291 2293 2312 2317
 2323 2324 2332 2344 2345 2356 2358 2380 2383 2392 2400 2430 2438 2440
 2451 2457 2474 2490 2510 2524 2531 2536 2551 2553 2556 2559 2563 2603
 2604 2613 2622 2625 2628 2635 2640 2643 2646 2649 2652 2653 2654 2656
 2657 2658 2661 2662 2663 2664 2665 2666 2667 2669 2670 2671 2674 2675
 2678 2679 2680 2681 2682 2683 2684 2686 2688 2689 2691 2692 2694 2695
 2696 2699 2700 2701 2702 2703 2705 2708 2709 2713 2716 2718 2719 2720
 2721 2723 2724 2725 2726 2727 2730 2732 2733 2735 2738 2739 2740 2741
 2742 2743 2744 2745 2748 2750 2751 2752 2753 2754 2755 2756 2757 2758
 2759 2763 2764 2765 2767 2772 2773 2775 2776 2777 2778 2779 2781 2783
 2785 2787 2793 2797 2798 2800 2804 2805 2806 2807 2808 2810 2811 2814
 2815 2817 2818 2819 2820 2821 2822 2824 2825 2826 2827 2833 2835 2836
 2839 2840 2841 2843 2844 2847 2851 2853 2855 2856 2857 2860 2863 2864
 2865 2866 2870 2871 2872 2873 2874 2876 2879 2880 2881 2883 2884 2885
 2886 2887 2888 2889 2890 2891 2892 2896 2899 2900 2902 2903 2905 2907
 2908 2910 2914 2915 2917 2921 2922 2923 2924 2925 2926 2927 2930 2931
 2932 2933 2935 2936 2938 2939 2940 2941 2942 2943 2945 2946 2947 2948
 2950 2951 2952 2953 2954 2955 2956 2960 2961 2965 2966 2967 2970 2972
 2973 2974 2977 2978 2979 2980 2982 2984 2985 2987 2988 2989 2990 2991
 2992 2995 2997 3001 3002 3003 3005 3006 3009 3014 3015 3018 3023 3024
 3026 3030 3031 3032 3035 3036 3038 3040 3041 3043 3044 3046 3047 3048
 3050 3052 3053 3055 3056 3057 3059 3060 3061 3062 3064 3065 3066 3069
 3070 3071 3073 3074 3076 3077 3078 3217 3235 3283 3324 3496 3533 3593
 3595 3633 3634 3644 3653 3660 3701 3751 3754 3755 3777 3884 3915 3924
 3963 3964 3967 3968 3970 3972 3975 3982 3990 3992 3993 3994 4002 4005
 4008 4015 4017 4021 4026 4029 4032 4039 4045 4046 4050 4052 4055 4059
 4060 4061 4082 4085 4093 4097 4100 4101 4109 4111 4112 4124 4127 4132
 4134 4135 4137 4140 4144 4148 4151 4153 4160 4162 4169 4172 4173 4175
 4179 4181 4192 4194 4199 4200 4201 4205 4209 4214 4215 4216 4217 4218
 4219 4223 4228 4229 4230 4231 4237 4238 4240 4241 4245 4246 4262 4264
 4265 4269 4270 4271 4274 4275 4278 4286 4288 4291 4297 4298 4307 4309
 4310 4319 4320 4322 4324 4325 4334 4336 4338 4342 4344 4350 4353 4354
 4355 4364 4368 4369 4373 4375 4386 4393 4395 4396]
subset_sample_indices [1211 2531 2027 2281 2604  593 3060 1575 4262 2779 2682 4029  754 4205
 4201 2952 4396 2967 2686 2905 2826 3982 3968 2870 2358 2974 4319 2622
 2671 2984 2656 2807 3915 2664 2851 4137 2946 2810  341 2781 3967 3031
  406 2915 2871 2658 2990  626 2985 2775 4097 3994 3975 4218 3061 2772
 4021 4045 4002 4109 2773 3009 4160 1511 3217  636 2214 4231  457 2291
 2662 3070 2900  797  829 4264  851 2800 4151 2992 2735 2805 2926 2719
 2777 4274 2763 4144 2324 4153 2203 2667 4364 2885 4230 2945 2989 2745
  108 2880]
subset_img_paths ['scratch/val/n02988304/images/n02988304_431.JPEG', 'scratch/val/n04597913/images/n04597913_431.JPEG', 'scratch/val/n04285008/images/n04285008_367.JPEG', 'scratch/val/n04597913/images/n04597913_181.JPEG', 'scratch/val/n04597913/images/n04597913_64.JPEG', 'scratch/val/n01983481/images/n01983481_253.JPEG', 'scratch/val/n06596364/images/n06596364_80.JPEG', 'scratch/val/n03977966/images/n03977966_355.JPEG', 'scratch/val/n12267677/images/n12267677_402.JPEG', 'scratch/val/n06596364/images/n06596364_239.JPEG', 'scratch/val/n06596364/images/n06596364_142.JPEG', 'scratch/val/n12267677/images/n12267677_169.JPEG', 'scratch/val/n01983481/images/n01983481_414.JPEG', 'scratch/val/n12267677/images/n12267677_345.JPEG', 'scratch/val/n12267677/images/n12267677_341.JPEG', 'scratch/val/n06596364/images/n06596364_412.JPEG', 'scratch/val/n12267677/images/n12267677_96.JPEG', 'scratch/val/n06596364/images/n06596364_427.JPEG', 'scratch/val/n06596364/images/n06596364_146.JPEG', 'scratch/val/n06596364/images/n06596364_365.JPEG', 'scratch/val/n06596364/images/n06596364_286.JPEG', 'scratch/val/n12267677/images/n12267677_122.JPEG', 'scratch/val/n12267677/images/n12267677_108.JPEG', 'scratch/val/n06596364/images/n06596364_330.JPEG', 'scratch/val/n04597913/images/n04597913_258.JPEG', 'scratch/val/n06596364/images/n06596364_434.JPEG', 'scratch/val/n12267677/images/n12267677_459.JPEG', 'scratch/val/n04597913/images/n04597913_82.JPEG', 'scratch/val/n06596364/images/n06596364_131.JPEG', 'scratch/val/n06596364/images/n06596364_444.JPEG', 'scratch/val/n06596364/images/n06596364_116.JPEG', 'scratch/val/n06596364/images/n06596364_267.JPEG', 'scratch/val/n09428293/images/n09428293_495.JPEG', 'scratch/val/n06596364/images/n06596364_124.JPEG', 'scratch/val/n06596364/images/n06596364_311.JPEG', 'scratch/val/n12267677/images/n12267677_277.JPEG', 'scratch/val/n06596364/images/n06596364_406.JPEG', 'scratch/val/n06596364/images/n06596364_270.JPEG', 'scratch/val/n01443537/images/n01443537_441.JPEG', 'scratch/val/n06596364/images/n06596364_241.JPEG', 'scratch/val/n12267677/images/n12267677_107.JPEG', 'scratch/val/n06596364/images/n06596364_491.JPEG', 'scratch/val/n01443537/images/n01443537_66.JPEG', 'scratch/val/n06596364/images/n06596364_375.JPEG', 'scratch/val/n06596364/images/n06596364_331.JPEG', 'scratch/val/n06596364/images/n06596364_118.JPEG', 'scratch/val/n06596364/images/n06596364_450.JPEG', 'scratch/val/n01983481/images/n01983481_286.JPEG', 'scratch/val/n06596364/images/n06596364_445.JPEG', 'scratch/val/n06596364/images/n06596364_235.JPEG', 'scratch/val/n12267677/images/n12267677_237.JPEG', 'scratch/val/n12267677/images/n12267677_134.JPEG', 'scratch/val/n12267677/images/n12267677_115.JPEG', 'scratch/val/n12267677/images/n12267677_358.JPEG', 'scratch/val/n06596364/images/n06596364_81.JPEG', 'scratch/val/n06596364/images/n06596364_232.JPEG', 'scratch/val/n12267677/images/n12267677_161.JPEG', 'scratch/val/n12267677/images/n12267677_185.JPEG', 'scratch/val/n12267677/images/n12267677_142.JPEG', 'scratch/val/n12267677/images/n12267677_249.JPEG', 'scratch/val/n06596364/images/n06596364_233.JPEG', 'scratch/val/n06596364/images/n06596364_469.JPEG', 'scratch/val/n12267677/images/n12267677_300.JPEG', 'scratch/val/n03977966/images/n03977966_291.JPEG', 'scratch/val/n07920052/images/n07920052_237.JPEG', 'scratch/val/n01983481/images/n01983481_296.JPEG', 'scratch/val/n04597913/images/n04597913_114.JPEG', 'scratch/val/n12267677/images/n12267677_371.JPEG', 'scratch/val/n01983481/images/n01983481_117.JPEG', 'scratch/val/n04597913/images/n04597913_191.JPEG', 'scratch/val/n06596364/images/n06596364_122.JPEG', 'scratch/val/n06596364/images/n06596364_90.JPEG', 'scratch/val/n06596364/images/n06596364_360.JPEG', 'scratch/val/n01983481/images/n01983481_457.JPEG', 'scratch/val/n01983481/images/n01983481_489.JPEG', 'scratch/val/n12267677/images/n12267677_404.JPEG', 'scratch/val/n01983481/images/n01983481_71.JPEG', 'scratch/val/n06596364/images/n06596364_260.JPEG', 'scratch/val/n12267677/images/n12267677_291.JPEG', 'scratch/val/n06596364/images/n06596364_452.JPEG', 'scratch/val/n06596364/images/n06596364_195.JPEG', 'scratch/val/n06596364/images/n06596364_265.JPEG', 'scratch/val/n06596364/images/n06596364_386.JPEG', 'scratch/val/n06596364/images/n06596364_179.JPEG', 'scratch/val/n06596364/images/n06596364_237.JPEG', 'scratch/val/n12267677/images/n12267677_414.JPEG', 'scratch/val/n06596364/images/n06596364_223.JPEG', 'scratch/val/n12267677/images/n12267677_284.JPEG', 'scratch/val/n04597913/images/n04597913_224.JPEG', 'scratch/val/n12267677/images/n12267677_293.JPEG', 'scratch/val/n04597913/images/n04597913_103.JPEG', 'scratch/val/n06596364/images/n06596364_127.JPEG', 'scratch/val/n12267677/images/n12267677_64.JPEG', 'scratch/val/n06596364/images/n06596364_345.JPEG', 'scratch/val/n12267677/images/n12267677_370.JPEG', 'scratch/val/n06596364/images/n06596364_405.JPEG', 'scratch/val/n06596364/images/n06596364_449.JPEG', 'scratch/val/n06596364/images/n06596364_205.JPEG', 'scratch/val/n01443537/images/n01443537_208.JPEG', 'scratch/val/n06596364/images/n06596364_340.JPEG']
rows:  10
cols:  10
len imgs:  100
=> saved grid_2.pdf, accuracy = 0.480, nsamples = 556
=> grid 2 labels: [2 5 4 5 5 1 6 3 9 6 6 9 1 9 9 6 9 6 6 6 6 9 9 6 5 6 9 5 6 6 6 6 8 6 6 9 6
 6 0 6 9 6 0 6 6 6 6 1 6 6 9 9 9 9 6 6 9 9 9 9 6 6 9 3 7 1 5 9 1 5 6 6 6 1
 1 9 1 6 9 6 6 6 6 6 6 9 6 9 5 9 5 6 9 6 9 6 6 6 0 6]
label_i 7
preds [8 8 8 ... 8 8 4]
np.where(preds == label_i) (array([   6,    9,   15,   16,   19,   20,   22,   29,   35,   37,   40,
         46,   63,   65,   67,   68,   74,   77,   79,   84,   85,   92,
         95,   98,  118,  122,  133,  135,  150,  157,  159,  169,  173,
        180,  183,  185,  187,  190,  194,  198,  203,  204,  206,  210,
        219,  223,  226,  227,  228,  241,  245,  249,  251,  253,  270,
        274,  281,  283,  289,  290,  293,  301,  303,  305,  310,  313,
        323,  329,  343,  347,  349,  356,  358,  366,  367,  368,  369,
        371,  381,  389,  390,  392,  393,  408,  411,  415,  422,  423,
        425,  432,  439,  534,  648,  667,  752,  820,  847,  882,  888,
        915,  941,  952,  978,  992, 1011, 1019, 1030, 1053, 1054, 1070,
       1116, 1126, 1151, 1164, 1170, 1171, 1187, 1194, 1301, 1302, 1304,
       1310, 1786, 2081, 2083, 2204, 2210, 2213, 2216, 2220, 2224, 2236,
       2237, 2242, 2251, 2252, 2258, 2271, 2273, 2278, 2279, 2282, 2285,
       2292, 2297, 2298, 2300, 2302, 2305, 2307, 2316, 2318, 2348, 2351,
       2355, 2362, 2364, 2373, 2381, 2385, 2389, 2393, 2397, 2405, 2409,
       2410, 2416, 2418, 2427, 2428, 2431, 2435, 2437, 2442, 2445, 2454,
       2455, 2456, 2459, 2478, 2483, 2494, 2501, 2504, 2505, 2509, 2514,
       2520, 2527, 2529, 2543, 2547, 2548, 2552, 2555, 2567, 2572, 2575,
       2580, 2581, 2588, 2589, 2590, 2596, 2605, 2610, 2614, 2615, 2629,
       2633, 2636, 2639, 3080, 3082, 3083, 3084, 3085, 3087, 3089, 3090,
       3092, 3093, 3096, 3097, 3099, 3100, 3104, 3106, 3108, 3109, 3110,
       3113, 3118, 3119, 3120, 3121, 3122, 3123, 3125, 3126, 3127, 3128,
       3129, 3131, 3132, 3134, 3135, 3136, 3138, 3139, 3140, 3141, 3143,
       3144, 3148, 3150, 3151, 3159, 3161, 3166, 3167, 3168, 3169, 3172,
       3173, 3176, 3181, 3182, 3183, 3188, 3189, 3194, 3195, 3196, 3199,
       3200, 3201, 3202, 3203, 3204, 3205, 3207, 3208, 3209, 3210, 3212,
       3215, 3216, 3218, 3222, 3223, 3228, 3229, 3233, 3234, 3239, 3240,
       3241, 3244, 3245, 3247, 3248, 3249, 3252, 3255, 3256, 3257, 3258,
       3259, 3261, 3263, 3264, 3266, 3268, 3269, 3270, 3272, 3274, 3275,
       3278, 3280, 3285, 3290, 3291, 3292, 3293, 3294, 3295, 3296, 3297,
       3298, 3300, 3301, 3302, 3304, 3310, 3313, 3316, 3317, 3320, 3323,
       3325, 3327, 3329, 3330, 3331, 3337, 3338, 3340, 3343, 3344, 3345,
       3346, 3347, 3349, 3350, 3351, 3354, 3356, 3358, 3361, 3366, 3367,
       3368, 3372, 3373, 3374, 3376, 3377, 3378, 3381, 3382, 3384, 3387,
       3388, 3389, 3391, 3392, 3393, 3394, 3397, 3398, 3399, 3401, 3403,
       3407, 3408, 3409, 3410, 3413, 3414, 3415, 3416, 3418, 3422, 3428,
       3430, 3432, 3433, 3434, 3435, 3438, 3445, 3446, 3448, 3449, 3450,
       3453, 3454, 3456, 3459, 3460, 3463, 3465, 3466, 3468, 3469, 3470,
       3472, 3473, 3476, 3477, 3478, 3480, 3482, 3483, 3485, 3486, 3491,
       3492, 3493, 3494, 3498, 3499, 3502, 3504, 3507, 3508, 3509, 3510,
       3511, 3512, 3513, 3515, 3516, 3517, 3538, 3559, 3628, 3656, 3679,
       3700, 3704, 3708, 3714, 3715, 3757, 3781, 3799, 3923, 3928, 3936,
       3978, 3980, 3983, 4007, 4009, 4043, 4056, 4058, 4069, 4081, 4086,
       4099, 4110, 4119, 4139, 4163, 4186, 4202, 4242, 4243, 4252, 4296,
       4302, 4323, 4337, 4341, 4347, 4374, 4389, 4392]),)
sample_indices [   6    9   15   16   19   20   22   29   35   37   40   46   63   65
   67   68   74   77   79   84   85   92   95   98  118  122  133  135
  150  157  159  169  173  180  183  185  187  190  194  198  203  204
  206  210  219  223  226  227  228  241  245  249  251  253  270  274
  281  283  289  290  293  301  303  305  310  313  323  329  343  347
  349  356  358  366  367  368  369  371  381  389  390  392  393  408
  411  415  422  423  425  432  439  534  648  667  752  820  847  882
  888  915  941  952  978  992 1011 1019 1030 1053 1054 1070 1116 1126
 1151 1164 1170 1171 1187 1194 1301 1302 1304 1310 1786 2081 2083 2204
 2210 2213 2216 2220 2224 2236 2237 2242 2251 2252 2258 2271 2273 2278
 2279 2282 2285 2292 2297 2298 2300 2302 2305 2307 2316 2318 2348 2351
 2355 2362 2364 2373 2381 2385 2389 2393 2397 2405 2409 2410 2416 2418
 2427 2428 2431 2435 2437 2442 2445 2454 2455 2456 2459 2478 2483 2494
 2501 2504 2505 2509 2514 2520 2527 2529 2543 2547 2548 2552 2555 2567
 2572 2575 2580 2581 2588 2589 2590 2596 2605 2610 2614 2615 2629 2633
 2636 2639 3080 3082 3083 3084 3085 3087 3089 3090 3092 3093 3096 3097
 3099 3100 3104 3106 3108 3109 3110 3113 3118 3119 3120 3121 3122 3123
 3125 3126 3127 3128 3129 3131 3132 3134 3135 3136 3138 3139 3140 3141
 3143 3144 3148 3150 3151 3159 3161 3166 3167 3168 3169 3172 3173 3176
 3181 3182 3183 3188 3189 3194 3195 3196 3199 3200 3201 3202 3203 3204
 3205 3207 3208 3209 3210 3212 3215 3216 3218 3222 3223 3228 3229 3233
 3234 3239 3240 3241 3244 3245 3247 3248 3249 3252 3255 3256 3257 3258
 3259 3261 3263 3264 3266 3268 3269 3270 3272 3274 3275 3278 3280 3285
 3290 3291 3292 3293 3294 3295 3296 3297 3298 3300 3301 3302 3304 3310
 3313 3316 3317 3320 3323 3325 3327 3329 3330 3331 3337 3338 3340 3343
 3344 3345 3346 3347 3349 3350 3351 3354 3356 3358 3361 3366 3367 3368
 3372 3373 3374 3376 3377 3378 3381 3382 3384 3387 3388 3389 3391 3392
 3393 3394 3397 3398 3399 3401 3403 3407 3408 3409 3410 3413 3414 3415
 3416 3418 3422 3428 3430 3432 3433 3434 3435 3438 3445 3446 3448 3449
 3450 3453 3454 3456 3459 3460 3463 3465 3466 3468 3469 3470 3472 3473
 3476 3477 3478 3480 3482 3483 3485 3486 3491 3492 3493 3494 3498 3499
 3502 3504 3507 3508 3509 3510 3511 3512 3513 3515 3516 3517 3538 3559
 3628 3656 3679 3700 3704 3708 3714 3715 3757 3781 3799 3923 3928 3936
 3978 3980 3983 4007 4009 4043 4056 4058 4069 4081 4086 4099 4110 4119
 4139 4163 4186 4202 4242 4243 4252 4296 4302 4323 4337 4341 4347 4374
 4389 4392]
subset_sample_indices [3367  847 3280 2297   68 3983 2282 3714   92 3502 3472 3272 2385  941
 2251 3482 3168 3140 3119 3290 3148 2588 2547 3510 3465 2614 1301 3109
  368 3259 3463  190 3361 2435 2454 3349 3248   63 4341 3268  226 3082
 4009 3126 3143 3398 3936 1164 3233 2355   40 3453 4099 2555  439 3241
 3366    9 3538 3144 2636  978  369 2610 3301 3270  381 3249 3700 3432
 3928 3388 2629 3139 3416 3468 3409 3172  270 3110 1053 2271 3399 3373
  281 3469  293 3113 3207  356 2362   22 3450 2478 3435 3100 2572   29
 3195   35]
subset_img_paths ['scratch/val/n07920052/images/n07920052_387.JPEG', 'scratch/val/n01983481/images/n01983481_67.JPEG', 'scratch/val/n07920052/images/n07920052_300.JPEG', 'scratch/val/n04597913/images/n04597913_197.JPEG', 'scratch/val/n01443537/images/n01443537_168.JPEG', 'scratch/val/n12267677/images/n12267677_123.JPEG', 'scratch/val/n04597913/images/n04597913_182.JPEG', 'scratch/val/n09428293/images/n09428293_294.JPEG', 'scratch/val/n01443537/images/n01443537_192.JPEG', 'scratch/val/n07920052/images/n07920052_82.JPEG', 'scratch/val/n07920052/images/n07920052_492.JPEG', 'scratch/val/n07920052/images/n07920052_292.JPEG', 'scratch/val/n04597913/images/n04597913_285.JPEG', 'scratch/val/n02988304/images/n02988304_161.JPEG', 'scratch/val/n04597913/images/n04597913_151.JPEG', 'scratch/val/n07920052/images/n07920052_62.JPEG', 'scratch/val/n07920052/images/n07920052_188.JPEG', 'scratch/val/n07920052/images/n07920052_160.JPEG', 'scratch/val/n07920052/images/n07920052_139.JPEG', 'scratch/val/n07920052/images/n07920052_310.JPEG', 'scratch/val/n07920052/images/n07920052_168.JPEG', 'scratch/val/n04597913/images/n04597913_488.JPEG', 'scratch/val/n04597913/images/n04597913_447.JPEG', 'scratch/val/n07920052/images/n07920052_90.JPEG', 'scratch/val/n07920052/images/n07920052_485.JPEG', 'scratch/val/n04597913/images/n04597913_74.JPEG', 'scratch/val/n02988304/images/n02988304_81.JPEG', 'scratch/val/n07920052/images/n07920052_129.JPEG', 'scratch/val/n01443537/images/n01443537_468.JPEG', 'scratch/val/n07920052/images/n07920052_279.JPEG', 'scratch/val/n07920052/images/n07920052_483.JPEG', 'scratch/val/n01443537/images/n01443537_290.JPEG', 'scratch/val/n07920052/images/n07920052_381.JPEG', 'scratch/val/n04597913/images/n04597913_335.JPEG', 'scratch/val/n04597913/images/n04597913_354.JPEG', 'scratch/val/n07920052/images/n07920052_369.JPEG', 'scratch/val/n07920052/images/n07920052_268.JPEG', 'scratch/val/n01443537/images/n01443537_163.JPEG', 'scratch/val/n12267677/images/n12267677_481.JPEG', 'scratch/val/n07920052/images/n07920052_288.JPEG', 'scratch/val/n01443537/images/n01443537_326.JPEG', 'scratch/val/n07920052/images/n07920052_102.JPEG', 'scratch/val/n12267677/images/n12267677_149.JPEG', 'scratch/val/n07920052/images/n07920052_146.JPEG', 'scratch/val/n07920052/images/n07920052_163.JPEG', 'scratch/val/n07920052/images/n07920052_418.JPEG', 'scratch/val/n09428293/images/n09428293_76.JPEG', 'scratch/val/n02988304/images/n02988304_384.JPEG', 'scratch/val/n07920052/images/n07920052_253.JPEG', 'scratch/val/n04597913/images/n04597913_255.JPEG', 'scratch/val/n01443537/images/n01443537_140.JPEG', 'scratch/val/n07920052/images/n07920052_473.JPEG', 'scratch/val/n12267677/images/n12267677_239.JPEG', 'scratch/val/n04597913/images/n04597913_455.JPEG', 'scratch/val/n01443537/images/n01443537_99.JPEG', 'scratch/val/n07920052/images/n07920052_261.JPEG', 'scratch/val/n07920052/images/n07920052_386.JPEG', 'scratch/val/n01443537/images/n01443537_109.JPEG', 'scratch/val/n09428293/images/n09428293_118.JPEG', 'scratch/val/n07920052/images/n07920052_164.JPEG', 'scratch/val/n04597913/images/n04597913_96.JPEG', 'scratch/val/n02988304/images/n02988304_198.JPEG', 'scratch/val/n01443537/images/n01443537_469.JPEG', 'scratch/val/n04597913/images/n04597913_70.JPEG', 'scratch/val/n07920052/images/n07920052_321.JPEG', 'scratch/val/n07920052/images/n07920052_290.JPEG', 'scratch/val/n01443537/images/n01443537_481.JPEG', 'scratch/val/n07920052/images/n07920052_269.JPEG', 'scratch/val/n09428293/images/n09428293_280.JPEG', 'scratch/val/n07920052/images/n07920052_452.JPEG', 'scratch/val/n09428293/images/n09428293_68.JPEG', 'scratch/val/n07920052/images/n07920052_408.JPEG', 'scratch/val/n04597913/images/n04597913_89.JPEG', 'scratch/val/n07920052/images/n07920052_159.JPEG', 'scratch/val/n07920052/images/n07920052_436.JPEG', 'scratch/val/n07920052/images/n07920052_488.JPEG', 'scratch/val/n07920052/images/n07920052_429.JPEG', 'scratch/val/n07920052/images/n07920052_192.JPEG', 'scratch/val/n01443537/images/n01443537_370.JPEG', 'scratch/val/n07920052/images/n07920052_130.JPEG', 'scratch/val/n02988304/images/n02988304_273.JPEG', 'scratch/val/n04597913/images/n04597913_171.JPEG', 'scratch/val/n07920052/images/n07920052_419.JPEG', 'scratch/val/n07920052/images/n07920052_393.JPEG', 'scratch/val/n01443537/images/n01443537_381.JPEG', 'scratch/val/n07920052/images/n07920052_489.JPEG', 'scratch/val/n01443537/images/n01443537_393.JPEG', 'scratch/val/n07920052/images/n07920052_133.JPEG', 'scratch/val/n07920052/images/n07920052_227.JPEG', 'scratch/val/n01443537/images/n01443537_456.JPEG', 'scratch/val/n04597913/images/n04597913_262.JPEG', 'scratch/val/n01443537/images/n01443537_122.JPEG', 'scratch/val/n07920052/images/n07920052_470.JPEG', 'scratch/val/n04597913/images/n04597913_378.JPEG', 'scratch/val/n07920052/images/n07920052_455.JPEG', 'scratch/val/n07920052/images/n07920052_120.JPEG', 'scratch/val/n04597913/images/n04597913_472.JPEG', 'scratch/val/n01443537/images/n01443537_129.JPEG', 'scratch/val/n07920052/images/n07920052_215.JPEG', 'scratch/val/n01443537/images/n01443537_135.JPEG']
rows:  10
cols:  10
len imgs:  100
=> saved grid_3.pdf, accuracy = 0.476, nsamples = 492
=> grid 3 labels: [7 1 7 5 0 9 5 8 0 7 7 7 5 2 5 7 7 7 7 7 7 5 5 7 7 5 2 7 0 7 7 0 7 5 5 7 7
 0 9 7 0 7 9 7 7 7 8 2 7 5 0 7 9 5 0 7 7 0 8 7 5 2 0 5 7 7 0 7 8 7 8 7 5 7
 7 7 7 7 0 7 2 5 7 7 0 7 0 7 7 0 5 0 7 5 7 7 5 0 7 0]
label_i 1
preds [8 8 8 ... 8 8 4]
np.where(preds == label_i) (array([  55,  853,  883,  886,  892,  893,  894,  901,  902,  904,  906,
        908,  910,  912,  913,  914,  918,  920,  921,  922,  923,  926,
        931,  934,  940,  942,  943,  945,  946,  948,  951,  953,  955,
        956,  959,  962,  964,  969,  971,  972,  973,  975,  976,  977,
        980,  981,  982,  984,  985,  988,  989,  990,  991,  993,  994,
        995,  997, 1002, 1003, 1004, 1009, 1014, 1018, 1020, 1025, 1027,
       1031, 1033, 1035, 1037, 1038, 1041, 1042, 1043, 1047, 1048, 1049,
       1050, 1055, 1056, 1057, 1062, 1063, 1069, 1072, 1074, 1080, 1082,
       1083, 1084, 1090, 1092, 1093, 1097, 1098, 1099, 1100, 1102, 1104,
       1105, 1111, 1118, 1120, 1121, 1123, 1124, 1128, 1129, 1130, 1134,
       1136, 1137, 1139, 1140, 1142, 1143, 1149, 1154, 1156, 1157, 1160,
       1162, 1163, 1165, 1166, 1168, 1169, 1172, 1173, 1175, 1179, 1180,
       1181, 1182, 1183, 1184, 1186, 1188, 1190, 1191, 1193, 1195, 1200,
       1201, 1212, 1213, 1221, 1223, 1224, 1225, 1226, 1229, 1230, 1231,
       1233, 1235, 1236, 1237, 1238, 1240, 1241, 1242, 1245, 1246, 1247,
       1248, 1249, 1250, 1251, 1252, 1256, 1258, 1260, 1261, 1262, 1263,
       1265, 1266, 1267, 1268, 1269, 1271, 1272, 1274, 1275, 1277, 1279,
       1281, 1284, 1286, 1289, 1290, 1291, 1294, 1296, 1297, 1299, 1300,
       1303, 1305, 1311, 1312, 1313, 1314, 1317, 1318, 1319, 1322, 1327,
       1331, 1332, 1333, 1334, 1335, 1340, 1344, 1346, 1349, 1350, 1351,
       1364, 1366, 1370, 1373, 1375, 1381, 1384, 1385, 1386, 1390, 1399,
       1406, 1410, 1411, 1413, 1419, 1421, 1425, 1429, 1433, 1437, 1442,
       1443, 1446, 1452, 1459, 1466, 1469, 1470, 1480, 1482, 1488, 1491,
       1492, 1498, 1502, 1503, 1509, 1512, 1515, 1519, 1523, 1524, 1529,
       1534, 1536, 1537, 1539, 1540, 1541, 1545, 1554, 1557, 1563, 1565,
       1571, 1581, 1583, 1584, 1598, 1602, 1604, 1605, 1607, 1609, 1618,
       1619, 1621, 1628, 1629, 1631, 1636, 1639, 1650, 1653, 1658, 1659,
       1660, 1669, 1672, 1675, 1681, 1682, 1688, 1690, 1695, 1698, 1699,
       1700, 1705, 1713, 1726, 1732, 1733, 1734, 1735, 1738, 1740, 1743,
       1744, 1746, 1749, 1751, 1760, 1762, 1764, 1767, 1770, 1773, 1774,
       1776, 1783, 1784, 1787, 1791, 1799, 1803, 1806, 1812, 1814, 1828,
       1829, 1830, 1833, 1835, 1847, 1850, 1852, 1853, 1867, 1869, 1873,
       1877, 1886, 1891, 1897, 1898, 1901, 1908, 1911, 1917, 1921, 1938,
       1942, 1948, 1950, 1951, 1954, 1955, 1959, 1966, 1973, 1981, 1982,
       1986, 1997, 2002, 2003, 2004, 2005, 2007, 2008, 2010, 2011, 2013,
       2017, 2018, 2024, 2025, 2026, 2031, 2034, 2036, 2038, 2040, 2044,
       2047, 2048, 2049, 2050, 2056, 2064, 2065, 2071, 2072, 2077, 2079,
       2090, 2095, 2105, 2109, 2110, 2118, 2122, 2124, 2126, 2133, 2135,
       2140, 2143, 2152, 2156, 2166, 2170, 2172, 2173, 2174, 2186, 2189,
       2191, 2195, 2196, 2234, 2257, 2374, 2388, 2795, 2878, 2929, 3011,
       3079, 3155, 3184, 3211, 3246, 3307, 3348, 3363, 3395, 3537, 3558,
       3590, 3602, 3609, 3649, 3677, 3682, 3725, 3736, 3765, 3804, 3826,
       3850, 3872, 3879, 4210]),)
sample_indices [  55  853  883  886  892  893  894  901  902  904  906  908  910  912
  913  914  918  920  921  922  923  926  931  934  940  942  943  945
  946  948  951  953  955  956  959  962  964  969  971  972  973  975
  976  977  980  981  982  984  985  988  989  990  991  993  994  995
  997 1002 1003 1004 1009 1014 1018 1020 1025 1027 1031 1033 1035 1037
 1038 1041 1042 1043 1047 1048 1049 1050 1055 1056 1057 1062 1063 1069
 1072 1074 1080 1082 1083 1084 1090 1092 1093 1097 1098 1099 1100 1102
 1104 1105 1111 1118 1120 1121 1123 1124 1128 1129 1130 1134 1136 1137
 1139 1140 1142 1143 1149 1154 1156 1157 1160 1162 1163 1165 1166 1168
 1169 1172 1173 1175 1179 1180 1181 1182 1183 1184 1186 1188 1190 1191
 1193 1195 1200 1201 1212 1213 1221 1223 1224 1225 1226 1229 1230 1231
 1233 1235 1236 1237 1238 1240 1241 1242 1245 1246 1247 1248 1249 1250
 1251 1252 1256 1258 1260 1261 1262 1263 1265 1266 1267 1268 1269 1271
 1272 1274 1275 1277 1279 1281 1284 1286 1289 1290 1291 1294 1296 1297
 1299 1300 1303 1305 1311 1312 1313 1314 1317 1318 1319 1322 1327 1331
 1332 1333 1334 1335 1340 1344 1346 1349 1350 1351 1364 1366 1370 1373
 1375 1381 1384 1385 1386 1390 1399 1406 1410 1411 1413 1419 1421 1425
 1429 1433 1437 1442 1443 1446 1452 1459 1466 1469 1470 1480 1482 1488
 1491 1492 1498 1502 1503 1509 1512 1515 1519 1523 1524 1529 1534 1536
 1537 1539 1540 1541 1545 1554 1557 1563 1565 1571 1581 1583 1584 1598
 1602 1604 1605 1607 1609 1618 1619 1621 1628 1629 1631 1636 1639 1650
 1653 1658 1659 1660 1669 1672 1675 1681 1682 1688 1690 1695 1698 1699
 1700 1705 1713 1726 1732 1733 1734 1735 1738 1740 1743 1744 1746 1749
 1751 1760 1762 1764 1767 1770 1773 1774 1776 1783 1784 1787 1791 1799
 1803 1806 1812 1814 1828 1829 1830 1833 1835 1847 1850 1852 1853 1867
 1869 1873 1877 1886 1891 1897 1898 1901 1908 1911 1917 1921 1938 1942
 1948 1950 1951 1954 1955 1959 1966 1973 1981 1982 1986 1997 2002 2003
 2004 2005 2007 2008 2010 2011 2013 2017 2018 2024 2025 2026 2031 2034
 2036 2038 2040 2044 2047 2048 2049 2050 2056 2064 2065 2071 2072 2077
 2079 2090 2095 2105 2109 2110 2118 2122 2124 2126 2133 2135 2140 2143
 2152 2156 2166 2170 2172 2173 2174 2186 2189 2191 2195 2196 2234 2257
 2374 2388 2795 2878 2929 3011 3079 3155 3184 3211 3246 3307 3348 3363
 3395 3537 3558 3590 3602 3609 3649 3677 3682 3725 3736 3765 3804 3826
 3850 3872 3879 4210]
subset_sample_indices [2388 1828 1183 1090 2004  926 1437 1584 1492 1406 3850 1783 2195 1120
 2005 2189 1319 1111  910 1156 1166 1390 1743 1258 4210 1660 1852 1279
  906  914 1375 1399 1256 1738  853 1381 1100 1268 2038 1698 1607 1557
 1247 1303 1442 1835 1502 1366  994  969 2133 1491 1850 1950 1466 1055
 1049 1311 1705 1688 1853 1235 3184  997 1735 1009  894 1041 1163 2031
 1048 1140 1129 2795 2003 1181 1364 1233 1263 1195 2152 1732 1873 1004
 1951 2172 3590 1027 1581 1605 1847  995 1241 1184 1997 2110 2174 1318
 2044 1212]
subset_img_paths ['scratch/val/n04597913/images/n04597913_288.JPEG', 'scratch/val/n04285008/images/n04285008_168.JPEG', 'scratch/val/n02988304/images/n02988304_403.JPEG', 'scratch/val/n02988304/images/n02988304_310.JPEG', 'scratch/val/n04285008/images/n04285008_344.JPEG', 'scratch/val/n02988304/images/n02988304_146.JPEG', 'scratch/val/n03977966/images/n03977966_217.JPEG', 'scratch/val/n03977966/images/n03977966_364.JPEG', 'scratch/val/n03977966/images/n03977966_272.JPEG', 'scratch/val/n03977966/images/n03977966_186.JPEG', 'scratch/val/n09428293/images/n09428293_430.JPEG', 'scratch/val/n04285008/images/n04285008_123.JPEG', 'scratch/val/n04285008/images/n04285008_95.JPEG', 'scratch/val/n02988304/images/n02988304_340.JPEG', 'scratch/val/n04285008/images/n04285008_345.JPEG', 'scratch/val/n04285008/images/n04285008_89.JPEG', 'scratch/val/n02988304/images/n02988304_99.JPEG', 'scratch/val/n02988304/images/n02988304_331.JPEG', 'scratch/val/n02988304/images/n02988304_130.JPEG', 'scratch/val/n02988304/images/n02988304_376.JPEG', 'scratch/val/n02988304/images/n02988304_386.JPEG', 'scratch/val/n03977966/images/n03977966_170.JPEG', 'scratch/val/n03977966/images/n03977966_83.JPEG', 'scratch/val/n02988304/images/n02988304_478.JPEG', 'scratch/val/n12267677/images/n12267677_350.JPEG', 'scratch/val/n03977966/images/n03977966_440.JPEG', 'scratch/val/n04285008/images/n04285008_192.JPEG', 'scratch/val/n02988304/images/n02988304_499.JPEG', 'scratch/val/n02988304/images/n02988304_126.JPEG', 'scratch/val/n02988304/images/n02988304_134.JPEG', 'scratch/val/n03977966/images/n03977966_155.JPEG', 'scratch/val/n03977966/images/n03977966_179.JPEG', 'scratch/val/n02988304/images/n02988304_476.JPEG', 'scratch/val/n03977966/images/n03977966_78.JPEG', 'scratch/val/n01983481/images/n01983481_73.JPEG', 'scratch/val/n03977966/images/n03977966_161.JPEG', 'scratch/val/n02988304/images/n02988304_320.JPEG', 'scratch/val/n02988304/images/n02988304_488.JPEG', 'scratch/val/n04285008/images/n04285008_378.JPEG', 'scratch/val/n03977966/images/n03977966_478.JPEG', 'scratch/val/n03977966/images/n03977966_387.JPEG', 'scratch/val/n03977966/images/n03977966_337.JPEG', 'scratch/val/n02988304/images/n02988304_467.JPEG', 'scratch/val/n02988304/images/n02988304_83.JPEG', 'scratch/val/n03977966/images/n03977966_222.JPEG', 'scratch/val/n04285008/images/n04285008_175.JPEG', 'scratch/val/n03977966/images/n03977966_282.JPEG', 'scratch/val/n03977966/images/n03977966_146.JPEG', 'scratch/val/n02988304/images/n02988304_214.JPEG', 'scratch/val/n02988304/images/n02988304_189.JPEG', 'scratch/val/n04285008/images/n04285008_473.JPEG', 'scratch/val/n03977966/images/n03977966_271.JPEG', 'scratch/val/n04285008/images/n04285008_190.JPEG', 'scratch/val/n04285008/images/n04285008_290.JPEG', 'scratch/val/n03977966/images/n03977966_246.JPEG', 'scratch/val/n02988304/images/n02988304_275.JPEG', 'scratch/val/n02988304/images/n02988304_269.JPEG', 'scratch/val/n02988304/images/n02988304_91.JPEG', 'scratch/val/n03977966/images/n03977966_485.JPEG', 'scratch/val/n03977966/images/n03977966_468.JPEG', 'scratch/val/n04285008/images/n04285008_193.JPEG', 'scratch/val/n02988304/images/n02988304_455.JPEG', 'scratch/val/n07920052/images/n07920052_204.JPEG', 'scratch/val/n02988304/images/n02988304_217.JPEG', 'scratch/val/n03977966/images/n03977966_75.JPEG', 'scratch/val/n02988304/images/n02988304_229.JPEG', 'scratch/val/n02988304/images/n02988304_114.JPEG', 'scratch/val/n02988304/images/n02988304_261.JPEG', 'scratch/val/n02988304/images/n02988304_383.JPEG', 'scratch/val/n04285008/images/n04285008_371.JPEG', 'scratch/val/n02988304/images/n02988304_268.JPEG', 'scratch/val/n02988304/images/n02988304_360.JPEG', 'scratch/val/n02988304/images/n02988304_349.JPEG', 'scratch/val/n06596364/images/n06596364_255.JPEG', 'scratch/val/n04285008/images/n04285008_343.JPEG', 'scratch/val/n02988304/images/n02988304_401.JPEG', 'scratch/val/n03977966/images/n03977966_144.JPEG', 'scratch/val/n02988304/images/n02988304_453.JPEG', 'scratch/val/n02988304/images/n02988304_483.JPEG', 'scratch/val/n02988304/images/n02988304_415.JPEG', 'scratch/val/n04285008/images/n04285008_492.JPEG', 'scratch/val/n03977966/images/n03977966_72.JPEG', 'scratch/val/n04285008/images/n04285008_213.JPEG', 'scratch/val/n02988304/images/n02988304_224.JPEG', 'scratch/val/n04285008/images/n04285008_291.JPEG', 'scratch/val/n04285008/images/n04285008_72.JPEG', 'scratch/val/n09428293/images/n09428293_170.JPEG', 'scratch/val/n02988304/images/n02988304_247.JPEG', 'scratch/val/n03977966/images/n03977966_361.JPEG', 'scratch/val/n03977966/images/n03977966_385.JPEG', 'scratch/val/n04285008/images/n04285008_187.JPEG', 'scratch/val/n02988304/images/n02988304_215.JPEG', 'scratch/val/n02988304/images/n02988304_461.JPEG', 'scratch/val/n02988304/images/n02988304_404.JPEG', 'scratch/val/n04285008/images/n04285008_337.JPEG', 'scratch/val/n04285008/images/n04285008_450.JPEG', 'scratch/val/n04285008/images/n04285008_74.JPEG', 'scratch/val/n02988304/images/n02988304_98.JPEG', 'scratch/val/n04285008/images/n04285008_384.JPEG', 'scratch/val/n02988304/images/n02988304_432.JPEG']
rows:  10
cols:  10
len imgs:  100
=> saved grid_4.pdf, accuracy = 0.440, nsamples = 466
=> grid 4 labels: [5 4 2 2 4 2 3 3 3 3 8 4 4 2 4 4 2 2 2 2 2 3 3 2 9 3 4 2 2 2 3 3 2 3 1 3 2
 2 4 3 3 3 2 2 3 4 3 3 2 2 4 3 4 4 3 2 2 2 3 3 4 2 7 2 3 2 2 2 2 4 2 2 2 6
 4 2 3 2 2 2 4 3 4 2 4 4 8 2 3 3 4 2 2 2 4 4 4 2 4 2]
label_i 3
preds [8 8 8 ... 8 8 4]
np.where(preds == label_i) (array([  18,   43,  151,  294,  370,  450,  466,  481,  487,  546,  582,
        604,  635,  712,  726,  762,  766,  789,  794,  880,  885,  890,
        905,  919,  937,  965,  970,  979, 1006, 1010, 1024, 1026, 1032,
       1039, 1065, 1067, 1086, 1087, 1094, 1109, 1127, 1178, 1203, 1208,
       1209, 1218, 1227, 1228, 1239, 1253, 1273, 1278, 1293, 1355, 1362,
       1372, 1414, 1444, 1472, 1476, 1513, 1520, 1564, 1590, 1614, 1722,
       1766, 1780, 1781, 1785, 1788, 1790, 1796, 1801, 1818, 1819, 1824,
       1838, 1842, 1844, 1845, 1848, 1854, 1857, 1858, 1860, 1861, 1865,
       1868, 1870, 1875, 1884, 1885, 1903, 1904, 1912, 1913, 1914, 1924,
       1925, 1929, 1933, 1939, 1940, 1945, 1952, 1957, 1962, 1975, 1978,
       1980, 1985, 1996, 1998, 2001, 2009, 2012, 2014, 2015, 2016, 2028,
       2032, 2053, 2066, 2086, 2087, 2088, 2093, 2099, 2108, 2128, 2132,
       2134, 2138, 2155, 2162, 2168, 2175, 2177, 2178, 2181, 2184, 2239,
       2341, 2346, 2382, 2408, 2413, 2414, 2417, 2425, 2497, 2513, 2519,
       2532, 2609, 2612, 2794, 2849, 2869, 2996, 3019, 3267, 3417, 3421,
       3440, 3581, 3920, 4147, 4150, 4189, 4335, 4345]),)
sample_indices [  18   43  151  294  370  450  466  481  487  546  582  604  635  712
  726  762  766  789  794  880  885  890  905  919  937  965  970  979
 1006 1010 1024 1026 1032 1039 1065 1067 1086 1087 1094 1109 1127 1178
 1203 1208 1209 1218 1227 1228 1239 1253 1273 1278 1293 1355 1362 1372
 1414 1444 1472 1476 1513 1520 1564 1590 1614 1722 1766 1780 1781 1785
 1788 1790 1796 1801 1818 1819 1824 1838 1842 1844 1845 1848 1854 1857
 1858 1860 1861 1865 1868 1870 1875 1884 1885 1903 1904 1912 1913 1914
 1924 1925 1929 1933 1939 1940 1945 1952 1957 1962 1975 1978 1980 1985
 1996 1998 2001 2009 2012 2014 2015 2016 2028 2032 2053 2066 2086 2087
 2088 2093 2099 2108 2128 2132 2134 2138 2155 2162 2168 2175 2177 2178
 2181 2184 2239 2341 2346 2382 2408 2413 2414 2417 2425 2497 2513 2519
 2532 2609 2612 2794 2849 2869 2996 3019 3267 3417 3421 3440 3581 3920
 4147 4150 4189 4335 4345]
subset_sample_indices [1362 2408 1590 1372 2087 1929  481 2609 1945 1870 2177 2341  450 1914
 3417 1903 1039  794 1520 1278 1766 1087  370 2015 1513 1978 2066 2178
 1980 2869  970 1414 2088 1218  487 1209 1845 1962 1924 4150  937 1024
 1885 1985 2532  880 2134 1818 2184  766 2053 4189 1127 2519  905 1957
 2612 2086 1790 2849 1996  979 2425 2132 1913 2012 1861 1564  151 1476
 1904 1912 1208  582 1857 1801 3581 1975 1933 1875 2175 3440 1273 1998
 2794 1614 2016 2032 1785 1253 1239 1860  712 2128  919 2382  885  762
 1842 1293]
subset_img_paths ['scratch/val/n03977966/images/n03977966_142.JPEG', 'scratch/val/n04597913/images/n04597913_308.JPEG', 'scratch/val/n03977966/images/n03977966_370.JPEG', 'scratch/val/n03977966/images/n03977966_152.JPEG', 'scratch/val/n04285008/images/n04285008_427.JPEG', 'scratch/val/n04285008/images/n04285008_269.JPEG', 'scratch/val/n01983481/images/n01983481_141.JPEG', 'scratch/val/n04597913/images/n04597913_69.JPEG', 'scratch/val/n04285008/images/n04285008_285.JPEG', 'scratch/val/n04285008/images/n04285008_210.JPEG', 'scratch/val/n04285008/images/n04285008_77.JPEG', 'scratch/val/n04597913/images/n04597913_241.JPEG', 'scratch/val/n01983481/images/n01983481_110.JPEG', 'scratch/val/n04285008/images/n04285008_254.JPEG', 'scratch/val/n07920052/images/n07920052_437.JPEG', 'scratch/val/n04285008/images/n04285008_243.JPEG', 'scratch/val/n02988304/images/n02988304_259.JPEG', 'scratch/val/n01983481/images/n01983481_454.JPEG', 'scratch/val/n03977966/images/n03977966_300.JPEG', 'scratch/val/n02988304/images/n02988304_498.JPEG', 'scratch/val/n04285008/images/n04285008_106.JPEG', 'scratch/val/n02988304/images/n02988304_307.JPEG', 'scratch/val/n01443537/images/n01443537_470.JPEG', 'scratch/val/n04285008/images/n04285008_355.JPEG', 'scratch/val/n03977966/images/n03977966_293.JPEG', 'scratch/val/n04285008/images/n04285008_318.JPEG', 'scratch/val/n04285008/images/n04285008_406.JPEG', 'scratch/val/n04285008/images/n04285008_78.JPEG', 'scratch/val/n04285008/images/n04285008_320.JPEG', 'scratch/val/n06596364/images/n06596364_329.JPEG', 'scratch/val/n02988304/images/n02988304_190.JPEG', 'scratch/val/n03977966/images/n03977966_194.JPEG', 'scratch/val/n04285008/images/n04285008_428.JPEG', 'scratch/val/n02988304/images/n02988304_438.JPEG', 'scratch/val/n01983481/images/n01983481_147.JPEG', 'scratch/val/n02988304/images/n02988304_429.JPEG', 'scratch/val/n04285008/images/n04285008_185.JPEG', 'scratch/val/n04285008/images/n04285008_302.JPEG', 'scratch/val/n04285008/images/n04285008_264.JPEG', 'scratch/val/n12267677/images/n12267677_290.JPEG', 'scratch/val/n02988304/images/n02988304_157.JPEG', 'scratch/val/n02988304/images/n02988304_244.JPEG', 'scratch/val/n04285008/images/n04285008_225.JPEG', 'scratch/val/n04285008/images/n04285008_325.JPEG', 'scratch/val/n04597913/images/n04597913_432.JPEG', 'scratch/val/n02988304/images/n02988304_100.JPEG', 'scratch/val/n04285008/images/n04285008_474.JPEG', 'scratch/val/n04285008/images/n04285008_158.JPEG', 'scratch/val/n04285008/images/n04285008_84.JPEG', 'scratch/val/n01983481/images/n01983481_426.JPEG', 'scratch/val/n04285008/images/n04285008_393.JPEG', 'scratch/val/n12267677/images/n12267677_329.JPEG', 'scratch/val/n02988304/images/n02988304_347.JPEG', 'scratch/val/n04597913/images/n04597913_419.JPEG', 'scratch/val/n02988304/images/n02988304_125.JPEG', 'scratch/val/n04285008/images/n04285008_297.JPEG', 'scratch/val/n04597913/images/n04597913_72.JPEG', 'scratch/val/n04285008/images/n04285008_426.JPEG', 'scratch/val/n04285008/images/n04285008_130.JPEG', 'scratch/val/n06596364/images/n06596364_309.JPEG', 'scratch/val/n04285008/images/n04285008_336.JPEG', 'scratch/val/n02988304/images/n02988304_199.JPEG', 'scratch/val/n04597913/images/n04597913_325.JPEG', 'scratch/val/n04285008/images/n04285008_472.JPEG', 'scratch/val/n04285008/images/n04285008_253.JPEG', 'scratch/val/n04285008/images/n04285008_352.JPEG', 'scratch/val/n04285008/images/n04285008_201.JPEG', 'scratch/val/n03977966/images/n03977966_344.JPEG', 'scratch/val/n01443537/images/n01443537_251.JPEG', 'scratch/val/n03977966/images/n03977966_256.JPEG', 'scratch/val/n04285008/images/n04285008_244.JPEG', 'scratch/val/n04285008/images/n04285008_252.JPEG', 'scratch/val/n02988304/images/n02988304_428.JPEG', 'scratch/val/n01983481/images/n01983481_242.JPEG', 'scratch/val/n04285008/images/n04285008_197.JPEG', 'scratch/val/n04285008/images/n04285008_141.JPEG', 'scratch/val/n09428293/images/n09428293_161.JPEG', 'scratch/val/n04285008/images/n04285008_315.JPEG', 'scratch/val/n04285008/images/n04285008_273.JPEG', 'scratch/val/n04285008/images/n04285008_215.JPEG', 'scratch/val/n04285008/images/n04285008_75.JPEG', 'scratch/val/n07920052/images/n07920052_460.JPEG', 'scratch/val/n02988304/images/n02988304_493.JPEG', 'scratch/val/n04285008/images/n04285008_338.JPEG', 'scratch/val/n06596364/images/n06596364_254.JPEG', 'scratch/val/n03977966/images/n03977966_394.JPEG', 'scratch/val/n04285008/images/n04285008_356.JPEG', 'scratch/val/n04285008/images/n04285008_372.JPEG', 'scratch/val/n04285008/images/n04285008_125.JPEG', 'scratch/val/n02988304/images/n02988304_473.JPEG', 'scratch/val/n02988304/images/n02988304_459.JPEG', 'scratch/val/n04285008/images/n04285008_200.JPEG', 'scratch/val/n01983481/images/n01983481_372.JPEG', 'scratch/val/n04285008/images/n04285008_468.JPEG', 'scratch/val/n02988304/images/n02988304_139.JPEG', 'scratch/val/n04597913/images/n04597913_282.JPEG', 'scratch/val/n02988304/images/n02988304_105.JPEG', 'scratch/val/n01983481/images/n01983481_422.JPEG', 'scratch/val/n04285008/images/n04285008_182.JPEG', 'scratch/val/n02988304/images/n02988304_73.JPEG']
rows:  10
cols:  10
len imgs:  100
=> saved grid_5.pdf, accuracy = 0.439, nsamples = 173
=> grid 5 labels: [3 5 3 3 4 4 1 5 4 4 4 5 1 4 7 4 2 1 3 2 4 2 0 4 3 4 4 4 4 6 2 3 4 2 1 2 4
 4 4 9 2 2 4 4 5 2 4 4 4 1 4 9 2 5 2 4 5 4 4 6 4 2 5 4 4 4 4 3 0 3 4 4 2 1
 4 4 8 4 4 4 4 7 2 4 6 3 4 4 4 2 2 4 1 4 2 5 2 1 4 2]
label_i 8
preds [8 8 8 ... 8 8 4]
np.where(preds == label_i) (array([   0,    1,    2,    5,    7,    8,   10,   12,   14,   17,   21,
         25,   26,   27,   28,   30,   31,   33,   39,   41,   42,   44,
         45,   48,   49,   50,   51,   52,   54,   56,   57,   58,   59,
         60,   62,   64,   66,   69,   70,   71,   73,   78,   80,   81,
         82,   83,   86,   88,   89,   91,   93,   94,   96,   97,   99,
        100,  101,  103,  104,  105,  106,  109,  111,  112,  113,  114,
        115,  116,  117,  119,  121,  123,  127,  130,  132,  137,  139,
        140,  141,  142,  143,  146,  147,  149,  153,  155,  156,  158,
        161,  162,  164,  165,  166,  168,  170,  171,  172,  174,  175,
        177,  179,  181,  182,  184,  186,  188,  189,  191,  193,  199,
        201,  202,  205,  208,  212,  214,  215,  217,  220,  222,  224,
        225,  229,  231,  232,  233,  235,  236,  237,  238,  240,  243,
        246,  248,  250,  252,  255,  257,  258,  260,  261,  264,  265,
        266,  267,  268,  271,  273,  275,  277,  278,  284,  285,  287,
        288,  292,  295,  296,  297,  299,  300,  302,  304,  306,  307,
        314,  316,  317,  320,  321,  322,  324,  326,  327,  331,  332,
        334,  335,  336,  337,  339,  342,  344,  346,  350,  351,  354,
        357,  359,  361,  363,  365,  372,  373,  374,  375,  376,  377,
        379,  380,  382,  384,  385,  386,  388,  391,  394,  395,  397,
        399,  400,  401,  402,  403,  404,  405,  407,  409,  410,  412,
        413,  414,  416,  418,  419,  420,  421,  426,  427,  429,  430,
        431,  433,  435,  436,  437,  438,  446,  448,  455,  456,  458,
        460,  461,  463,  467,  470,  471,  472,  476,  478,  485,  497,
        500,  504,  505,  506,  508,  509,  512,  513,  517,  518,  519,
        521,  527,  529,  531,  532,  537,  542,  543,  545,  550,  552,
        555,  558,  564,  567,  569,  571,  573,  574,  579,  580,  581,
        584,  585,  588,  589,  603,  605,  607,  611,  615,  618,  622,
        623,  627,  628,  630,  633,  637,  644,  649,  650,  655,  658,
        661,  665,  668,  671,  672,  674,  677,  678,  684,  685,  687,
        690,  691,  694,  698,  699,  701,  706,  707,  708,  709,  711,
        724,  734,  737,  740,  741,  743,  746,  750,  751,  756,  759,
        765,  773,  775,  780,  783,  787,  791,  798,  799,  801,  803,
        804,  817,  818,  821,  825,  826,  833,  838,  839,  841,  845,
        855,  856,  857,  858,  859,  861,  865,  866,  870,  872,  873,
        876,  878,  881,  884,  887,  909,  927,  929,  963, 1001, 1012,
       1016, 1022, 1036, 1068, 1078, 1088, 1107, 1113, 1115, 1135, 1146,
       1153, 1159, 1161, 1177, 1185, 1189, 1220, 1257, 1264, 1285, 1307,
       1765, 1800, 1863, 1876, 1887, 1979, 2043, 2062, 2067, 2103, 2113,
       2141, 2165, 2180, 2200, 2202, 2205, 2208, 2211, 2217, 2218, 2232,
       2238, 2244, 2246, 2247, 2254, 2255, 2260, 2268, 2274, 2277, 2286,
       2296, 2299, 2308, 2311, 2313, 2320, 2326, 2327, 2328, 2331, 2334,
       2336, 2340, 2349, 2352, 2353, 2354, 2366, 2367, 2370, 2376, 2398,
       2403, 2404, 2411, 2419, 2420, 2426, 2434, 2436, 2441, 2443, 2444,
       2447, 2448, 2450, 2463, 2465, 2468, 2472, 2479, 2480, 2481, 2482,
       2484, 2485, 2487, 2488, 2489, 2491, 2493, 2502, 2512, 2515, 2516,
       2517, 2518, 2522, 2526, 2528, 2535, 2537, 2540, 2545, 2546, 2549,
       2550, 2557, 2560, 2562, 2573, 2577, 2578, 2591, 2592, 2595, 2599,
       2601, 2607, 2608, 2616, 2619, 2621, 2623, 2624, 2626, 2792, 2909,
       2971, 3017, 3111, 3124, 3130, 3137, 3142, 3149, 3153, 3157, 3165,
       3171, 3175, 3180, 3185, 3191, 3214, 3231, 3238, 3243, 3279, 3287,
       3305, 3309, 3311, 3315, 3328, 3332, 3333, 3334, 3353, 3355, 3357,
       3379, 3396, 3406, 3419, 3420, 3424, 3431, 3439, 3443, 3451, 3462,
       3464, 3489, 3490, 3497, 3503, 3619, 3689, 3759, 3784, 3891, 3921,
       3961, 3962, 3965, 3971, 3981, 3984, 3986, 3987, 3988, 3989, 3996,
       3997, 3999, 4003, 4004, 4006, 4010, 4011, 4018, 4025, 4027, 4031,
       4033, 4037, 4044, 4047, 4048, 4064, 4074, 4075, 4077, 4080, 4089,
       4090, 4094, 4095, 4098, 4103, 4105, 4108, 4118, 4120, 4121, 4125,
       4128, 4141, 4154, 4157, 4166, 4168, 4170, 4171, 4180, 4187, 4191,
       4193, 4195, 4198, 4204, 4207, 4213, 4220, 4221, 4224, 4233, 4234,
       4236, 4248, 4250, 4251, 4254, 4256, 4257, 4260, 4267, 4273, 4279,
       4281, 4282, 4283, 4285, 4287, 4289, 4292, 4294, 4299, 4300, 4305,
       4312, 4313, 4314, 4315, 4316, 4332, 4340, 4351, 4352, 4358, 4359,
       4365, 4370, 4371, 4377, 4382, 4385, 4387, 4390, 4391, 4397, 4398]),)
sample_indices [   0    1    2    5    7    8   10   12   14   17   21   25   26   27
   28   30   31   33   39   41   42   44   45   48   49   50   51   52
   54   56   57   58   59   60   62   64   66   69   70   71   73   78
   80   81   82   83   86   88   89   91   93   94   96   97   99  100
  101  103  104  105  106  109  111  112  113  114  115  116  117  119
  121  123  127  130  132  137  139  140  141  142  143  146  147  149
  153  155  156  158  161  162  164  165  166  168  170  171  172  174
  175  177  179  181  182  184  186  188  189  191  193  199  201  202
  205  208  212  214  215  217  220  222  224  225  229  231  232  233
  235  236  237  238  240  243  246  248  250  252  255  257  258  260
  261  264  265  266  267  268  271  273  275  277  278  284  285  287
  288  292  295  296  297  299  300  302  304  306  307  314  316  317
  320  321  322  324  326  327  331  332  334  335  336  337  339  342
  344  346  350  351  354  357  359  361  363  365  372  373  374  375
  376  377  379  380  382  384  385  386  388  391  394  395  397  399
  400  401  402  403  404  405  407  409  410  412  413  414  416  418
  419  420  421  426  427  429  430  431  433  435  436  437  438  446
  448  455  456  458  460  461  463  467  470  471  472  476  478  485
  497  500  504  505  506  508  509  512  513  517  518  519  521  527
  529  531  532  537  542  543  545  550  552  555  558  564  567  569
  571  573  574  579  580  581  584  585  588  589  603  605  607  611
  615  618  622  623  627  628  630  633  637  644  649  650  655  658
  661  665  668  671  672  674  677  678  684  685  687  690  691  694
  698  699  701  706  707  708  709  711  724  734  737  740  741  743
  746  750  751  756  759  765  773  775  780  783  787  791  798  799
  801  803  804  817  818  821  825  826  833  838  839  841  845  855
  856  857  858  859  861  865  866  870  872  873  876  878  881  884
  887  909  927  929  963 1001 1012 1016 1022 1036 1068 1078 1088 1107
 1113 1115 1135 1146 1153 1159 1161 1177 1185 1189 1220 1257 1264 1285
 1307 1765 1800 1863 1876 1887 1979 2043 2062 2067 2103 2113 2141 2165
 2180 2200 2202 2205 2208 2211 2217 2218 2232 2238 2244 2246 2247 2254
 2255 2260 2268 2274 2277 2286 2296 2299 2308 2311 2313 2320 2326 2327
 2328 2331 2334 2336 2340 2349 2352 2353 2354 2366 2367 2370 2376 2398
 2403 2404 2411 2419 2420 2426 2434 2436 2441 2443 2444 2447 2448 2450
 2463 2465 2468 2472 2479 2480 2481 2482 2484 2485 2487 2488 2489 2491
 2493 2502 2512 2515 2516 2517 2518 2522 2526 2528 2535 2537 2540 2545
 2546 2549 2550 2557 2560 2562 2573 2577 2578 2591 2592 2595 2599 2601
 2607 2608 2616 2619 2621 2623 2624 2626 2792 2909 2971 3017 3111 3124
 3130 3137 3142 3149 3153 3157 3165 3171 3175 3180 3185 3191 3214 3231
 3238 3243 3279 3287 3305 3309 3311 3315 3328 3332 3333 3334 3353 3355
 3357 3379 3396 3406 3419 3420 3424 3431 3439 3443 3451 3462 3464 3489
 3490 3497 3503 3619 3689 3759 3784 3891 3921 3961 3962 3965 3971 3981
 3984 3986 3987 3988 3989 3996 3997 3999 4003 4004 4006 4010 4011 4018
 4025 4027 4031 4033 4037 4044 4047 4048 4064 4074 4075 4077 4080 4089
 4090 4094 4095 4098 4103 4105 4108 4118 4120 4121 4125 4128 4141 4154
 4157 4166 4168 4170 4171 4180 4187 4191 4193 4195 4198 4204 4207 4213
 4220 4221 4224 4233 4234 4236 4248 4250 4251 4254 4256 4257 4260 4267
 4273 4279 4281 4282 4283 4285 4287 4289 4292 4294 4299 4300 4305 4312
 4313 4314 4315 4316 4332 4340 4351 4352 4358 4359 4365 4370 4371 4377
 4382 4385 4387 4390 4391 4397 4398]
subset_sample_indices [2353  267 4018 3759  833   58  467 4377  208 3171   28 4168  376 2218
 2419  229    1 1979 4027 2113 4316 2202 2624  821 4221  751 1113  137
  756 2549 3497 3124 2577  581 2336  342  858 3419  155 4090 2366  117
 4390  478 1189  724  184   14  142  734  460 4025  382   93 4204 3988
  569  401 4300 2331 4157 2623 3287  485   21 3333 4385 2562 4248 3231
 2404  519 4220  674  322 1257 2296  295 4299  429 4105  404 2608 3981
   69  296   89 4120  804  545 3311 3175  139  113   96  839 2426  685
 1264 2522]
subset_img_paths ['scratch/val/n04597913/images/n04597913_253.JPEG', 'scratch/val/n01443537/images/n01443537_367.JPEG', 'scratch/val/n12267677/images/n12267677_158.JPEG', 'scratch/val/n09428293/images/n09428293_339.JPEG', 'scratch/val/n01983481/images/n01983481_493.JPEG', 'scratch/val/n01443537/images/n01443537_158.JPEG', 'scratch/val/n01983481/images/n01983481_127.JPEG', 'scratch/val/n12267677/images/n12267677_77.JPEG', 'scratch/val/n01443537/images/n01443537_308.JPEG', 'scratch/val/n07920052/images/n07920052_191.JPEG', 'scratch/val/n01443537/images/n01443537_128.JPEG', 'scratch/val/n12267677/images/n12267677_308.JPEG', 'scratch/val/n01443537/images/n01443537_476.JPEG', 'scratch/val/n04597913/images/n04597913_118.JPEG', 'scratch/val/n04597913/images/n04597913_319.JPEG', 'scratch/val/n01443537/images/n01443537_329.JPEG', 'scratch/val/n01443537/images/n01443537_101.JPEG', 'scratch/val/n04285008/images/n04285008_319.JPEG', 'scratch/val/n12267677/images/n12267677_167.JPEG', 'scratch/val/n04285008/images/n04285008_453.JPEG', 'scratch/val/n12267677/images/n12267677_456.JPEG', 'scratch/val/n04597913/images/n04597913_102.JPEG', 'scratch/val/n04597913/images/n04597913_84.JPEG', 'scratch/val/n01983481/images/n01983481_481.JPEG', 'scratch/val/n12267677/images/n12267677_361.JPEG', 'scratch/val/n01983481/images/n01983481_411.JPEG', 'scratch/val/n02988304/images/n02988304_333.JPEG', 'scratch/val/n01443537/images/n01443537_237.JPEG', 'scratch/val/n01983481/images/n01983481_416.JPEG', 'scratch/val/n04597913/images/n04597913_449.JPEG', 'scratch/val/n07920052/images/n07920052_77.JPEG', 'scratch/val/n07920052/images/n07920052_144.JPEG', 'scratch/val/n04597913/images/n04597913_477.JPEG', 'scratch/val/n01983481/images/n01983481_241.JPEG', 'scratch/val/n04597913/images/n04597913_236.JPEG', 'scratch/val/n01443537/images/n01443537_442.JPEG', 'scratch/val/n01983481/images/n01983481_78.JPEG', 'scratch/val/n07920052/images/n07920052_439.JPEG', 'scratch/val/n01443537/images/n01443537_255.JPEG', 'scratch/val/n12267677/images/n12267677_230.JPEG', 'scratch/val/n04597913/images/n04597913_266.JPEG', 'scratch/val/n01443537/images/n01443537_217.JPEG', 'scratch/val/n12267677/images/n12267677_90.JPEG', 'scratch/val/n01983481/images/n01983481_138.JPEG', 'scratch/val/n02988304/images/n02988304_409.JPEG', 'scratch/val/n01983481/images/n01983481_384.JPEG', 'scratch/val/n01443537/images/n01443537_284.JPEG', 'scratch/val/n01443537/images/n01443537_114.JPEG', 'scratch/val/n01443537/images/n01443537_242.JPEG', 'scratch/val/n01983481/images/n01983481_394.JPEG', 'scratch/val/n01983481/images/n01983481_120.JPEG', 'scratch/val/n12267677/images/n12267677_165.JPEG', 'scratch/val/n01443537/images/n01443537_482.JPEG', 'scratch/val/n01443537/images/n01443537_193.JPEG', 'scratch/val/n12267677/images/n12267677_344.JPEG', 'scratch/val/n12267677/images/n12267677_128.JPEG', 'scratch/val/n01983481/images/n01983481_229.JPEG', 'scratch/val/n01443537/images/n01443537_61.JPEG', 'scratch/val/n12267677/images/n12267677_440.JPEG', 'scratch/val/n04597913/images/n04597913_231.JPEG', 'scratch/val/n12267677/images/n12267677_297.JPEG', 'scratch/val/n04597913/images/n04597913_83.JPEG', 'scratch/val/n07920052/images/n07920052_307.JPEG', 'scratch/val/n01983481/images/n01983481_145.JPEG', 'scratch/val/n01443537/images/n01443537_121.JPEG', 'scratch/val/n07920052/images/n07920052_353.JPEG', 'scratch/val/n12267677/images/n12267677_85.JPEG', 'scratch/val/n04597913/images/n04597913_462.JPEG', 'scratch/val/n12267677/images/n12267677_388.JPEG', 'scratch/val/n07920052/images/n07920052_251.JPEG', 'scratch/val/n04597913/images/n04597913_304.JPEG', 'scratch/val/n01983481/images/n01983481_179.JPEG', 'scratch/val/n12267677/images/n12267677_360.JPEG', 'scratch/val/n01983481/images/n01983481_334.JPEG', 'scratch/val/n01443537/images/n01443537_422.JPEG', 'scratch/val/n02988304/images/n02988304_477.JPEG', 'scratch/val/n04597913/images/n04597913_196.JPEG', 'scratch/val/n01443537/images/n01443537_395.JPEG', 'scratch/val/n12267677/images/n12267677_439.JPEG', 'scratch/val/n01443537/images/n01443537_89.JPEG', 'scratch/val/n12267677/images/n12267677_245.JPEG', 'scratch/val/n01443537/images/n01443537_64.JPEG', 'scratch/val/n04597913/images/n04597913_68.JPEG', 'scratch/val/n12267677/images/n12267677_121.JPEG', 'scratch/val/n01443537/images/n01443537_169.JPEG', 'scratch/val/n01443537/images/n01443537_396.JPEG', 'scratch/val/n01443537/images/n01443537_189.JPEG', 'scratch/val/n12267677/images/n12267677_260.JPEG', 'scratch/val/n01983481/images/n01983481_464.JPEG', 'scratch/val/n01983481/images/n01983481_205.JPEG', 'scratch/val/n07920052/images/n07920052_331.JPEG', 'scratch/val/n07920052/images/n07920052_195.JPEG', 'scratch/val/n01443537/images/n01443537_239.JPEG', 'scratch/val/n01443537/images/n01443537_213.JPEG', 'scratch/val/n01443537/images/n01443537_196.JPEG', 'scratch/val/n01983481/images/n01983481_499.JPEG', 'scratch/val/n04597913/images/n04597913_326.JPEG', 'scratch/val/n01983481/images/n01983481_345.JPEG', 'scratch/val/n02988304/images/n02988304_484.JPEG', 'scratch/val/n04597913/images/n04597913_422.JPEG']
rows:  10
cols:  10
len imgs:  100
=> saved grid_6.pdf, accuracy = 0.342, nsamples = 693
=> grid 6 labels: [5 0 9 8 1 0 1 9 0 7 0 9 0 5 5 0 0 4 9 4 9 5 5 1 9 1 2 0 1 5 7 7 5 1 5 0 1
 7 0 9 5 0 9 1 2 1 0 0 0 1 1 9 0 0 9 9 1 0 9 5 9 5 7 1 0 7 9 5 9 7 5 1 9 1
 0 2 5 0 9 0 9 0 5 9 0 0 0 9 1 1 7 7 0 0 0 1 5 1 2 5]
label_i 4
preds [8 8 8 ... 8 8 4]
np.where(preds == label_i) (array([   3,   11,   23,   24,   32,   34,   38,   47,   75,   76,   90,
        102,  107,  110,  120,  124,  125,  128,  129,  131,  134,  144,
        145,  148,  152,  163,  167,  192,  195,  200,  207,  209,  211,
        216,  218,  221,  239,  242,  244,  247,  254,  262,  263,  269,
        276,  291,  308,  309,  311,  312,  315,  325,  330,  338,  352,
        355,  360,  362,  378,  383,  387,  396,  417,  424,  434,  441,
        445,  447,  451,  454,  462,  468,  469,  473,  474,  477,  479,
        480,  482,  484,  486,  488,  489,  490,  491,  492,  493,  494,
        496,  498,  499,  501,  502,  503,  507,  510,  511,  514,  515,
        516,  520,  524,  526,  533,  535,  536,  538,  547,  548,  549,
        556,  559,  560,  566,  570,  578,  583,  586,  587,  590,  592,
        594,  595,  596,  598,  599,  601,  602,  609,  613,  614,  621,
        625,  631,  632,  639,  641,  642,  643,  645,  646,  647,  651,
        653,  654,  657,  659,  660,  666,  669,  680,  682,  683,  686,
        689,  696,  697,  700,  702,  704,  705,  710,  714,  715,  716,
        717,  718,  721,  722,  725,  728,  731,  732,  733,  736,  738,
        742,  747,  748,  749,  755,  757,  758,  760,  761,  763,  764,
        767,  768,  770,  771,  772,  774,  776,  779,  781,  784,  785,
        788,  790,  795,  800,  805,  806,  809,  810,  812,  815,  816,
        819,  823,  824,  827,  828,  830,  834,  835,  836,  840,  842,
        844,  846,  848,  850,  852,  854,  863,  864,  867,  868,  869,
        871,  875,  879,  925,  932,  936,  947,  960,  974,  996, 1029,
       1040, 1079, 1110, 1158, 1192, 1198, 1204, 1206, 1232, 1243, 1288,
       1292, 1298, 1365, 1389, 1793, 1805, 1840, 1874, 1879, 1895, 1907,
       1910, 1935, 1988, 1991, 1995, 2021, 2037, 2051, 2076, 2100, 2142,
       2150, 2151, 2157, 2201, 2207, 2212, 2219, 2221, 2228, 2233, 2235,
       2245, 2253, 2256, 2259, 2261, 2262, 2264, 2266, 2270, 2280, 2289,
       2295, 2301, 2304, 2309, 2314, 2322, 2335, 2347, 2357, 2359, 2365,
       2368, 2369, 2372, 2375, 2377, 2378, 2379, 2386, 2387, 2390, 2395,
       2401, 2412, 2415, 2421, 2423, 2449, 2461, 2464, 2467, 2470, 2477,
       2495, 2500, 2503, 2508, 2521, 2523, 2530, 2541, 2544, 2570, 2571,
       2574, 2579, 2582, 2583, 2586, 2598, 2606, 2611, 2618, 2620, 2627,
       2632, 2638, 2647, 2672, 2697, 2698, 2704, 2710, 2760, 2761, 2768,
       2770, 2789, 2830, 2861, 2875, 2877, 2894, 2895, 2898, 2904, 2911,
       2913, 2981, 3000, 3004, 3007, 3013, 3016, 3028, 3029, 3034, 3049,
       3086, 3091, 3103, 3117, 3158, 3341, 3352, 3404, 3423, 3457, 3484,
       3646, 3960, 3969, 3973, 3974, 3976, 3977, 3979, 3985, 3991, 3998,
       4000, 4012, 4013, 4014, 4019, 4020, 4022, 4023, 4024, 4028, 4030,
       4034, 4035, 4036, 4038, 4040, 4042, 4049, 4051, 4053, 4054, 4057,
       4062, 4063, 4065, 4066, 4068, 4070, 4071, 4072, 4073, 4076, 4078,
       4079, 4083, 4084, 4087, 4088, 4091, 4092, 4096, 4102, 4104, 4106,
       4107, 4113, 4114, 4115, 4116, 4117, 4122, 4123, 4126, 4129, 4130,
       4131, 4133, 4138, 4143, 4145, 4146, 4149, 4155, 4156, 4158, 4159,
       4161, 4164, 4165, 4167, 4174, 4176, 4177, 4183, 4184, 4185, 4188,
       4190, 4196, 4197, 4203, 4208, 4211, 4212, 4222, 4226, 4227, 4232,
       4235, 4239, 4244, 4247, 4249, 4253, 4255, 4258, 4259, 4261, 4263,
       4266, 4268, 4276, 4277, 4280, 4284, 4290, 4293, 4295, 4303, 4304,
       4306, 4308, 4311, 4317, 4318, 4321, 4326, 4327, 4328, 4329, 4330,
       4331, 4333, 4339, 4343, 4346, 4348, 4349, 4356, 4357, 4360, 4361,
       4362, 4366, 4372, 4376, 4378, 4379, 4380, 4381, 4383, 4384, 4388,
       4394, 4399]),)
sample_indices [   3   11   23   24   32   34   38   47   75   76   90  102  107  110
  120  124  125  128  129  131  134  144  145  148  152  163  167  192
  195  200  207  209  211  216  218  221  239  242  244  247  254  262
  263  269  276  291  308  309  311  312  315  325  330  338  352  355
  360  362  378  383  387  396  417  424  434  441  445  447  451  454
  462  468  469  473  474  477  479  480  482  484  486  488  489  490
  491  492  493  494  496  498  499  501  502  503  507  510  511  514
  515  516  520  524  526  533  535  536  538  547  548  549  556  559
  560  566  570  578  583  586  587  590  592  594  595  596  598  599
  601  602  609  613  614  621  625  631  632  639  641  642  643  645
  646  647  651  653  654  657  659  660  666  669  680  682  683  686
  689  696  697  700  702  704  705  710  714  715  716  717  718  721
  722  725  728  731  732  733  736  738  742  747  748  749  755  757
  758  760  761  763  764  767  768  770  771  772  774  776  779  781
  784  785  788  790  795  800  805  806  809  810  812  815  816  819
  823  824  827  828  830  834  835  836  840  842  844  846  848  850
  852  854  863  864  867  868  869  871  875  879  925  932  936  947
  960  974  996 1029 1040 1079 1110 1158 1192 1198 1204 1206 1232 1243
 1288 1292 1298 1365 1389 1793 1805 1840 1874 1879 1895 1907 1910 1935
 1988 1991 1995 2021 2037 2051 2076 2100 2142 2150 2151 2157 2201 2207
 2212 2219 2221 2228 2233 2235 2245 2253 2256 2259 2261 2262 2264 2266
 2270 2280 2289 2295 2301 2304 2309 2314 2322 2335 2347 2357 2359 2365
 2368 2369 2372 2375 2377 2378 2379 2386 2387 2390 2395 2401 2412 2415
 2421 2423 2449 2461 2464 2467 2470 2477 2495 2500 2503 2508 2521 2523
 2530 2541 2544 2570 2571 2574 2579 2582 2583 2586 2598 2606 2611 2618
 2620 2627 2632 2638 2647 2672 2697 2698 2704 2710 2760 2761 2768 2770
 2789 2830 2861 2875 2877 2894 2895 2898 2904 2911 2913 2981 3000 3004
 3007 3013 3016 3028 3029 3034 3049 3086 3091 3103 3117 3158 3341 3352
 3404 3423 3457 3484 3646 3960 3969 3973 3974 3976 3977 3979 3985 3991
 3998 4000 4012 4013 4014 4019 4020 4022 4023 4024 4028 4030 4034 4035
 4036 4038 4040 4042 4049 4051 4053 4054 4057 4062 4063 4065 4066 4068
 4070 4071 4072 4073 4076 4078 4079 4083 4084 4087 4088 4091 4092 4096
 4102 4104 4106 4107 4113 4114 4115 4116 4117 4122 4123 4126 4129 4130
 4131 4133 4138 4143 4145 4146 4149 4155 4156 4158 4159 4161 4164 4165
 4167 4174 4176 4177 4183 4184 4185 4188 4190 4196 4197 4203 4208 4211
 4212 4222 4226 4227 4232 4235 4239 4244 4247 4249 4253 4255 4258 4259
 4261 4263 4266 4268 4276 4277 4280 4284 4290 4293 4295 4303 4304 4306
 4308 4311 4317 4318 4321 4326 4327 4328 4329 4330 4331 4333 4339 4343
 4346 4348 4349 4356 4357 4360 4361 4362 4366 4372 4376 4378 4379 4380
 4381 4383 4384 4388 4394 4399]
subset_sample_indices [ 492 4212  511  547 1907  242 3484  499 4290 3028  717 4076  445  625
 4091 4308 3404  879 4247 2335 4211 2611 4068 4158  632 2544 2221  854
  869  932 2761 3091  566 4399  700 2647 2228 3423  124  704 4184 3000
  128 2368 2051 4143 4394  291  764 2372 4023  768 3977 4244 4253 4145
 4096  779 4104 1198  868 4161  842  498 4013  308  533  714  144  548
 2076  828 2579  468  477 2395  482 1040  646 2477 2582 4196 2386 4057
  805 4222  852 2378 2495 2698  526 4066 2201 2503 4258  696 2219 2508
   11  738]
subset_img_paths ['scratch/val/n01983481/images/n01983481_152.JPEG', 'scratch/val/n12267677/images/n12267677_352.JPEG', 'scratch/val/n01983481/images/n01983481_171.JPEG', 'scratch/val/n01983481/images/n01983481_207.JPEG', 'scratch/val/n04285008/images/n04285008_247.JPEG', 'scratch/val/n01443537/images/n01443537_342.JPEG', 'scratch/val/n07920052/images/n07920052_64.JPEG', 'scratch/val/n01983481/images/n01983481_159.JPEG', 'scratch/val/n12267677/images/n12267677_430.JPEG', 'scratch/val/n06596364/images/n06596364_488.JPEG', 'scratch/val/n01983481/images/n01983481_377.JPEG', 'scratch/val/n12267677/images/n12267677_216.JPEG', 'scratch/val/n01983481/images/n01983481_105.JPEG', 'scratch/val/n01983481/images/n01983481_285.JPEG', 'scratch/val/n12267677/images/n12267677_231.JPEG', 'scratch/val/n12267677/images/n12267677_448.JPEG', 'scratch/val/n07920052/images/n07920052_424.JPEG', 'scratch/val/n01983481/images/n01983481_99.JPEG', 'scratch/val/n12267677/images/n12267677_387.JPEG', 'scratch/val/n04597913/images/n04597913_235.JPEG', 'scratch/val/n12267677/images/n12267677_351.JPEG', 'scratch/val/n04597913/images/n04597913_71.JPEG', 'scratch/val/n12267677/images/n12267677_208.JPEG', 'scratch/val/n12267677/images/n12267677_298.JPEG', 'scratch/val/n01983481/images/n01983481_292.JPEG', 'scratch/val/n04597913/images/n04597913_444.JPEG', 'scratch/val/n04597913/images/n04597913_121.JPEG', 'scratch/val/n01983481/images/n01983481_74.JPEG', 'scratch/val/n01983481/images/n01983481_89.JPEG', 'scratch/val/n02988304/images/n02988304_152.JPEG', 'scratch/val/n06596364/images/n06596364_221.JPEG', 'scratch/val/n07920052/images/n07920052_111.JPEG', 'scratch/val/n01983481/images/n01983481_226.JPEG', 'scratch/val/n12267677/images/n12267677_99.JPEG', 'scratch/val/n01983481/images/n01983481_360.JPEG', 'scratch/val/n06596364/images/n06596364_107.JPEG', 'scratch/val/n04597913/images/n04597913_128.JPEG', 'scratch/val/n07920052/images/n07920052_443.JPEG', 'scratch/val/n01443537/images/n01443537_224.JPEG', 'scratch/val/n01983481/images/n01983481_364.JPEG', 'scratch/val/n12267677/images/n12267677_324.JPEG', 'scratch/val/n06596364/images/n06596364_460.JPEG', 'scratch/val/n01443537/images/n01443537_228.JPEG', 'scratch/val/n04597913/images/n04597913_268.JPEG', 'scratch/val/n04285008/images/n04285008_391.JPEG', 'scratch/val/n12267677/images/n12267677_283.JPEG', 'scratch/val/n12267677/images/n12267677_94.JPEG', 'scratch/val/n01443537/images/n01443537_391.JPEG', 'scratch/val/n01983481/images/n01983481_424.JPEG', 'scratch/val/n04597913/images/n04597913_272.JPEG', 'scratch/val/n12267677/images/n12267677_163.JPEG', 'scratch/val/n01983481/images/n01983481_428.JPEG', 'scratch/val/n12267677/images/n12267677_117.JPEG', 'scratch/val/n12267677/images/n12267677_384.JPEG', 'scratch/val/n12267677/images/n12267677_393.JPEG', 'scratch/val/n12267677/images/n12267677_285.JPEG', 'scratch/val/n12267677/images/n12267677_236.JPEG', 'scratch/val/n01983481/images/n01983481_439.JPEG', 'scratch/val/n12267677/images/n12267677_244.JPEG', 'scratch/val/n02988304/images/n02988304_418.JPEG', 'scratch/val/n01983481/images/n01983481_88.JPEG', 'scratch/val/n12267677/images/n12267677_301.JPEG', 'scratch/val/n01983481/images/n01983481_62.JPEG', 'scratch/val/n01983481/images/n01983481_158.JPEG', 'scratch/val/n12267677/images/n12267677_153.JPEG', 'scratch/val/n01443537/images/n01443537_408.JPEG', 'scratch/val/n01983481/images/n01983481_193.JPEG', 'scratch/val/n01983481/images/n01983481_374.JPEG', 'scratch/val/n01443537/images/n01443537_244.JPEG', 'scratch/val/n01983481/images/n01983481_208.JPEG', 'scratch/val/n04285008/images/n04285008_416.JPEG', 'scratch/val/n01983481/images/n01983481_488.JPEG', 'scratch/val/n04597913/images/n04597913_479.JPEG', 'scratch/val/n01983481/images/n01983481_128.JPEG', 'scratch/val/n01983481/images/n01983481_137.JPEG', 'scratch/val/n04597913/images/n04597913_295.JPEG', 'scratch/val/n01983481/images/n01983481_142.JPEG', 'scratch/val/n02988304/images/n02988304_260.JPEG', 'scratch/val/n01983481/images/n01983481_306.JPEG', 'scratch/val/n04597913/images/n04597913_377.JPEG', 'scratch/val/n04597913/images/n04597913_482.JPEG', 'scratch/val/n12267677/images/n12267677_336.JPEG', 'scratch/val/n04597913/images/n04597913_286.JPEG', 'scratch/val/n12267677/images/n12267677_197.JPEG', 'scratch/val/n01983481/images/n01983481_465.JPEG', 'scratch/val/n12267677/images/n12267677_362.JPEG', 'scratch/val/n01983481/images/n01983481_72.JPEG', 'scratch/val/n04597913/images/n04597913_278.JPEG', 'scratch/val/n04597913/images/n04597913_395.JPEG', 'scratch/val/n06596364/images/n06596364_158.JPEG', 'scratch/val/n01983481/images/n01983481_186.JPEG', 'scratch/val/n12267677/images/n12267677_206.JPEG', 'scratch/val/n04597913/images/n04597913_101.JPEG', 'scratch/val/n04597913/images/n04597913_403.JPEG', 'scratch/val/n12267677/images/n12267677_398.JPEG', 'scratch/val/n01983481/images/n01983481_356.JPEG', 'scratch/val/n04597913/images/n04597913_119.JPEG', 'scratch/val/n04597913/images/n04597913_408.JPEG', 'scratch/val/n01443537/images/n01443537_111.JPEG', 'scratch/val/n01983481/images/n01983481_398.JPEG']
rows:  10
cols:  10
len imgs:  100
=> saved grid_7.pdf, accuracy = 0.281, nsamples = 552
=> grid 7 labels: [1 9 1 1 4 0 7 1 9 6 1 9 1 1 9 9 7 1 9 5 9 5 9 9 1 5 5 1 1 2 6 7 1 9 1 6 5
 7 0 1 9 6 0 5 4 9 9 0 1 5 9 1 9 9 9 9 9 1 9 2 1 9 1 1 9 0 1 1 0 1 4 1 5 1
 1 5 1 2 1 5 5 9 5 9 1 9 1 5 5 6 1 9 5 5 9 1 5 5 0 1]
label_i 9
preds [8 8 8 ... 8 8 4]
np.where(preds == label_i) (array([   4,   13,   36,   53,   61,  126,  160,  176,  197,  230,  259,
        279,  286,  319,  333,  345,  353,  364,  428,  452,  483,  554,
        619,  620,  662,  663,  673,  679,  713,  730,  778,  786,  796,
        808,  837,  897,  898,  900,  903,  907,  916,  917,  924,  928,
        938,  944,  949,  950,  954,  961,  966,  998, 1000, 1017, 1021,
       1023, 1028, 1034, 1044, 1060, 1071, 1073, 1075, 1076, 1077, 1095,
       1101, 1103, 1106, 1112, 1117, 1119, 1132, 1141, 1144, 1145, 1147,
       1148, 1155, 1196, 1197, 1210, 1216, 1217, 1234, 1270, 1276, 1280,
       1308, 1309, 1315, 1504, 1552, 1678, 1684, 1797, 1836, 1846, 1878,
       1922, 1983, 2039, 2206, 2209, 2215, 2222, 2223, 2225, 2226, 2230,
       2231, 2240, 2241, 2248, 2249, 2250, 2263, 2267, 2269, 2275, 2276,
       2283, 2287, 2288, 2294, 2303, 2306, 2310, 2315, 2319, 2325, 2329,
       2330, 2333, 2337, 2339, 2342, 2343, 2360, 2361, 2363, 2371, 2384,
       2391, 2396, 2407, 2422, 2424, 2429, 2439, 2446, 2452, 2458, 2460,
       2462, 2466, 2471, 2473, 2475, 2476, 2486, 2492, 2498, 2499, 2507,
       2511, 2533, 2539, 2554, 2558, 2561, 2565, 2566, 2576, 2585, 2587,
       2593, 2594, 2597, 2602, 2630, 2631, 2637, 2660, 2780, 2949, 3021,
       3081, 3088, 3094, 3095, 3098, 3101, 3102, 3105, 3107, 3112, 3114,
       3115, 3116, 3133, 3145, 3146, 3147, 3152, 3154, 3156, 3160, 3164,
       3170, 3174, 3177, 3178, 3179, 3186, 3187, 3190, 3192, 3193, 3197,
       3198, 3206, 3213, 3219, 3220, 3221, 3224, 3225, 3226, 3227, 3230,
       3232, 3236, 3237, 3242, 3250, 3251, 3253, 3254, 3260, 3262, 3265,
       3271, 3273, 3276, 3277, 3281, 3282, 3284, 3288, 3289, 3299, 3303,
       3306, 3308, 3312, 3314, 3318, 3319, 3321, 3322, 3326, 3335, 3336,
       3339, 3342, 3359, 3360, 3362, 3364, 3365, 3369, 3370, 3371, 3375,
       3383, 3385, 3386, 3390, 3400, 3402, 3405, 3411, 3412, 3425, 3426,
       3427, 3429, 3436, 3437, 3441, 3442, 3444, 3447, 3452, 3455, 3458,
       3461, 3467, 3471, 3474, 3475, 3479, 3481, 3487, 3488, 3495, 3500,
       3501, 3506, 3514, 3518, 3519, 3935, 4001, 4016, 4041, 4136, 4142,
       4152, 4178, 4182, 4206, 4272, 4301, 4363]),)
sample_indices [   4   13   36   53   61  126  160  176  197  230  259  279  286  319
  333  345  353  364  428  452  483  554  619  620  662  663  673  679
  713  730  778  786  796  808  837  897  898  900  903  907  916  917
  924  928  938  944  949  950  954  961  966  998 1000 1017 1021 1023
 1028 1034 1044 1060 1071 1073 1075 1076 1077 1095 1101 1103 1106 1112
 1117 1119 1132 1141 1144 1145 1147 1148 1155 1196 1197 1210 1216 1217
 1234 1270 1276 1280 1308 1309 1315 1504 1552 1678 1684 1797 1836 1846
 1878 1922 1983 2039 2206 2209 2215 2222 2223 2225 2226 2230 2231 2240
 2241 2248 2249 2250 2263 2267 2269 2275 2276 2283 2287 2288 2294 2303
 2306 2310 2315 2319 2325 2329 2330 2333 2337 2339 2342 2343 2360 2361
 2363 2371 2384 2391 2396 2407 2422 2424 2429 2439 2446 2452 2458 2460
 2462 2466 2471 2473 2475 2476 2486 2492 2498 2499 2507 2511 2533 2539
 2554 2558 2561 2565 2566 2576 2585 2587 2593 2594 2597 2602 2630 2631
 2637 2660 2780 2949 3021 3081 3088 3094 3095 3098 3101 3102 3105 3107
 3112 3114 3115 3116 3133 3145 3146 3147 3152 3154 3156 3160 3164 3170
 3174 3177 3178 3179 3186 3187 3190 3192 3193 3197 3198 3206 3213 3219
 3220 3221 3224 3225 3226 3227 3230 3232 3236 3237 3242 3250 3251 3253
 3254 3260 3262 3265 3271 3273 3276 3277 3281 3282 3284 3288 3289 3299
 3303 3306 3308 3312 3314 3318 3319 3321 3322 3326 3335 3336 3339 3342
 3359 3360 3362 3364 3365 3369 3370 3371 3375 3383 3385 3386 3390 3400
 3402 3405 3411 3412 3425 3426 3427 3429 3436 3437 3441 3442 3444 3447
 3452 3455 3458 3461 3467 3471 3474 3475 3479 3481 3487 3488 3495 3500
 3501 3506 3514 3518 3519 3935 4001 4016 4041 4136 4142 4152 4178 4182
 4206 4272 4301 4363]
subset_sample_indices [2287 1101 2384 3277 2422 1076 3364  345 2342 2396 3359 1060  673 1106
 3178 3288 2473 2226 1071 4142 3170 3236 2561 3452 3442 3467 3495 3197
 3369 2565 3088 3254 3198  176  160 1028 1023  619 2276 1077 3429  554
 2337 3326  286 3213 2475 2554 2206 2263  364 2363 1147 3282 1983 3095
 2780 1095 1210 3500 2460 3242 1144 1000 3250 3186   13 3461  197 3179
 2039 2294 3412 3220 3133  126  808 1155  837 2333 2330 1846 3370  944
 2476 2446 2507 2407 1552 3156 1315 2209 2339 2223 4182 1141 4152 3514
 3094 3190]
subset_img_paths ['scratch/val/n04597913/images/n04597913_187.JPEG', 'scratch/val/n02988304/images/n02988304_321.JPEG', 'scratch/val/n04597913/images/n04597913_284.JPEG', 'scratch/val/n07920052/images/n07920052_297.JPEG', 'scratch/val/n04597913/images/n04597913_322.JPEG', 'scratch/val/n02988304/images/n02988304_296.JPEG', 'scratch/val/n07920052/images/n07920052_384.JPEG', 'scratch/val/n01443537/images/n01443537_445.JPEG', 'scratch/val/n04597913/images/n04597913_242.JPEG', 'scratch/val/n04597913/images/n04597913_296.JPEG', 'scratch/val/n07920052/images/n07920052_379.JPEG', 'scratch/val/n02988304/images/n02988304_280.JPEG', 'scratch/val/n01983481/images/n01983481_333.JPEG', 'scratch/val/n02988304/images/n02988304_326.JPEG', 'scratch/val/n07920052/images/n07920052_198.JPEG', 'scratch/val/n07920052/images/n07920052_308.JPEG', 'scratch/val/n04597913/images/n04597913_373.JPEG', 'scratch/val/n04597913/images/n04597913_126.JPEG', 'scratch/val/n02988304/images/n02988304_291.JPEG', 'scratch/val/n12267677/images/n12267677_282.JPEG', 'scratch/val/n07920052/images/n07920052_190.JPEG', 'scratch/val/n07920052/images/n07920052_256.JPEG', 'scratch/val/n04597913/images/n04597913_461.JPEG', 'scratch/val/n07920052/images/n07920052_472.JPEG', 'scratch/val/n07920052/images/n07920052_462.JPEG', 'scratch/val/n07920052/images/n07920052_487.JPEG', 'scratch/val/n07920052/images/n07920052_75.JPEG', 'scratch/val/n07920052/images/n07920052_217.JPEG', 'scratch/val/n07920052/images/n07920052_389.JPEG', 'scratch/val/n04597913/images/n04597913_465.JPEG', 'scratch/val/n07920052/images/n07920052_108.JPEG', 'scratch/val/n07920052/images/n07920052_274.JPEG', 'scratch/val/n07920052/images/n07920052_218.JPEG', 'scratch/val/n01443537/images/n01443537_276.JPEG', 'scratch/val/n01443537/images/n01443537_260.JPEG', 'scratch/val/n02988304/images/n02988304_248.JPEG', 'scratch/val/n02988304/images/n02988304_243.JPEG', 'scratch/val/n01983481/images/n01983481_279.JPEG', 'scratch/val/n04597913/images/n04597913_176.JPEG', 'scratch/val/n02988304/images/n02988304_297.JPEG', 'scratch/val/n07920052/images/n07920052_449.JPEG', 'scratch/val/n01983481/images/n01983481_214.JPEG', 'scratch/val/n04597913/images/n04597913_237.JPEG', 'scratch/val/n07920052/images/n07920052_346.JPEG', 'scratch/val/n01443537/images/n01443537_386.JPEG', 'scratch/val/n07920052/images/n07920052_233.JPEG', 'scratch/val/n04597913/images/n04597913_375.JPEG', 'scratch/val/n04597913/images/n04597913_454.JPEG', 'scratch/val/n04597913/images/n04597913_106.JPEG', 'scratch/val/n04597913/images/n04597913_163.JPEG', 'scratch/val/n01443537/images/n01443537_464.JPEG', 'scratch/val/n04597913/images/n04597913_263.JPEG', 'scratch/val/n02988304/images/n02988304_367.JPEG', 'scratch/val/n07920052/images/n07920052_302.JPEG', 'scratch/val/n04285008/images/n04285008_323.JPEG', 'scratch/val/n07920052/images/n07920052_115.JPEG', 'scratch/val/n06596364/images/n06596364_240.JPEG', 'scratch/val/n02988304/images/n02988304_315.JPEG', 'scratch/val/n02988304/images/n02988304_430.JPEG', 'scratch/val/n07920052/images/n07920052_80.JPEG', 'scratch/val/n04597913/images/n04597913_360.JPEG', 'scratch/val/n07920052/images/n07920052_262.JPEG', 'scratch/val/n02988304/images/n02988304_364.JPEG', 'scratch/val/n02988304/images/n02988304_220.JPEG', 'scratch/val/n07920052/images/n07920052_270.JPEG', 'scratch/val/n07920052/images/n07920052_206.JPEG', 'scratch/val/n01443537/images/n01443537_113.JPEG', 'scratch/val/n07920052/images/n07920052_481.JPEG', 'scratch/val/n01443537/images/n01443537_297.JPEG', 'scratch/val/n07920052/images/n07920052_199.JPEG', 'scratch/val/n04285008/images/n04285008_379.JPEG', 'scratch/val/n04597913/images/n04597913_194.JPEG', 'scratch/val/n07920052/images/n07920052_432.JPEG', 'scratch/val/n07920052/images/n07920052_240.JPEG', 'scratch/val/n07920052/images/n07920052_153.JPEG', 'scratch/val/n01443537/images/n01443537_226.JPEG', 'scratch/val/n01983481/images/n01983481_468.JPEG', 'scratch/val/n02988304/images/n02988304_375.JPEG', 'scratch/val/n01983481/images/n01983481_497.JPEG', 'scratch/val/n04597913/images/n04597913_233.JPEG', 'scratch/val/n04597913/images/n04597913_230.JPEG', 'scratch/val/n04285008/images/n04285008_186.JPEG', 'scratch/val/n07920052/images/n07920052_390.JPEG', 'scratch/val/n02988304/images/n02988304_164.JPEG', 'scratch/val/n04597913/images/n04597913_376.JPEG', 'scratch/val/n04597913/images/n04597913_346.JPEG', 'scratch/val/n04597913/images/n04597913_407.JPEG', 'scratch/val/n04597913/images/n04597913_307.JPEG', 'scratch/val/n03977966/images/n03977966_332.JPEG', 'scratch/val/n07920052/images/n07920052_176.JPEG', 'scratch/val/n02988304/images/n02988304_95.JPEG', 'scratch/val/n04597913/images/n04597913_109.JPEG', 'scratch/val/n04597913/images/n04597913_239.JPEG', 'scratch/val/n04597913/images/n04597913_123.JPEG', 'scratch/val/n12267677/images/n12267677_322.JPEG', 'scratch/val/n02988304/images/n02988304_361.JPEG', 'scratch/val/n12267677/images/n12267677_292.JPEG', 'scratch/val/n07920052/images/n07920052_94.JPEG', 'scratch/val/n07920052/images/n07920052_114.JPEG', 'scratch/val/n07920052/images/n07920052_210.JPEG']
rows:  10
cols:  10
len imgs:  100
=> saved grid_8.pdf, accuracy = 0.248, nsamples = 326
=> grid 8 labels: [5 2 5 7 5 2 7 0 5 5 7 2 1 2 7 7 5 5 2 9 7 7 5 7 7 7 7 7 7 5 7 7 7 0 0 2 2
 1 5 2 7 1 5 7 0 7 5 5 5 5 0 5 2 7 4 7 6 2 2 7 5 7 2 2 7 7 0 7 0 7 4 5 7 7
 7 0 1 2 1 5 5 4 7 2 5 5 5 5 3 7 2 5 5 5 9 2 9 7 7 7]
label_i 5
preds [8 8 8 ... 8 8 4]
np.where(preds == label_i) (array([ 340,  348,  442,  443,  522,  523,  525,  528,  539,  544,  562,
        563,  577,  591,  600,  606,  634,  638,  652,  729,  744,  782,
        811,  813,  849,  860,  999, 1005, 1015, 1045, 1046, 1096, 1199,
       1214, 1222, 1316, 1361, 1369, 1377, 1394, 1402, 1409, 1420, 1431,
       1435, 1445, 1487, 1494, 1525, 1526, 1531, 1550, 1608, 1624, 1625,
       1627, 1641, 1654, 1664, 1673, 1677, 1680, 1706, 1707, 1710, 1724,
       1745, 1752, 1756, 1757, 1763, 1794, 1802, 1808, 1813, 1816, 1817,
       1825, 1831, 1834, 1837, 1843, 1851, 1855, 1856, 1859, 1862, 1881,
       1894, 1906, 1916, 1936, 1937, 1943, 1946, 1949, 1953, 1958, 1965,
       1977, 2000, 2020, 2023, 2046, 2054, 2063, 2069, 2078, 2085, 2092,
       2096, 2097, 2101, 2104, 2111, 2112, 2116, 2121, 2125, 2127, 2130,
       2136, 2146, 2147, 2149, 2163, 2187, 2188, 2193, 2197, 2198, 2227,
       2290, 2321, 2394, 2399, 2453, 2469, 2496, 2506, 2538, 2542, 2564,
       2584, 2617, 2641, 2642, 2655, 2659, 2668, 2673, 2685, 2687, 2690,
       2706, 2711, 2712, 2714, 2715, 2717, 2728, 2734, 2736, 2746, 2749,
       2766, 2769, 2771, 2774, 2784, 2786, 2790, 2791, 2799, 2802, 2809,
       2812, 2813, 2816, 2823, 2828, 2831, 2832, 2834, 2837, 2838, 2842,
       2845, 2848, 2850, 2852, 2859, 2862, 2867, 2868, 2882, 2897, 2912,
       2918, 2920, 2928, 2937, 2944, 2963, 2964, 2968, 2969, 2975, 2976,
       2983, 2993, 2998, 2999, 3008, 3012, 3020, 3022, 3025, 3027, 3033,
       3037, 3039, 3045, 3051, 3054, 3063, 3067, 3068, 3072, 3075, 3162,
       3286, 3608, 3640, 3681, 3686, 3752, 3769, 3929, 3966]),)
sample_indices [ 340  348  442  443  522  523  525  528  539  544  562  563  577  591
  600  606  634  638  652  729  744  782  811  813  849  860  999 1005
 1015 1045 1046 1096 1199 1214 1222 1316 1361 1369 1377 1394 1402 1409
 1420 1431 1435 1445 1487 1494 1525 1526 1531 1550 1608 1624 1625 1627
 1641 1654 1664 1673 1677 1680 1706 1707 1710 1724 1745 1752 1756 1757
 1763 1794 1802 1808 1813 1816 1817 1825 1831 1834 1837 1843 1851 1855
 1856 1859 1862 1881 1894 1906 1916 1936 1937 1943 1946 1949 1953 1958
 1965 1977 2000 2020 2023 2046 2054 2063 2069 2078 2085 2092 2096 2097
 2101 2104 2111 2112 2116 2121 2125 2127 2130 2136 2146 2147 2149 2163
 2187 2188 2193 2197 2198 2227 2290 2321 2394 2399 2453 2469 2496 2506
 2538 2542 2564 2584 2617 2641 2642 2655 2659 2668 2673 2685 2687 2690
 2706 2711 2712 2714 2715 2717 2728 2734 2736 2746 2749 2766 2769 2771
 2774 2784 2786 2790 2791 2799 2802 2809 2812 2813 2816 2823 2828 2831
 2832 2834 2837 2838 2842 2845 2848 2850 2852 2859 2862 2867 2868 2882
 2897 2912 2918 2920 2928 2937 2944 2963 2964 2968 2969 2975 2976 2983
 2993 2998 2999 3008 3012 3020 3022 3025 3027 3033 3037 3039 3045 3051
 3054 3063 3067 3068 3072 3075 3162 3286 3608 3640 3681 3686 3752 3769
 3929 3966]
subset_sample_indices [2092 1794 1369 1813 2085 3068 2712 3037 2687 2868 1817 2944 1855 2714
 3681 2394 2837 2097 3039  539 2020 2823 1906 2146  523  811 2920 1958
  577 2769 1627 1435 2668 2163 2617 2125 2641 2786 1710 1937 2706 1445
 3033  652 2069  606 2054  528 2096 3966 1707 2690 3640 2506 1953 1214
 3286 2715 2116 2774 1816 3020 1916 3162 2937 2711  634 3027 2197 1808
  522 2078 1680 2993 1608 1745  999 2812 2736 3008 1402  591  443 3067
  849 1046 3012 1677 1641 2198 2453  729 2816 2734 1625 2859 1837 1550
 2790 2831]
subset_img_paths ['scratch/val/n04285008/images/n04285008_432.JPEG', 'scratch/val/n04285008/images/n04285008_134.JPEG', 'scratch/val/n03977966/images/n03977966_149.JPEG', 'scratch/val/n04285008/images/n04285008_153.JPEG', 'scratch/val/n04285008/images/n04285008_425.JPEG', 'scratch/val/n06596364/images/n06596364_88.JPEG', 'scratch/val/n06596364/images/n06596364_172.JPEG', 'scratch/val/n06596364/images/n06596364_497.JPEG', 'scratch/val/n06596364/images/n06596364_147.JPEG', 'scratch/val/n06596364/images/n06596364_328.JPEG', 'scratch/val/n04285008/images/n04285008_157.JPEG', 'scratch/val/n06596364/images/n06596364_404.JPEG', 'scratch/val/n04285008/images/n04285008_195.JPEG', 'scratch/val/n06596364/images/n06596364_174.JPEG', 'scratch/val/n09428293/images/n09428293_261.JPEG', 'scratch/val/n04597913/images/n04597913_294.JPEG', 'scratch/val/n06596364/images/n06596364_297.JPEG', 'scratch/val/n04285008/images/n04285008_437.JPEG', 'scratch/val/n06596364/images/n06596364_499.JPEG', 'scratch/val/n01983481/images/n01983481_199.JPEG', 'scratch/val/n04285008/images/n04285008_360.JPEG', 'scratch/val/n06596364/images/n06596364_283.JPEG', 'scratch/val/n04285008/images/n04285008_246.JPEG', 'scratch/val/n04285008/images/n04285008_486.JPEG', 'scratch/val/n01983481/images/n01983481_183.JPEG', 'scratch/val/n01983481/images/n01983481_471.JPEG', 'scratch/val/n06596364/images/n06596364_380.JPEG', 'scratch/val/n04285008/images/n04285008_298.JPEG', 'scratch/val/n01983481/images/n01983481_237.JPEG', 'scratch/val/n06596364/images/n06596364_229.JPEG', 'scratch/val/n03977966/images/n03977966_407.JPEG', 'scratch/val/n03977966/images/n03977966_215.JPEG', 'scratch/val/n06596364/images/n06596364_128.JPEG', 'scratch/val/n04285008/images/n04285008_63.JPEG', 'scratch/val/n04597913/images/n04597913_77.JPEG', 'scratch/val/n04285008/images/n04285008_465.JPEG', 'scratch/val/n06596364/images/n06596364_101.JPEG', 'scratch/val/n06596364/images/n06596364_246.JPEG', 'scratch/val/n03977966/images/n03977966_490.JPEG', 'scratch/val/n04285008/images/n04285008_277.JPEG', 'scratch/val/n06596364/images/n06596364_166.JPEG', 'scratch/val/n03977966/images/n03977966_225.JPEG', 'scratch/val/n06596364/images/n06596364_493.JPEG', 'scratch/val/n01983481/images/n01983481_312.JPEG', 'scratch/val/n04285008/images/n04285008_409.JPEG', 'scratch/val/n01983481/images/n01983481_266.JPEG', 'scratch/val/n04285008/images/n04285008_394.JPEG', 'scratch/val/n01983481/images/n01983481_188.JPEG', 'scratch/val/n04285008/images/n04285008_436.JPEG', 'scratch/val/n12267677/images/n12267677_106.JPEG', 'scratch/val/n03977966/images/n03977966_487.JPEG', 'scratch/val/n06596364/images/n06596364_150.JPEG', 'scratch/val/n09428293/images/n09428293_220.JPEG', 'scratch/val/n04597913/images/n04597913_406.JPEG', 'scratch/val/n04285008/images/n04285008_293.JPEG', 'scratch/val/n02988304/images/n02988304_434.JPEG', 'scratch/val/n07920052/images/n07920052_306.JPEG', 'scratch/val/n06596364/images/n06596364_175.JPEG', 'scratch/val/n04285008/images/n04285008_456.JPEG', 'scratch/val/n06596364/images/n06596364_234.JPEG', 'scratch/val/n04285008/images/n04285008_156.JPEG', 'scratch/val/n06596364/images/n06596364_480.JPEG', 'scratch/val/n04285008/images/n04285008_256.JPEG', 'scratch/val/n07920052/images/n07920052_182.JPEG', 'scratch/val/n06596364/images/n06596364_397.JPEG', 'scratch/val/n06596364/images/n06596364_171.JPEG', 'scratch/val/n01983481/images/n01983481_294.JPEG', 'scratch/val/n06596364/images/n06596364_487.JPEG', 'scratch/val/n04285008/images/n04285008_97.JPEG', 'scratch/val/n04285008/images/n04285008_148.JPEG', 'scratch/val/n01983481/images/n01983481_182.JPEG', 'scratch/val/n04285008/images/n04285008_418.JPEG', 'scratch/val/n03977966/images/n03977966_460.JPEG', 'scratch/val/n06596364/images/n06596364_453.JPEG', 'scratch/val/n03977966/images/n03977966_388.JPEG', 'scratch/val/n03977966/images/n03977966_85.JPEG', 'scratch/val/n02988304/images/n02988304_219.JPEG', 'scratch/val/n06596364/images/n06596364_272.JPEG', 'scratch/val/n06596364/images/n06596364_196.JPEG', 'scratch/val/n06596364/images/n06596364_468.JPEG', 'scratch/val/n03977966/images/n03977966_182.JPEG', 'scratch/val/n01983481/images/n01983481_251.JPEG', 'scratch/val/n01983481/images/n01983481_103.JPEG', 'scratch/val/n06596364/images/n06596364_87.JPEG', 'scratch/val/n01983481/images/n01983481_69.JPEG', 'scratch/val/n02988304/images/n02988304_266.JPEG', 'scratch/val/n06596364/images/n06596364_472.JPEG', 'scratch/val/n03977966/images/n03977966_457.JPEG', 'scratch/val/n03977966/images/n03977966_421.JPEG', 'scratch/val/n04285008/images/n04285008_98.JPEG', 'scratch/val/n04597913/images/n04597913_353.JPEG', 'scratch/val/n01983481/images/n01983481_389.JPEG', 'scratch/val/n06596364/images/n06596364_276.JPEG', 'scratch/val/n06596364/images/n06596364_194.JPEG', 'scratch/val/n03977966/images/n03977966_405.JPEG', 'scratch/val/n06596364/images/n06596364_319.JPEG', 'scratch/val/n04285008/images/n04285008_177.JPEG', 'scratch/val/n03977966/images/n03977966_330.JPEG', 'scratch/val/n06596364/images/n06596364_250.JPEG', 'scratch/val/n06596364/images/n06596364_291.JPEG']
rows:  10
cols:  10
len imgs:  100
=> saved grid_9.pdf, accuracy = 0.100, nsamples = 240
=> grid 9 labels: [4 4 3 4 4 6 6 6 6 6 4 6 4 6 8 5 6 4 6 1 4 6 4 4 1 1 6 4 1 6 3 3 6 4 5 4 6
 6 3 4 6 3 6 1 4 1 4 1 4 9 3 6 8 5 4 2 7 6 4 6 4 6 4 7 6 6 1 6 4 4 1 4 3 6
 3 3 2 6 6 6 3 1 1 6 1 2 6 3 3 4 5 1 6 6 3 6 4 3 6 6]
Namespace(activation='leaky-relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[100], data='scratch', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=1, num_samples_per_class=25, pretrained='saved/scratch/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=True, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): BatchNorm1d(4096, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=100, bias=False)
)
=> loading checkpoint 'saved/scratch/model_best.pth.tar'
Namespace(activation='leaky-relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[100], data='scratch', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=1, num_samples_per_class=25, pretrained='saved/scratch/model_100.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=True, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): BatchNorm1d(4096, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=100, bias=False)
)
=> loading checkpoint 'saved/scratch/model_100.pth.tar'
Namespace(activation='leaky-relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[100], data='scratch', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=0, num_samples_per_class=25, pretrained='saved/scratch/model_100.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Linear(in_features=512, out_features=128, bias=True)
  )
  (classifier_final): Linear(in_features=128, out_features=100, bias=False)
)
=> loading checkpoint 'saved/scratch/model_100.pth.tar'
Namespace(activation='leaky-relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[100], data='scratch', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=2, num_samples_per_class=25, pretrained='saved/scratch/model_100.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): Linear(in_features=4096, out_features=4096, bias=True)
      (2): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=100, bias=False)
)
=> loading checkpoint 'saved/scratch/model_100.pth.tar'
Namespace(activation='leaky-relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[200], data='imagenet200', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=1, num_samples_per_class=25, pretrained='saved/scratch/model_100.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=False, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=200, bias=False)
)
=> loading checkpoint 'saved/scratch/model_100.pth.tar'
Namespace(activation='leaky-relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[200], data='imagenet200', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=1, num_samples_per_class=25, pretrained='saved/scratch/model_100.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=True, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): BatchNorm1d(4096, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=200, bias=False)
)
=> loading checkpoint 'saved/scratch/model_100.pth.tar'
=> loaded pre-trained model 'saved/scratch/model_100.pth.tar' (epoch 100)
=> using 1 GPUs.
Namespace(activation='leaky-relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='scratch', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=1, num_samples_per_class=25, pretrained='saved/scratch/model_100.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=True, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): BatchNorm1d(4096, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/scratch/model_100.pth.tar'
Namespace(activation='leaky-relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[200], data='scratch', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=1, num_samples_per_class=25, pretrained='saved/scratch/model_100.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=True, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): BatchNorm1d(4096, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=200, bias=False)
)
=> loading checkpoint 'saved/scratch/model_100.pth.tar'
=> loaded pre-trained model 'saved/scratch/model_100.pth.tar' (epoch 100)
=> using 1 GPUs.
Test: [  0/275]	Time  1.988 ( 1.988)
Test: [ 10/275]	Time  0.018 ( 0.202)
Test: [ 20/275]	Time  0.027 ( 0.122)
Test: [ 30/275]	Time  0.036 ( 0.093)
Test: [ 40/275]	Time  0.034 ( 0.077)
Test: [ 50/275]	Time  0.014 ( 0.068)
Test: [ 60/275]	Time  0.025 ( 0.062)
Test: [ 70/275]	Time  0.059 ( 0.058)
Test: [ 80/275]	Time  0.022 ( 0.055)
Test: [ 90/275]	Time  0.014 ( 0.052)
Test: [100/275]	Time  0.025 ( 0.050)
Test: [110/275]	Time  0.035 ( 0.048)
Test: [120/275]	Time  0.031 ( 0.047)
Test: [130/275]	Time  0.026 ( 0.046)
Test: [140/275]	Time  0.016 ( 0.045)
Test: [150/275]	Time  0.030 ( 0.044)
Test: [160/275]	Time  0.016 ( 0.043)
Test: [170/275]	Time  0.023 ( 0.043)
Test: [180/275]	Time  0.025 ( 0.042)
Test: [190/275]	Time  0.022 ( 0.042)
Test: [200/275]	Time  0.044 ( 0.041)
Test: [210/275]	Time  0.014 ( 0.041)
Test: [220/275]	Time  0.026 ( 0.040)
Test: [230/275]	Time  0.029 ( 0.040)
Test: [240/275]	Time  0.020 ( 0.039)
Test: [250/275]	Time  0.016 ( 0.039)
Test: [260/275]	Time  0.016 ( 0.039)
Test: [270/275]	Time  0.015 ( 0.038)
targets:  [0 0 0 ... 9 9 9]
preds:  [ 36  21 146 ...  75  77  77]
=> number of samples: 4400
=> number of unique assignments: 167
=> NMI: 28.200%
=> Adjusted NMI: 24.320%
=> Adjusted Rand-Index: 7.308%
=> Accuracy: 46.705%
label_i 99
preds [ 36  21 146 ...  75  77  77]
np.where(preds == label_i) (array([2635, 2664, 2684, 2726, 2727, 2739, 2755, 2765, 2779, 2787, 2788,
       2793, 2807, 2856, 2879, 2880, 2881, 2884, 2930, 2956, 2964, 3018,
       3032, 3048, 3053, 3058, 3059, 3065, 3073, 3496]),)
sample_indices [2635 2664 2684 2726 2727 2739 2755 2765 2779 2787 2788 2793 2807 2856
 2879 2880 2881 2884 2930 2956 2964 3018 3032 3048 3053 3058 3059 3065
 3073 3496]
subset_sample_indices [2684 3073 2856 2788 3059 3053 3065 2793 2884 3032 2739 2881 2779 2879
 3048 2964 2664 3496 2755 2727 2930 2956 2787 2765 3058]
subset_img_paths ['scratch/val/n06596364/images/n06596364_144.JPEG', 'scratch/val/n06596364/images/n06596364_93.JPEG', 'scratch/val/n06596364/images/n06596364_316.JPEG', 'scratch/val/n06596364/images/n06596364_248.JPEG', 'scratch/val/n06596364/images/n06596364_79.JPEG', 'scratch/val/n06596364/images/n06596364_73.JPEG', 'scratch/val/n06596364/images/n06596364_85.JPEG', 'scratch/val/n06596364/images/n06596364_253.JPEG', 'scratch/val/n06596364/images/n06596364_344.JPEG', 'scratch/val/n06596364/images/n06596364_492.JPEG', 'scratch/val/n06596364/images/n06596364_199.JPEG', 'scratch/val/n06596364/images/n06596364_341.JPEG', 'scratch/val/n06596364/images/n06596364_239.JPEG', 'scratch/val/n06596364/images/n06596364_339.JPEG', 'scratch/val/n06596364/images/n06596364_68.JPEG', 'scratch/val/n06596364/images/n06596364_424.JPEG', 'scratch/val/n06596364/images/n06596364_124.JPEG', 'scratch/val/n07920052/images/n07920052_76.JPEG', 'scratch/val/n06596364/images/n06596364_215.JPEG', 'scratch/val/n06596364/images/n06596364_187.JPEG', 'scratch/val/n06596364/images/n06596364_390.JPEG', 'scratch/val/n06596364/images/n06596364_416.JPEG', 'scratch/val/n06596364/images/n06596364_247.JPEG', 'scratch/val/n06596364/images/n06596364_225.JPEG', 'scratch/val/n06596364/images/n06596364_78.JPEG']
rows:  5
cols:  5
len imgs:  25
=> saved grid_0.pdf, accuracy = 0.933, nsamples = 30
=> grid 0 labels: [6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 7 6 6 6 6 6 6 6]
label_i 102
preds [ 36  21 146 ...  75  77  77]
np.where(preds == label_i) (array([ 807,  832,  889,  987, 1008, 1750, 1769, 1821, 2006, 3042, 3354,
       3522, 3523, 3534, 3539, 3541, 3542, 3544, 3547, 3548, 3551, 3553,
       3556, 3559, 3560, 3561, 3564, 3566, 3572, 3573, 3575, 3586, 3590,
       3592, 3597, 3604, 3605, 3606, 3611, 3613, 3615, 3621, 3622, 3627,
       3631, 3632, 3635, 3638, 3641, 3661, 3662, 3663, 3666, 3668, 3669,
       3670, 3672, 3674, 3679, 3680, 3690, 3695, 3696, 3697, 3698, 3702,
       3709, 3716, 3717, 3721, 3722, 3723, 3724, 3738, 3740, 3744, 3747,
       3749, 3761, 3763, 3764, 3771, 3772, 3775, 3776, 3780, 3782, 3783,
       3785, 3786, 3790, 3794, 3798, 3807, 3808, 3811, 3813, 3816, 3819,
       3824, 3825, 3829, 3831, 3832, 3834, 3835, 3836, 3837, 3840, 3841,
       3843, 3845, 3846, 3849, 3851, 3852, 3862, 3864, 3867, 3869, 3875,
       3880, 3882, 3888, 3898, 3899, 3905, 3908, 3910, 3917, 3919, 3923,
       3925, 3930, 3934, 3936, 3939, 3940, 3953, 3956, 3957, 3958]),)
sample_indices [ 807  832  889  987 1008 1750 1769 1821 2006 3042 3354 3522 3523 3534
 3539 3541 3542 3544 3547 3548 3551 3553 3556 3559 3560 3561 3564 3566
 3572 3573 3575 3586 3590 3592 3597 3604 3605 3606 3611 3613 3615 3621
 3622 3627 3631 3632 3635 3638 3641 3661 3662 3663 3666 3668 3669 3670
 3672 3674 3679 3680 3690 3695 3696 3697 3698 3702 3709 3716 3717 3721
 3722 3723 3724 3738 3740 3744 3747 3749 3761 3763 3764 3771 3772 3775
 3776 3780 3782 3783 3785 3786 3790 3794 3798 3807 3808 3811 3813 3816
 3819 3824 3825 3829 3831 3832 3834 3835 3836 3837 3840 3841 3843 3845
 3846 3849 3851 3852 3862 3864 3867 3869 3875 3880 3882 3888 3898 3899
 3905 3908 3910 3917 3919 3923 3925 3930 3934 3936 3939 3940 3953 3956
 3957 3958]
subset_sample_indices [3632 3717 3542 3672 3556 1821 3837 3957 3782 3825 3807 3905 2006 3819
 3956 3592 3775 3776 3851 3560 3697 3780 3690 3564 3696]
subset_img_paths ['scratch/val/n09428293/images/n09428293_212.JPEG', 'scratch/val/n09428293/images/n09428293_297.JPEG', 'scratch/val/n09428293/images/n09428293_122.JPEG', 'scratch/val/n09428293/images/n09428293_252.JPEG', 'scratch/val/n09428293/images/n09428293_136.JPEG', 'scratch/val/n04285008/images/n04285008_161.JPEG', 'scratch/val/n09428293/images/n09428293_417.JPEG', 'scratch/val/n09428293/images/n09428293_97.JPEG', 'scratch/val/n09428293/images/n09428293_362.JPEG', 'scratch/val/n09428293/images/n09428293_405.JPEG', 'scratch/val/n09428293/images/n09428293_387.JPEG', 'scratch/val/n09428293/images/n09428293_485.JPEG', 'scratch/val/n04285008/images/n04285008_346.JPEG', 'scratch/val/n09428293/images/n09428293_399.JPEG', 'scratch/val/n09428293/images/n09428293_96.JPEG', 'scratch/val/n09428293/images/n09428293_172.JPEG', 'scratch/val/n09428293/images/n09428293_355.JPEG', 'scratch/val/n09428293/images/n09428293_356.JPEG', 'scratch/val/n09428293/images/n09428293_431.JPEG', 'scratch/val/n09428293/images/n09428293_140.JPEG', 'scratch/val/n09428293/images/n09428293_277.JPEG', 'scratch/val/n09428293/images/n09428293_360.JPEG', 'scratch/val/n09428293/images/n09428293_270.JPEG', 'scratch/val/n09428293/images/n09428293_144.JPEG', 'scratch/val/n09428293/images/n09428293_276.JPEG']
rows:  5
cols:  5
len imgs:  25
=> saved grid_1.pdf, accuracy = 0.923, nsamples = 142
=> grid 1 labels: [8 8 8 8 8 4 8 8 8 8 8 8 4 8 8 8 8 8 8 8 8 8 8 8 8]
label_i 151
preds [ 36  21 146 ...  75  77  77]
np.where(preds == label_i) (array([ 611,  933, 1435, 1721, 1849, 2084, 2747, 3527, 3540, 3554, 3577,
       3582, 3589, 3610, 3637, 3643, 3648, 3665, 3703, 3727, 3737, 3741,
       3745, 3792, 3806, 3810, 3828, 3838, 3842, 3847, 3848, 3858, 3865,
       3881, 3883, 3894, 3900, 3916, 3933, 3944, 3948]),)
sample_indices [ 611  933 1435 1721 1849 2084 2747 3527 3540 3554 3577 3582 3589 3610
 3637 3643 3648 3665 3703 3727 3737 3741 3745 3792 3806 3810 3828 3838
 3842 3847 3848 3858 3865 3881 3883 3894 3900 3916 3933 3944 3948]
subset_sample_indices [3810 3894 3847 1849 3577 3858 3838 3582 3900 3848 3842 3737 3933 1435
 3948 3703 3643 3745 3648 3916 3540 3610 2084 3665 3637]
subset_img_paths ['scratch/val/n09428293/images/n09428293_390.JPEG', 'scratch/val/n09428293/images/n09428293_474.JPEG', 'scratch/val/n09428293/images/n09428293_427.JPEG', 'scratch/val/n04285008/images/n04285008_189.JPEG', 'scratch/val/n09428293/images/n09428293_157.JPEG', 'scratch/val/n09428293/images/n09428293_438.JPEG', 'scratch/val/n09428293/images/n09428293_418.JPEG', 'scratch/val/n09428293/images/n09428293_162.JPEG', 'scratch/val/n09428293/images/n09428293_480.JPEG', 'scratch/val/n09428293/images/n09428293_428.JPEG', 'scratch/val/n09428293/images/n09428293_422.JPEG', 'scratch/val/n09428293/images/n09428293_317.JPEG', 'scratch/val/n09428293/images/n09428293_73.JPEG', 'scratch/val/n03977966/images/n03977966_215.JPEG', 'scratch/val/n09428293/images/n09428293_88.JPEG', 'scratch/val/n09428293/images/n09428293_283.JPEG', 'scratch/val/n09428293/images/n09428293_223.JPEG', 'scratch/val/n09428293/images/n09428293_325.JPEG', 'scratch/val/n09428293/images/n09428293_228.JPEG', 'scratch/val/n09428293/images/n09428293_496.JPEG', 'scratch/val/n09428293/images/n09428293_120.JPEG', 'scratch/val/n09428293/images/n09428293_190.JPEG', 'scratch/val/n04285008/images/n04285008_424.JPEG', 'scratch/val/n09428293/images/n09428293_245.JPEG', 'scratch/val/n09428293/images/n09428293_217.JPEG']
rows:  5
cols:  5
len imgs:  25
=> saved grid_2.pdf, accuracy = 0.829, nsamples = 41
=> grid 2 labels: [8 8 8 4 8 8 8 8 8 8 8 8 8 3 8 8 8 8 8 8 8 8 4 8 8]
label_i 108
preds [ 36  21 146 ...  75  77  77]
np.where(preds == label_i) (array([2306, 2351, 2362, 2435, 2437, 2445, 2543, 2639, 3087, 3099, 3104,
       3119, 3120, 3136, 3141, 3169, 3176, 3215, 3229, 3230, 3245, 3249,
       3252, 3254, 3259, 3291, 3295, 3300, 3327, 3337, 3343, 3344, 3351,
       3361, 3384, 3394, 3412, 3418, 3446, 3453, 3463, 3466, 3473, 3491,
       3504, 4250]),)
sample_indices [2306 2351 2362 2435 2437 2445 2543 2639 3087 3099 3104 3119 3120 3136
 3141 3169 3176 3215 3229 3230 3245 3249 3252 3254 3259 3291 3295 3300
 3327 3337 3343 3344 3351 3361 3384 3394 3412 3418 3446 3453 3463 3466
 3473 3491 3504 4250]
subset_sample_indices [3291 3252 3327 2437 3104 3344 3337 3119 3245 3351 3343 3446 3473 2362
 4250 3229 3169 3300 3176 3466 3463 3087 3136 2445 3215]
subset_img_paths ['scratch/val/n07920052/images/n07920052_311.JPEG', 'scratch/val/n07920052/images/n07920052_272.JPEG', 'scratch/val/n07920052/images/n07920052_347.JPEG', 'scratch/val/n04597913/images/n04597913_337.JPEG', 'scratch/val/n07920052/images/n07920052_124.JPEG', 'scratch/val/n07920052/images/n07920052_364.JPEG', 'scratch/val/n07920052/images/n07920052_357.JPEG', 'scratch/val/n07920052/images/n07920052_139.JPEG', 'scratch/val/n07920052/images/n07920052_265.JPEG', 'scratch/val/n07920052/images/n07920052_371.JPEG', 'scratch/val/n07920052/images/n07920052_363.JPEG', 'scratch/val/n07920052/images/n07920052_466.JPEG', 'scratch/val/n07920052/images/n07920052_493.JPEG', 'scratch/val/n04597913/images/n04597913_262.JPEG', 'scratch/val/n12267677/images/n12267677_390.JPEG', 'scratch/val/n07920052/images/n07920052_249.JPEG', 'scratch/val/n07920052/images/n07920052_189.JPEG', 'scratch/val/n07920052/images/n07920052_320.JPEG', 'scratch/val/n07920052/images/n07920052_196.JPEG', 'scratch/val/n07920052/images/n07920052_486.JPEG', 'scratch/val/n07920052/images/n07920052_483.JPEG', 'scratch/val/n07920052/images/n07920052_107.JPEG', 'scratch/val/n07920052/images/n07920052_156.JPEG', 'scratch/val/n04597913/images/n04597913_345.JPEG', 'scratch/val/n07920052/images/n07920052_235.JPEG']
rows:  5
cols:  5
len imgs:  25
=> saved grid_3.pdf, accuracy = 0.804, nsamples = 46
=> grid 3 labels: [7 7 7 5 7 7 7 7 7 7 7 7 7 5 9 7 7 7 7 7 7 7 7 5 7]
label_i 76
preds [ 36  21 146 ...  75  77  77]
np.where(preds == label_i) (array([  14,   52,   72,   86,  425,  464,  572, 1392, 1775, 1856, 2000,
       2032, 2098, 2116, 2161, 2192, 2969, 3525, 3526, 3530, 3569, 3601,
       3616, 3624, 3636, 3644, 3675, 3676, 3688, 3694, 3707, 3718, 3729,
       3730, 3732, 3733, 3743, 3746, 3754, 3758, 3760, 3762, 3767, 3768,
       3787, 3788, 3795, 3800, 3805, 3820, 3830, 3871, 3877, 3903, 3906,
       3907, 3911, 3926, 3937, 3941, 3946, 3949, 3959]),)
sample_indices [  14   52   72   86  425  464  572 1392 1775 1856 2000 2032 2098 2116
 2161 2192 2969 3525 3526 3530 3569 3601 3616 3624 3636 3644 3675 3676
 3688 3694 3707 3718 3729 3730 3732 3733 3743 3746 3754 3758 3760 3762
 3767 3768 3787 3788 3795 3800 3805 3820 3830 3871 3877 3903 3906 3907
 3911 3926 3937 3941 3946 3949 3959]
subset_sample_indices [3768 3820 3959 3871 3729 3732 3694 3795 2032   72 3675 3946  425 2000
 3676 3730 3733 3788 3688 1392 2161 3616 3767 3906 3760]
subset_img_paths ['scratch/val/n09428293/images/n09428293_348.JPEG', 'scratch/val/n09428293/images/n09428293_400.JPEG', 'scratch/val/n09428293/images/n09428293_99.JPEG', 'scratch/val/n09428293/images/n09428293_451.JPEG', 'scratch/val/n09428293/images/n09428293_309.JPEG', 'scratch/val/n09428293/images/n09428293_312.JPEG', 'scratch/val/n09428293/images/n09428293_274.JPEG', 'scratch/val/n09428293/images/n09428293_375.JPEG', 'scratch/val/n04285008/images/n04285008_372.JPEG', 'scratch/val/n01443537/images/n01443537_172.JPEG', 'scratch/val/n09428293/images/n09428293_255.JPEG', 'scratch/val/n09428293/images/n09428293_86.JPEG', 'scratch/val/n01443537/images/n01443537_85.JPEG', 'scratch/val/n04285008/images/n04285008_340.JPEG', 'scratch/val/n09428293/images/n09428293_256.JPEG', 'scratch/val/n09428293/images/n09428293_310.JPEG', 'scratch/val/n09428293/images/n09428293_313.JPEG', 'scratch/val/n09428293/images/n09428293_368.JPEG', 'scratch/val/n09428293/images/n09428293_268.JPEG', 'scratch/val/n03977966/images/n03977966_172.JPEG', 'scratch/val/n04285008/images/n04285008_61.JPEG', 'scratch/val/n09428293/images/n09428293_196.JPEG', 'scratch/val/n09428293/images/n09428293_347.JPEG', 'scratch/val/n09428293/images/n09428293_486.JPEG', 'scratch/val/n09428293/images/n09428293_340.JPEG']
rows:  5
cols:  5
len imgs:  25
=> saved grid_4.pdf, accuracy = 0.730, nsamples = 63
=> grid 4 labels: [8 8 8 8 8 8 8 8 4 0 8 8 0 4 8 8 8 8 8 3 4 8 8 8 8]
label_i 169
preds [ 36  21 146 ...  75  77  77]
np.where(preds == label_i) (array([ 910,  942, 1002, 1014, 1128, 1156, 1184, 1193, 1235, 1241, 1265,
       1271, 1274, 1312, 1323, 1327, 1332, 1340, 1349, 1351, 1374, 1396,
       1410, 1419, 1443, 1449, 1469, 1480, 1483, 1486, 1488, 1490, 1498,
       1505, 1534, 1537, 1565, 1577, 1581, 1583, 1621, 1629, 1636, 1640,
       1643, 1659, 1660, 1671, 1672, 1699, 1700, 1705, 1715, 1735, 1737,
       1743, 1744, 1748, 1803, 2095, 2186, 2795, 3826]),)
sample_indices [ 910  942 1002 1014 1128 1156 1184 1193 1235 1241 1265 1271 1274 1312
 1323 1327 1332 1340 1349 1351 1374 1396 1410 1419 1443 1449 1469 1480
 1483 1486 1488 1490 1498 1505 1534 1537 1565 1577 1581 1583 1621 1629
 1636 1640 1643 1659 1660 1671 1672 1699 1700 1705 1715 1735 1737 1743
 1744 1748 1803 2095 2186 2795 3826]
subset_sample_indices [1640 1699 3826 1705 1498 1534 1486 1660 1271 1002 1469 2186 1128 1265
 1480 1505 1537 1659 1483 1193 1323 1410 1636 1737 1621]
subset_img_paths ['scratch/val/n03977966/images/n03977966_420.JPEG', 'scratch/val/n03977966/images/n03977966_479.JPEG', 'scratch/val/n09428293/images/n09428293_406.JPEG', 'scratch/val/n03977966/images/n03977966_485.JPEG', 'scratch/val/n03977966/images/n03977966_278.JPEG', 'scratch/val/n03977966/images/n03977966_314.JPEG', 'scratch/val/n03977966/images/n03977966_266.JPEG', 'scratch/val/n03977966/images/n03977966_440.JPEG', 'scratch/val/n02988304/images/n02988304_491.JPEG', 'scratch/val/n02988304/images/n02988304_222.JPEG', 'scratch/val/n03977966/images/n03977966_249.JPEG', 'scratch/val/n04285008/images/n04285008_86.JPEG', 'scratch/val/n02988304/images/n02988304_348.JPEG', 'scratch/val/n02988304/images/n02988304_485.JPEG', 'scratch/val/n03977966/images/n03977966_260.JPEG', 'scratch/val/n03977966/images/n03977966_285.JPEG', 'scratch/val/n03977966/images/n03977966_317.JPEG', 'scratch/val/n03977966/images/n03977966_439.JPEG', 'scratch/val/n03977966/images/n03977966_263.JPEG', 'scratch/val/n02988304/images/n02988304_413.JPEG', 'scratch/val/n03977966/images/n03977966_103.JPEG', 'scratch/val/n03977966/images/n03977966_190.JPEG', 'scratch/val/n03977966/images/n03977966_416.JPEG', 'scratch/val/n03977966/images/n03977966_77.JPEG', 'scratch/val/n03977966/images/n03977966_401.JPEG']
rows:  5
cols:  5
len imgs:  25
=> saved grid_5.pdf, accuracy = 0.698, nsamples = 63
=> grid 5 labels: [3 3 8 3 3 3 3 3 2 2 3 4 2 2 3 3 3 3 3 2 3 3 3 3 3]
label_i 147
preds [ 36  21 146 ...  75  77  77]
np.where(preds == label_i) (array([ 591,  779,  815, 1222, 1259, 2229, 2265, 2469, 2538, 2642, 2685,
       2752, 2754, 2776, 2799, 2831, 2837, 2847, 2858, 2872, 2898, 2953,
       2981, 2983, 2992, 2997, 3051, 3068, 3071, 3072, 3681]),)
sample_indices [ 591  779  815 1222 1259 2229 2265 2469 2538 2642 2685 2752 2754 2776
 2799 2831 2837 2847 2858 2872 2898 2953 2981 2983 2992 2997 3051 3068
 3071 3072 3681]
subset_sample_indices [ 815 3072 2776 2685 3068 2997 2981 2752 2847 2983 2229 2837 2538 2799
 2992 2898  779 3681 2265 1259 2858 3071 2872 2642 2469]
subset_img_paths ['scratch/val/n01983481/images/n01983481_475.JPEG', 'scratch/val/n06596364/images/n06596364_92.JPEG', 'scratch/val/n06596364/images/n06596364_236.JPEG', 'scratch/val/n06596364/images/n06596364_145.JPEG', 'scratch/val/n06596364/images/n06596364_88.JPEG', 'scratch/val/n06596364/images/n06596364_457.JPEG', 'scratch/val/n06596364/images/n06596364_441.JPEG', 'scratch/val/n06596364/images/n06596364_212.JPEG', 'scratch/val/n06596364/images/n06596364_307.JPEG', 'scratch/val/n06596364/images/n06596364_443.JPEG', 'scratch/val/n04597913/images/n04597913_129.JPEG', 'scratch/val/n06596364/images/n06596364_297.JPEG', 'scratch/val/n04597913/images/n04597913_438.JPEG', 'scratch/val/n06596364/images/n06596364_259.JPEG', 'scratch/val/n06596364/images/n06596364_452.JPEG', 'scratch/val/n06596364/images/n06596364_358.JPEG', 'scratch/val/n01983481/images/n01983481_439.JPEG', 'scratch/val/n09428293/images/n09428293_261.JPEG', 'scratch/val/n04597913/images/n04597913_165.JPEG', 'scratch/val/n02988304/images/n02988304_479.JPEG', 'scratch/val/n06596364/images/n06596364_318.JPEG', 'scratch/val/n06596364/images/n06596364_91.JPEG', 'scratch/val/n06596364/images/n06596364_332.JPEG', 'scratch/val/n06596364/images/n06596364_102.JPEG', 'scratch/val/n04597913/images/n04597913_369.JPEG']
rows:  5
cols:  5
len imgs:  25
=> saved grid_6.pdf, accuracy = 0.677, nsamples = 31
=> grid 6 labels: [1 6 6 6 6 6 6 6 6 6 5 6 5 6 6 6 1 8 5 2 6 6 6 6 5]
label_i 144
preds [ 36  21 146 ...  75  77  77]
np.where(preds == label_i) (array([2317, 2461, 2671, 2674, 2695, 2716, 2723, 2758, 2806, 2835, 2840,
       2873, 2887, 2922, 2943, 2961, 2966, 2973, 2991, 3014, 3972, 4026,
       4148, 4153, 4201, 4229, 4274]),)
sample_indices [2317 2461 2671 2674 2695 2716 2723 2758 2806 2835 2840 2873 2887 2922
 2943 2961 2966 2973 2991 3014 3972 4026 4148 4153 4201 4229 4274]
subset_sample_indices [2671 4201 2943 2973 2716 2873 4153 2922 3014 3972 2966 2461 2840 4274
 4229 2806 2723 2695 2991 2835 2758 4148 2674 2317 4026]
subset_img_paths ['scratch/val/n06596364/images/n06596364_131.JPEG', 'scratch/val/n12267677/images/n12267677_341.JPEG', 'scratch/val/n06596364/images/n06596364_403.JPEG', 'scratch/val/n06596364/images/n06596364_433.JPEG', 'scratch/val/n06596364/images/n06596364_176.JPEG', 'scratch/val/n06596364/images/n06596364_333.JPEG', 'scratch/val/n12267677/images/n12267677_293.JPEG', 'scratch/val/n06596364/images/n06596364_382.JPEG', 'scratch/val/n06596364/images/n06596364_474.JPEG', 'scratch/val/n12267677/images/n12267677_112.JPEG', 'scratch/val/n06596364/images/n06596364_426.JPEG', 'scratch/val/n04597913/images/n04597913_361.JPEG', 'scratch/val/n06596364/images/n06596364_300.JPEG', 'scratch/val/n12267677/images/n12267677_414.JPEG', 'scratch/val/n12267677/images/n12267677_369.JPEG', 'scratch/val/n06596364/images/n06596364_266.JPEG', 'scratch/val/n06596364/images/n06596364_183.JPEG', 'scratch/val/n06596364/images/n06596364_155.JPEG', 'scratch/val/n06596364/images/n06596364_451.JPEG', 'scratch/val/n06596364/images/n06596364_295.JPEG', 'scratch/val/n06596364/images/n06596364_218.JPEG', 'scratch/val/n12267677/images/n12267677_288.JPEG', 'scratch/val/n06596364/images/n06596364_134.JPEG', 'scratch/val/n04597913/images/n04597913_217.JPEG', 'scratch/val/n12267677/images/n12267677_166.JPEG']
rows:  5
cols:  5
len imgs:  25
=> saved grid_7.pdf, accuracy = 0.667, nsamples = 27
=> grid 7 labels: [6 9 6 6 6 6 9 6 6 9 6 5 6 9 9 6 6 6 6 6 6 9 6 5 9]
label_i 131
preds [ 36  21 146 ...  75  77  77]
np.where(preds == label_i) (array([1376, 1393, 1398, 1402, 1404, 1409, 1415, 1418, 1440, 1454, 1526,
       1528, 1543, 1553, 1561, 1572, 1579, 1585, 1589, 1596, 1708, 1718,
       1723, 1815, 1816, 1855, 1864, 1866, 1893, 1925, 1953, 2085, 2146,
       2968, 3814]),)
sample_indices [1376 1393 1398 1402 1404 1409 1415 1418 1440 1454 1526 1528 1543 1553
 1561 1572 1579 1585 1589 1596 1708 1718 1723 1815 1816 1855 1864 1866
 1893 1925 1953 2085 2146 2968 3814]
subset_sample_indices [1925 1708 1579 1893 1723 1572 1526 1398 1528 1866 1855 3814 2146 1864
 1953 1440 1553 1409 1585 1561 2085 1816 1393 1543 1415]
subset_img_paths ['scratch/val/n04285008/images/n04285008_265.JPEG', 'scratch/val/n03977966/images/n03977966_488.JPEG', 'scratch/val/n03977966/images/n03977966_359.JPEG', 'scratch/val/n04285008/images/n04285008_233.JPEG', 'scratch/val/n03977966/images/n03977966_63.JPEG', 'scratch/val/n03977966/images/n03977966_352.JPEG', 'scratch/val/n03977966/images/n03977966_306.JPEG', 'scratch/val/n03977966/images/n03977966_178.JPEG', 'scratch/val/n03977966/images/n03977966_308.JPEG', 'scratch/val/n04285008/images/n04285008_206.JPEG', 'scratch/val/n04285008/images/n04285008_195.JPEG', 'scratch/val/n09428293/images/n09428293_394.JPEG', 'scratch/val/n04285008/images/n04285008_486.JPEG', 'scratch/val/n04285008/images/n04285008_204.JPEG', 'scratch/val/n04285008/images/n04285008_293.JPEG', 'scratch/val/n03977966/images/n03977966_220.JPEG', 'scratch/val/n03977966/images/n03977966_333.JPEG', 'scratch/val/n03977966/images/n03977966_189.JPEG', 'scratch/val/n03977966/images/n03977966_365.JPEG', 'scratch/val/n03977966/images/n03977966_341.JPEG', 'scratch/val/n04285008/images/n04285008_425.JPEG', 'scratch/val/n04285008/images/n04285008_156.JPEG', 'scratch/val/n03977966/images/n03977966_173.JPEG', 'scratch/val/n03977966/images/n03977966_323.JPEG', 'scratch/val/n03977966/images/n03977966_195.JPEG']
rows:  5
cols:  5
len imgs:  25
=> saved grid_8.pdf, accuracy = 0.657, nsamples = 35
=> grid 8 labels: [4 3 3 4 3 3 3 3 3 4 4 8 4 4 4 3 3 3 3 3 4 4 3 3 3]
label_i 146
preds [ 36  21 146 ...  75  77  77]
np.where(preds == label_i) (array([   2,   16,   19,   35,   37,   89,  133,  158,  233,  235,  281,
        284,  304,  349,  357,  366,  381,  393,  405,  415,  432,  456,
        699, 1177, 1800, 1887, 2436, 2555, 3097, 3397, 3667, 4118]),)
sample_indices [   2   16   19   35   37   89  133  158  233  235  281  284  304  349
  357  366  381  393  405  415  432  456  699 1177 1800 1887 2436 2555
 3097 3397 3667 4118]
subset_sample_indices [ 284  699  281   19  381  357 3097 2436  432  349 1800   89  393  233
 3667 1887 1177   16 4118  133   37  405 3397  415  235]
subset_img_paths ['scratch/val/n01443537/images/n01443537_384.JPEG', 'scratch/val/n01983481/images/n01983481_359.JPEG', 'scratch/val/n01443537/images/n01443537_381.JPEG', 'scratch/val/n01443537/images/n01443537_119.JPEG', 'scratch/val/n01443537/images/n01443537_481.JPEG', 'scratch/val/n01443537/images/n01443537_457.JPEG', 'scratch/val/n07920052/images/n07920052_117.JPEG', 'scratch/val/n04597913/images/n04597913_336.JPEG', 'scratch/val/n01443537/images/n01443537_92.JPEG', 'scratch/val/n01443537/images/n01443537_449.JPEG', 'scratch/val/n04285008/images/n04285008_140.JPEG', 'scratch/val/n01443537/images/n01443537_189.JPEG', 'scratch/val/n01443537/images/n01443537_493.JPEG', 'scratch/val/n01443537/images/n01443537_333.JPEG', 'scratch/val/n09428293/images/n09428293_247.JPEG', 'scratch/val/n04285008/images/n04285008_227.JPEG', 'scratch/val/n02988304/images/n02988304_397.JPEG', 'scratch/val/n01443537/images/n01443537_116.JPEG', 'scratch/val/n12267677/images/n12267677_258.JPEG', 'scratch/val/n01443537/images/n01443537_233.JPEG', 'scratch/val/n01443537/images/n01443537_137.JPEG', 'scratch/val/n01443537/images/n01443537_65.JPEG', 'scratch/val/n07920052/images/n07920052_417.JPEG', 'scratch/val/n01443537/images/n01443537_75.JPEG', 'scratch/val/n01443537/images/n01443537_335.JPEG']
rows:  5
cols:  5
len imgs:  25
=> saved grid_9.pdf, accuracy = 0.656, nsamples = 32
=> grid 9 labels: [0 1 0 0 0 0 7 5 0 0 4 0 0 0 8 4 2 0 9 0 0 0 7 0 0]
Namespace(activation='leaky-relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='cifar10', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=1, num_samples_per_class=25, pretrained='saved/cifar10/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=True, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): BatchNorm1d(4096, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/cifar10/model_best.pth.tar'
=> loaded pre-trained model 'saved/cifar10/model_best.pth.tar' (epoch 97)
=> using 1 GPUs.
Namespace(activation='leaky-relu', arch='resnet18', batch_size=16, cls_num=0, cls_size=[10], data='cifar10/cifar10', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=1, num_samples_per_class=25, pretrained='saved/cifar10/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=True, workers=4)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Sequential(
      (0): Linear(in_features=512, out_features=4096, bias=True)
      (1): BatchNorm1d(4096, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/cifar10/model_best.pth.tar'
=> loaded pre-trained model 'saved/cifar10/model_best.pth.tar' (epoch 97)
=> using 1 GPUs.
Test: [  0/625]	Time  2.026 ( 2.026)
Test: [ 10/625]	Time  0.015 ( 0.206)
Test: [ 20/625]	Time  0.060 ( 0.121)
Test: [ 30/625]	Time  0.021 ( 0.091)
Test: [ 40/625]	Time  0.056 ( 0.078)
Test: [ 50/625]	Time  0.026 ( 0.069)
Test: [ 60/625]	Time  0.021 ( 0.062)
Test: [ 70/625]	Time  0.081 ( 0.058)
Test: [ 80/625]	Time  0.027 ( 0.055)
Test: [ 90/625]	Time  0.028 ( 0.052)
Test: [100/625]	Time  0.030 ( 0.050)
Test: [110/625]	Time  0.047 ( 0.048)
Test: [120/625]	Time  0.027 ( 0.047)
Test: [130/625]	Time  0.024 ( 0.045)
Test: [140/625]	Time  0.032 ( 0.045)
Test: [150/625]	Time  0.026 ( 0.044)
Test: [160/625]	Time  0.033 ( 0.043)
Test: [170/625]	Time  0.015 ( 0.042)
Test: [180/625]	Time  0.059 ( 0.042)
Test: [190/625]	Time  0.014 ( 0.041)
Test: [200/625]	Time  0.080 ( 0.040)
Test: [210/625]	Time  0.028 ( 0.040)
Test: [220/625]	Time  0.028 ( 0.039)
Test: [230/625]	Time  0.017 ( 0.039)
Test: [240/625]	Time  0.064 ( 0.039)
Test: [250/625]	Time  0.052 ( 0.038)
Test: [260/625]	Time  0.021 ( 0.038)
Test: [270/625]	Time  0.022 ( 0.038)
Test: [280/625]	Time  0.041 ( 0.038)
Test: [290/625]	Time  0.032 ( 0.037)
Test: [300/625]	Time  0.016 ( 0.037)
Test: [310/625]	Time  0.020 ( 0.037)
Test: [320/625]	Time  0.036 ( 0.037)
Test: [330/625]	Time  0.020 ( 0.037)
Test: [340/625]	Time  0.024 ( 0.036)
Test: [350/625]	Time  0.032 ( 0.036)
Test: [360/625]	Time  0.017 ( 0.036)
Test: [370/625]	Time  0.017 ( 0.036)
Test: [380/625]	Time  0.032 ( 0.036)
Test: [390/625]	Time  0.028 ( 0.036)
Test: [400/625]	Time  0.023 ( 0.036)
Test: [410/625]	Time  0.016 ( 0.036)
Test: [420/625]	Time  0.035 ( 0.035)
Test: [430/625]	Time  0.020 ( 0.035)
Test: [440/625]	Time  0.016 ( 0.035)
Test: [450/625]	Time  0.035 ( 0.035)
Test: [460/625]	Time  0.025 ( 0.035)
Test: [470/625]	Time  0.014 ( 0.035)
Test: [480/625]	Time  0.022 ( 0.035)
Test: [490/625]	Time  0.062 ( 0.035)
Test: [500/625]	Time  0.014 ( 0.035)
Test: [510/625]	Time  0.032 ( 0.035)
Test: [520/625]	Time  0.028 ( 0.035)
Test: [530/625]	Time  0.016 ( 0.034)
Test: [540/625]	Time  0.062 ( 0.034)
Test: [550/625]	Time  0.022 ( 0.034)
Test: [560/625]	Time  0.028 ( 0.034)
Test: [570/625]	Time  0.063 ( 0.034)
Test: [580/625]	Time  0.028 ( 0.034)
Test: [590/625]	Time  0.034 ( 0.034)
Test: [600/625]	Time  0.027 ( 0.034)
Test: [610/625]	Time  0.037 ( 0.034)
Test: [620/625]	Time  0.027 ( 0.034)
targets:  [0 0 0 ... 9 9 9]
preds:  [9 9 8 ... 0 0 0]
=> number of samples: 10000
=> number of unique assignments: 10
=> NMI: 26.016%
=> Adjusted NMI: 25.881%
=> Adjusted Rand-Index: 16.453%
=> Accuracy: 30.850%
label_i 2
preds [9 9 8 ... 0 0 0]
np.where(preds == label_i) (array([ 252,  553,  792,  842, 2002, 2019, 2035, 2036, 2056, 2080, 2087,
       2092, 2123, 2133, 2140, 2141, 2160, 2165, 2172, 2174, 2213, 2226,
       2228, 2232, 2234, 2240, 2251, 2252, 2275, 2279, 2283, 2298, 2300,
       2319, 2323, 2336, 2349, 2353, 2365, 2366, 2372, 2384, 2422, 2441,
       2443, 2456, 2475, 2489, 2508, 2524, 2545, 2547, 2548, 2559, 2576,
       2583, 2602, 2607, 2610, 2621, 2628, 2630, 2633, 2671, 2674, 2675,
       2683, 2700, 2730, 2744, 2745, 2769, 2789, 2827, 2835, 2840, 2856,
       2878, 2905, 2915, 2952, 2957, 2970, 2972, 2974, 2975, 2978, 2983,
       2990, 2998, 3003, 3010, 3023, 3033, 3059, 3061, 3066, 3116, 3165,
       3177, 3185, 3189, 3224, 3228, 3233, 3235, 3249, 3298, 3338, 3345,
       3348, 3361, 3388, 3391, 3397, 3407, 3424, 3441, 3444, 3468, 3491,
       3494, 3499, 3536, 3547, 3548, 3580, 3583, 3590, 3602, 3621, 3627,
       3650, 3664, 3669, 3685, 3691, 3698, 3726, 3745, 3750, 3754, 3769,
       3773, 3778, 3781, 3799, 3809, 3811, 3816, 3826, 3842, 3847, 3857,
       3871, 3878, 3883, 3896, 3914, 3919, 3946, 3959, 3960, 3961, 3976,
       3994, 4002, 4013, 4018, 4035, 4037, 4041, 4047, 4061, 4076, 4077,
       4079, 4081, 4083, 4086, 4100, 4107, 4109, 4129, 4130, 4132, 4134,
       4136, 4139, 4140, 4144, 4146, 4151, 4153, 4157, 4159, 4169, 4177,
       4184, 4190, 4199, 4201, 4207, 4224, 4226, 4233, 4234, 4239, 4245,
       4246, 4249, 4259, 4260, 4276, 4280, 4284, 4285, 4293, 4305, 4308,
       4312, 4324, 4329, 4337, 4343, 4347, 4348, 4352, 4355, 4356, 4357,
       4358, 4361, 4372, 4379, 4387, 4404, 4406, 4411, 4414, 4419, 4440,
       4442, 4443, 4446, 4448, 4450, 4466, 4467, 4472, 4475, 4481, 4483,
       4492, 4505, 4508, 4516, 4518, 4519, 4523, 4526, 4527, 4528, 4533,
       4543, 4545, 4548, 4554, 4561, 4574, 4578, 4581, 4582, 4585, 4586,
       4598, 4601, 4604, 4607, 4616, 4627, 4629, 4633, 4636, 4639, 4650,
       4653, 4655, 4660, 4662, 4667, 4668, 4673, 4674, 4680, 4687, 4688,
       4691, 4695, 4697, 4700, 4707, 4708, 4709, 4715, 4721, 4736, 4740,
       4743, 4752, 4753, 4755, 4760, 4762, 4766, 4772, 4773, 4780, 4782,
       4784, 4787, 4793, 4797, 4800, 4806, 4808, 4809, 4818, 4832, 4842,
       4843, 4846, 4848, 4849, 4851, 4854, 4856, 4865, 4868, 4870, 4875,
       4876, 4880, 4889, 4896, 4897, 4913, 4914, 4931, 4939, 4946, 4947,
       4963, 4966, 4970, 4972, 4974, 4975, 4985, 4998, 4999, 5038, 5041,
       5046, 5063, 5074, 5137, 5163, 5235, 5382, 5392, 5432, 5445, 5467,
       5483, 5500, 5505, 5541, 5600, 5620, 5625, 5693, 5702, 5704, 5726,
       5734, 5781, 5786, 5799, 5804, 5811, 5819, 5842, 5843, 5864, 5886,
       5925, 5994, 6000, 6003, 6004, 6005, 6007, 6008, 6012, 6013, 6014,
       6015, 6017, 6019, 6020, 6021, 6024, 6031, 6032, 6033, 6034, 6035,
       6038, 6039, 6040, 6041, 6042, 6043, 6044, 6045, 6048, 6051, 6052,
       6053, 6054, 6055, 6056, 6057, 6058, 6059, 6064, 6067, 6069, 6071,
       6073, 6080, 6087, 6092, 6093, 6096, 6097, 6098, 6101, 6103, 6105,
       6106, 6107, 6111, 6112, 6113, 6114, 6116, 6126, 6128, 6131, 6136,
       6141, 6142, 6143, 6144, 6148, 6149, 6150, 6151, 6155, 6159, 6162,
       6163, 6171, 6174, 6176, 6177, 6178, 6179, 6180, 6181, 6182, 6183,
       6185, 6189, 6191, 6192, 6193, 6194, 6195, 6196, 6199, 6201, 6212,
       6214, 6217, 6220, 6222, 6223, 6225, 6229, 6230, 6232, 6235, 6236,
       6237, 6239, 6244, 6245, 6246, 6253, 6255, 6256, 6258, 6259, 6260,
       6261, 6262, 6263, 6264, 6266, 6268, 6270, 6272, 6273, 6275, 6277,
       6278, 6279, 6282, 6283, 6285, 6288, 6292, 6293, 6294, 6297, 6300,
       6301, 6306, 6307, 6308, 6310, 6313, 6315, 6317, 6318, 6319, 6320,
       6321, 6322, 6323, 6327, 6328, 6329, 6332, 6338, 6340, 6346, 6347,
       6348, 6349, 6350, 6351, 6353, 6354, 6355, 6360, 6364, 6365, 6371,
       6374, 6375, 6376, 6379, 6381, 6384, 6385, 6388, 6390, 6392, 6398,
       6401, 6402, 6406, 6407, 6409, 6411, 6414, 6418, 6419, 6421, 6423,
       6426, 6428, 6433, 6436, 6437, 6442, 6446, 6448, 6449, 6451, 6453,
       6454, 6455, 6456, 6457, 6459, 6462, 6463, 6465, 6469, 6471, 6476,
       6478, 6479, 6483, 6486, 6488, 6491, 6492, 6493, 6494, 6500, 6502,
       6504, 6505, 6510, 6512, 6513, 6514, 6518, 6522, 6523, 6524, 6527,
       6530, 6532, 6533, 6535, 6540, 6541, 6542, 6544, 6546, 6547, 6548,
       6551, 6555, 6557, 6559, 6562, 6563, 6565, 6567, 6569, 6571, 6573,
       6580, 6581, 6590, 6592, 6593, 6594, 6596, 6597, 6598, 6601, 6602,
       6603, 6604, 6611, 6614, 6615, 6620, 6621, 6622, 6623, 6624, 6625,
       6627, 6628, 6630, 6636, 6638, 6640, 6642, 6643, 6645, 6650, 6652,
       6654, 6655, 6656, 6660, 6664, 6665, 6670, 6674, 6677, 6678, 6680,
       6681, 6685, 6688, 6689, 6692, 6693, 6694, 6695, 6696, 6698, 6699,
       6700, 6702, 6704, 6709, 6711, 6713, 6714, 6720, 6721, 6725, 6731,
       6735, 6736, 6737, 6739, 6744, 6747, 6748, 6749, 6751, 6755, 6760,
       6761, 6763, 6764, 6768, 6769, 6771, 6773, 6774, 6775, 6776, 6777,
       6778, 6786, 6787, 6789, 6793, 6794, 6797, 6801, 6803, 6804, 6807,
       6809, 6812, 6813, 6814, 6817, 6821, 6822, 6829, 6830, 6834, 6836,
       6838, 6840, 6843, 6845, 6847, 6849, 6852, 6854, 6855, 6862, 6867,
       6869, 6872, 6875, 6877, 6878, 6879, 6880, 6881, 6882, 6884, 6885,
       6889, 6890, 6896, 6904, 6905, 6906, 6907, 6908, 6909, 6912, 6914,
       6916, 6917, 6918, 6919, 6920, 6921, 6922, 6923, 6926, 6929, 6931,
       6933, 6936, 6940, 6942, 6944, 6948, 6952, 6953, 6957, 6958, 6959,
       6960, 6961, 6964, 6968, 6970, 6972, 6973, 6977, 6979, 6983, 6992,
       6994, 6996, 6997, 7016, 7031, 7042, 7248, 7272, 7284, 7385, 7402,
       7487, 7512, 7519, 7546, 7683, 7774, 7825, 7866, 7962, 7971]),)
sample_indices [ 252  553  792  842 2002 2019 2035 2036 2056 2080 2087 2092 2123 2133
 2140 2141 2160 2165 2172 2174 2213 2226 2228 2232 2234 2240 2251 2252
 2275 2279 2283 2298 2300 2319 2323 2336 2349 2353 2365 2366 2372 2384
 2422 2441 2443 2456 2475 2489 2508 2524 2545 2547 2548 2559 2576 2583
 2602 2607 2610 2621 2628 2630 2633 2671 2674 2675 2683 2700 2730 2744
 2745 2769 2789 2827 2835 2840 2856 2878 2905 2915 2952 2957 2970 2972
 2974 2975 2978 2983 2990 2998 3003 3010 3023 3033 3059 3061 3066 3116
 3165 3177 3185 3189 3224 3228 3233 3235 3249 3298 3338 3345 3348 3361
 3388 3391 3397 3407 3424 3441 3444 3468 3491 3494 3499 3536 3547 3548
 3580 3583 3590 3602 3621 3627 3650 3664 3669 3685 3691 3698 3726 3745
 3750 3754 3769 3773 3778 3781 3799 3809 3811 3816 3826 3842 3847 3857
 3871 3878 3883 3896 3914 3919 3946 3959 3960 3961 3976 3994 4002 4013
 4018 4035 4037 4041 4047 4061 4076 4077 4079 4081 4083 4086 4100 4107
 4109 4129 4130 4132 4134 4136 4139 4140 4144 4146 4151 4153 4157 4159
 4169 4177 4184 4190 4199 4201 4207 4224 4226 4233 4234 4239 4245 4246
 4249 4259 4260 4276 4280 4284 4285 4293 4305 4308 4312 4324 4329 4337
 4343 4347 4348 4352 4355 4356 4357 4358 4361 4372 4379 4387 4404 4406
 4411 4414 4419 4440 4442 4443 4446 4448 4450 4466 4467 4472 4475 4481
 4483 4492 4505 4508 4516 4518 4519 4523 4526 4527 4528 4533 4543 4545
 4548 4554 4561 4574 4578 4581 4582 4585 4586 4598 4601 4604 4607 4616
 4627 4629 4633 4636 4639 4650 4653 4655 4660 4662 4667 4668 4673 4674
 4680 4687 4688 4691 4695 4697 4700 4707 4708 4709 4715 4721 4736 4740
 4743 4752 4753 4755 4760 4762 4766 4772 4773 4780 4782 4784 4787 4793
 4797 4800 4806 4808 4809 4818 4832 4842 4843 4846 4848 4849 4851 4854
 4856 4865 4868 4870 4875 4876 4880 4889 4896 4897 4913 4914 4931 4939
 4946 4947 4963 4966 4970 4972 4974 4975 4985 4998 4999 5038 5041 5046
 5063 5074 5137 5163 5235 5382 5392 5432 5445 5467 5483 5500 5505 5541
 5600 5620 5625 5693 5702 5704 5726 5734 5781 5786 5799 5804 5811 5819
 5842 5843 5864 5886 5925 5994 6000 6003 6004 6005 6007 6008 6012 6013
 6014 6015 6017 6019 6020 6021 6024 6031 6032 6033 6034 6035 6038 6039
 6040 6041 6042 6043 6044 6045 6048 6051 6052 6053 6054 6055 6056 6057
 6058 6059 6064 6067 6069 6071 6073 6080 6087 6092 6093 6096 6097 6098
 6101 6103 6105 6106 6107 6111 6112 6113 6114 6116 6126 6128 6131 6136
 6141 6142 6143 6144 6148 6149 6150 6151 6155 6159 6162 6163 6171 6174
 6176 6177 6178 6179 6180 6181 6182 6183 6185 6189 6191 6192 6193 6194
 6195 6196 6199 6201 6212 6214 6217 6220 6222 6223 6225 6229 6230 6232
 6235 6236 6237 6239 6244 6245 6246 6253 6255 6256 6258 6259 6260 6261
 6262 6263 6264 6266 6268 6270 6272 6273 6275 6277 6278 6279 6282 6283
 6285 6288 6292 6293 6294 6297 6300 6301 6306 6307 6308 6310 6313 6315
 6317 6318 6319 6320 6321 6322 6323 6327 6328 6329 6332 6338 6340 6346
 6347 6348 6349 6350 6351 6353 6354 6355 6360 6364 6365 6371 6374 6375
 6376 6379 6381 6384 6385 6388 6390 6392 6398 6401 6402 6406 6407 6409
 6411 6414 6418 6419 6421 6423 6426 6428 6433 6436 6437 6442 6446 6448
 6449 6451 6453 6454 6455 6456 6457 6459 6462 6463 6465 6469 6471 6476
 6478 6479 6483 6486 6488 6491 6492 6493 6494 6500 6502 6504 6505 6510
 6512 6513 6514 6518 6522 6523 6524 6527 6530 6532 6533 6535 6540 6541
 6542 6544 6546 6547 6548 6551 6555 6557 6559 6562 6563 6565 6567 6569
 6571 6573 6580 6581 6590 6592 6593 6594 6596 6597 6598 6601 6602 6603
 6604 6611 6614 6615 6620 6621 6622 6623 6624 6625 6627 6628 6630 6636
 6638 6640 6642 6643 6645 6650 6652 6654 6655 6656 6660 6664 6665 6670
 6674 6677 6678 6680 6681 6685 6688 6689 6692 6693 6694 6695 6696 6698
 6699 6700 6702 6704 6709 6711 6713 6714 6720 6721 6725 6731 6735 6736
 6737 6739 6744 6747 6748 6749 6751 6755 6760 6761 6763 6764 6768 6769
 6771 6773 6774 6775 6776 6777 6778 6786 6787 6789 6793 6794 6797 6801
 6803 6804 6807 6809 6812 6813 6814 6817 6821 6822 6829 6830 6834 6836
 6838 6840 6843 6845 6847 6849 6852 6854 6855 6862 6867 6869 6872 6875
 6877 6878 6879 6880 6881 6882 6884 6885 6889 6890 6896 6904 6905 6906
 6907 6908 6909 6912 6914 6916 6917 6918 6919 6920 6921 6922 6923 6926
 6929 6931 6933 6936 6940 6942 6944 6948 6952 6953 6957 6958 6959 6960
 6961 6964 6968 6970 6972 6973 6977 6979 6983 6992 6994 6996 6997 7016
 7031 7042 7248 7272 7284 7385 7402 7487 7512 7519 7546 7683 7774 7825
 7866 7962 7971]
subset_sample_indices [3778 6847 4533 6881 7402 3960 6761 6266 6263 2628 6270 3189 6702 4697
 6581 4329 6283 6017 6058 4077 4753 3391 6628 6183 2583]
subset_img_paths ['cifar10/cifar10/val/cat/0779.png', 'cifar10/cifar10/val/frog/0848.png', 'cifar10/cifar10/val/deer/0534.png', 'cifar10/cifar10/val/frog/0882.png', 'cifar10/cifar10/val/horse/0403.png', 'cifar10/cifar10/val/cat/0961.png', 'cifar10/cifar10/val/frog/0762.png', 'cifar10/cifar10/val/frog/0267.png', 'cifar10/cifar10/val/frog/0264.png', 'cifar10/cifar10/val/bird/0629.png', 'cifar10/cifar10/val/frog/0271.png', 'cifar10/cifar10/val/cat/0190.png', 'cifar10/cifar10/val/frog/0703.png', 'cifar10/cifar10/val/deer/0698.png', 'cifar10/cifar10/val/frog/0582.png', 'cifar10/cifar10/val/deer/0330.png', 'cifar10/cifar10/val/frog/0284.png', 'cifar10/cifar10/val/frog/0018.png', 'cifar10/cifar10/val/frog/0059.png', 'cifar10/cifar10/val/deer/0078.png', 'cifar10/cifar10/val/deer/0754.png', 'cifar10/cifar10/val/cat/0392.png', 'cifar10/cifar10/val/frog/0629.png', 'cifar10/cifar10/val/frog/0184.png', 'cifar10/cifar10/val/bird/0584.png']
rows:  5
cols:  5
len imgs:  25
=> saved grid_0.pdf, accuracy = 0.515, nsamples = 857
=> grid 0 labels: [3 6 4 6 7 3 6 6 6 2 6 3 6 4 6 4 6 6 6 4 4 3 6 6 2]
label_i 9
preds [9 9 8 ... 0 0 0]
np.where(preds == label_i) (array([   0,    1,    4,    8,   10,   18,   20,   22,   33,   34,   39,
         40,   45,   47,   50,   53,   57,   60,   63,   64,   65,   68,
         69,   78,   82,   84,   85,   86,   89,   90,   91,   93,   96,
         99,  100,  102,  104,  105,  106,  111,  115,  116,  117,  126,
        129,  132,  133,  134,  135,  138,  139,  140,  141,  148,  150,
        156,  157,  158,  162,  164,  168,  169,  170,  174,  176,  177,
        179,  183,  184,  188,  189,  193,  196,  197,  199,  206,  207,
        209,  210,  211,  214,  219,  231,  235,  236,  237,  239,  242,
        244,  245,  247,  248,  254,  260,  261,  262,  263,  268,  272,
        274,  278,  280,  283,  284,  287,  288,  289,  290,  291,  292,
        295,  296,  297,  298,  300,  301,  307,  309,  312,  316,  322,
        325,  326,  335,  340,  346,  351,  352,  353,  363,  365,  366,
        367,  369,  371,  376,  377,  378,  379,  381,  385,  386,  387,
        390,  391,  393,  395,  397,  399,  403,  404,  406,  409,  410,
        411,  413,  416,  422,  426,  427,  428,  430,  431,  433,  434,
        438,  443,  447,  449,  453,  454,  455,  459,  460,  461,  465,
        474,  476,  481,  484,  486,  487,  489,  491,  494,  495,  499,
        505,  507,  509,  510,  512,  513,  514,  517,  519,  523,  524,
        530,  531,  536,  537,  539,  545,  546,  547,  551,  554,  563,
        564,  565,  566,  567,  570,  571,  573,  577,  579,  581,  582,
        583,  585,  592,  593,  594,  598,  602,  603,  605,  613,  617,
        618,  622,  624,  625,  626,  628,  629,  631,  634,  637,  639,
        640,  649,  650,  651,  652,  653,  654,  655,  657,  661,  662,
        664,  665,  668,  675,  684,  686,  688,  693,  695,  700,  703,
        705,  710,  711,  713,  714,  718,  719,  720,  724,  726,  727,
        728,  729,  730,  732,  735,  736,  739,  742,  743,  746,  747,
        757,  762,  765,  767,  768,  770,  771,  772,  774,  775,  776,
        777,  778,  781,  783,  790,  793,  797,  800,  801,  803,  805,
        807,  808,  810,  813,  816,  817,  818,  819,  821,  823,  824,
        825,  828,  833,  834,  837,  839,  841,  843,  844,  852,  855,
        856,  858,  860,  861,  862,  863,  865,  866,  868,  871,  873,
        875,  881,  884,  888,  893,  894,  896,  897,  903,  905,  907,
        909,  912,  913,  914,  916,  919,  921,  922,  924,  926,  927,
        931,  933,  934,  938,  939,  940,  942,  948,  950,  951,  952,
        953,  954,  958,  959,  961,  965,  969,  970,  972,  976,  979,
        983,  986,  988,  989,  990,  991,  992,  994,  995, 1068, 1131,
       1163, 1165, 1271, 1282, 1396, 1427, 1475, 1502, 1661, 1742, 1778,
       1793, 1821, 1823, 1864, 1930, 1983, 2062, 2068, 2073, 2110, 2127,
       2135, 2138, 2144, 2153, 2157, 2222, 2263, 2322, 2325, 2326, 2359,
       2381, 2399, 2427, 2457, 2499, 2509, 2528, 2546, 2565, 2618, 2697,
       2711, 2718, 2794, 2873, 2903, 2960, 2980, 3229, 3398, 3795, 3915,
       4011, 4103, 4104, 4116, 4263, 4286, 4297, 4298, 4416, 4429, 4469,
       4609, 4611, 4618, 4646, 4725, 4825, 4891, 4992, 5316, 7102, 7283,
       7338, 7469, 7856, 8005, 8006, 8007, 8008, 8009, 8010, 8012, 8018,
       8019, 8020, 8021, 8023, 8028, 8032, 8036, 8038, 8039, 8040, 8044,
       8045, 8048, 8052, 8054, 8055, 8056, 8057, 8058, 8060, 8062, 8064,
       8065, 8069, 8071, 8075, 8076, 8077, 8079, 8082, 8083, 8084, 8085,
       8087, 8088, 8090, 8092, 8095, 8101, 8102, 8103, 8104, 8105, 8107,
       8109, 8110, 8111, 8114, 8115, 8116, 8118, 8119, 8123, 8125, 8126,
       8127, 8130, 8131, 8135, 8136, 8137, 8143, 8145, 8149, 8150, 8154,
       8157, 8158, 8159, 8161, 8165, 8166, 8168, 8169, 8179, 8180, 8183,
       8187, 8190, 8191, 8192, 8193, 8195, 8196, 8201, 8202, 8203, 8208,
       8210, 8212, 8213, 8217, 8218, 8219, 8222, 8223, 8224, 8225, 8229,
       8230, 8233, 8236, 8237, 8238, 8239, 8240, 8241, 8242, 8243, 8251,
       8252, 8253, 8254, 8258, 8259, 8263, 8271, 8274, 8275, 8279, 8281,
       8283, 8285, 8287, 8288, 8289, 8291, 8295, 8297, 8298, 8299, 8301,
       8302, 8305, 8306, 8307, 8310, 8320, 8323, 8325, 8329, 8330, 8332,
       8333, 8334, 8335, 8338, 8339, 8340, 8341, 8342, 8344, 8348, 8349,
       8350, 8352, 8354, 8355, 8356, 8357, 8358, 8361, 8362, 8363, 8367,
       8368, 8369, 8370, 8371, 8374, 8376, 8378, 8380, 8385, 8386, 8389,
       8391, 8392, 8394, 8395, 8396, 8398, 8399, 8402, 8403, 8405, 8406,
       8407, 8410, 8411, 8413, 8414, 8415, 8418, 8420, 8422, 8425, 8427,
       8428, 8429, 8430, 8432, 8435, 8438, 8440, 8441, 8443, 8444, 8445,
       8446, 8448, 8450, 8451, 8452, 8456, 8458, 8461, 8463, 8465, 8466,
       8469, 8470, 8471, 8476, 8478, 8485, 8486, 8488, 8490, 8491, 8494,
       8495, 8496, 8498, 8499, 8500, 8501, 8504, 8505, 8506, 8507, 8508,
       8510, 8512, 8513, 8514, 8515, 8516, 8518, 8523, 8525, 8526, 8529,
       8537, 8539, 8541, 8543, 8545, 8546, 8547, 8554, 8555, 8557, 8561,
       8562, 8570, 8577, 8578, 8581, 8584, 8585, 8586, 8590, 8593, 8594,
       8597, 8598, 8601, 8602, 8603, 8606, 8607, 8610, 8611, 8612, 8614,
       8615, 8616, 8617, 8620, 8622, 8628, 8634, 8636, 8639, 8642, 8644,
       8649, 8657, 8659, 8663, 8664, 8668, 8670, 8672, 8675, 8676, 8677,
       8684, 8685, 8687, 8688, 8689, 8692, 8693, 8694, 8696, 8697, 8699,
       8701, 8709, 8710, 8711, 8712, 8713, 8714, 8715, 8718, 8719, 8720,
       8723, 8726, 8727, 8728, 8730, 8733, 8737, 8739, 8740, 8748, 8750,
       8751, 8752, 8753, 8756, 8758, 8759, 8760, 8761, 8762, 8764, 8765,
       8770, 8772, 8773, 8775, 8777, 8783, 8785, 8786, 8787, 8789, 8794,
       8800, 8801, 8802, 8806, 8810, 8812, 8816, 8817, 8819, 8821, 8823,
       8825, 8826, 8827, 8828, 8830, 8831, 8832, 8833, 8835, 8836, 8838,
       8839, 8840, 8844, 8846, 8848, 8849, 8853, 8858, 8859, 8861, 8865,
       8872, 8874, 8875, 8876, 8878, 8879, 8883, 8884, 8885, 8888, 8889,
       8891, 8893, 8895, 8899, 8903, 8904, 8906, 8907, 8908, 8917, 8918,
       8919, 8920, 8922, 8930, 8934, 8937, 8941, 8944, 8947, 8954, 8956,
       8958, 8959, 8962, 8963, 8966, 8971, 8972, 8974, 8975, 8977, 8979,
       8981, 8984, 8985, 8986, 8989, 8990, 8992, 8995, 8996, 8997, 9013,
       9043, 9046, 9072, 9128, 9217, 9253, 9257, 9271, 9273, 9336, 9419,
       9651, 9688, 9709, 9884, 9930, 9942]),)
sample_indices [   0    1    4    8   10   18   20   22   33   34   39   40   45   47
   50   53   57   60   63   64   65   68   69   78   82   84   85   86
   89   90   91   93   96   99  100  102  104  105  106  111  115  116
  117  126  129  132  133  134  135  138  139  140  141  148  150  156
  157  158  162  164  168  169  170  174  176  177  179  183  184  188
  189  193  196  197  199  206  207  209  210  211  214  219  231  235
  236  237  239  242  244  245  247  248  254  260  261  262  263  268
  272  274  278  280  283  284  287  288  289  290  291  292  295  296
  297  298  300  301  307  309  312  316  322  325  326  335  340  346
  351  352  353  363  365  366  367  369  371  376  377  378  379  381
  385  386  387  390  391  393  395  397  399  403  404  406  409  410
  411  413  416  422  426  427  428  430  431  433  434  438  443  447
  449  453  454  455  459  460  461  465  474  476  481  484  486  487
  489  491  494  495  499  505  507  509  510  512  513  514  517  519
  523  524  530  531  536  537  539  545  546  547  551  554  563  564
  565  566  567  570  571  573  577  579  581  582  583  585  592  593
  594  598  602  603  605  613  617  618  622  624  625  626  628  629
  631  634  637  639  640  649  650  651  652  653  654  655  657  661
  662  664  665  668  675  684  686  688  693  695  700  703  705  710
  711  713  714  718  719  720  724  726  727  728  729  730  732  735
  736  739  742  743  746  747  757  762  765  767  768  770  771  772
  774  775  776  777  778  781  783  790  793  797  800  801  803  805
  807  808  810  813  816  817  818  819  821  823  824  825  828  833
  834  837  839  841  843  844  852  855  856  858  860  861  862  863
  865  866  868  871  873  875  881  884  888  893  894  896  897  903
  905  907  909  912  913  914  916  919  921  922  924  926  927  931
  933  934  938  939  940  942  948  950  951  952  953  954  958  959
  961  965  969  970  972  976  979  983  986  988  989  990  991  992
  994  995 1068 1131 1163 1165 1271 1282 1396 1427 1475 1502 1661 1742
 1778 1793 1821 1823 1864 1930 1983 2062 2068 2073 2110 2127 2135 2138
 2144 2153 2157 2222 2263 2322 2325 2326 2359 2381 2399 2427 2457 2499
 2509 2528 2546 2565 2618 2697 2711 2718 2794 2873 2903 2960 2980 3229
 3398 3795 3915 4011 4103 4104 4116 4263 4286 4297 4298 4416 4429 4469
 4609 4611 4618 4646 4725 4825 4891 4992 5316 7102 7283 7338 7469 7856
 8005 8006 8007 8008 8009 8010 8012 8018 8019 8020 8021 8023 8028 8032
 8036 8038 8039 8040 8044 8045 8048 8052 8054 8055 8056 8057 8058 8060
 8062 8064 8065 8069 8071 8075 8076 8077 8079 8082 8083 8084 8085 8087
 8088 8090 8092 8095 8101 8102 8103 8104 8105 8107 8109 8110 8111 8114
 8115 8116 8118 8119 8123 8125 8126 8127 8130 8131 8135 8136 8137 8143
 8145 8149 8150 8154 8157 8158 8159 8161 8165 8166 8168 8169 8179 8180
 8183 8187 8190 8191 8192 8193 8195 8196 8201 8202 8203 8208 8210 8212
 8213 8217 8218 8219 8222 8223 8224 8225 8229 8230 8233 8236 8237 8238
 8239 8240 8241 8242 8243 8251 8252 8253 8254 8258 8259 8263 8271 8274
 8275 8279 8281 8283 8285 8287 8288 8289 8291 8295 8297 8298 8299 8301
 8302 8305 8306 8307 8310 8320 8323 8325 8329 8330 8332 8333 8334 8335
 8338 8339 8340 8341 8342 8344 8348 8349 8350 8352 8354 8355 8356 8357
 8358 8361 8362 8363 8367 8368 8369 8370 8371 8374 8376 8378 8380 8385
 8386 8389 8391 8392 8394 8395 8396 8398 8399 8402 8403 8405 8406 8407
 8410 8411 8413 8414 8415 8418 8420 8422 8425 8427 8428 8429 8430 8432
 8435 8438 8440 8441 8443 8444 8445 8446 8448 8450 8451 8452 8456 8458
 8461 8463 8465 8466 8469 8470 8471 8476 8478 8485 8486 8488 8490 8491
 8494 8495 8496 8498 8499 8500 8501 8504 8505 8506 8507 8508 8510 8512
 8513 8514 8515 8516 8518 8523 8525 8526 8529 8537 8539 8541 8543 8545
 8546 8547 8554 8555 8557 8561 8562 8570 8577 8578 8581 8584 8585 8586
 8590 8593 8594 8597 8598 8601 8602 8603 8606 8607 8610 8611 8612 8614
 8615 8616 8617 8620 8622 8628 8634 8636 8639 8642 8644 8649 8657 8659
 8663 8664 8668 8670 8672 8675 8676 8677 8684 8685 8687 8688 8689 8692
 8693 8694 8696 8697 8699 8701 8709 8710 8711 8712 8713 8714 8715 8718
 8719 8720 8723 8726 8727 8728 8730 8733 8737 8739 8740 8748 8750 8751
 8752 8753 8756 8758 8759 8760 8761 8762 8764 8765 8770 8772 8773 8775
 8777 8783 8785 8786 8787 8789 8794 8800 8801 8802 8806 8810 8812 8816
 8817 8819 8821 8823 8825 8826 8827 8828 8830 8831 8832 8833 8835 8836
 8838 8839 8840 8844 8846 8848 8849 8853 8858 8859 8861 8865 8872 8874
 8875 8876 8878 8879 8883 8884 8885 8888 8889 8891 8893 8895 8899 8903
 8904 8906 8907 8908 8917 8918 8919 8920 8922 8930 8934 8937 8941 8944
 8947 8954 8956 8958 8959 8962 8963 8966 8971 8972 8974 8975 8977 8979
 8981 8984 8985 8986 8989 8990 8992 8995 8996 8997 9013 9043 9046 9072
 9128 9217 9253 9257 9271 9273 9336 9419 9651 9688 9709 9884 9930 9942]
subset_sample_indices [8849 8202  655  858 8040 8446 8740 8396   50   93 8597 8445 8218 8056
  618  573 8357  539 8688  778 8858  881 9217  951  209]
subset_img_paths ['cifar10/cifar10/val/ship/0850.png', 'cifar10/cifar10/val/ship/0203.png', 'cifar10/cifar10/val/airplane/0656.png', 'cifar10/cifar10/val/airplane/0859.png', 'cifar10/cifar10/val/ship/0041.png', 'cifar10/cifar10/val/ship/0447.png', 'cifar10/cifar10/val/ship/0741.png', 'cifar10/cifar10/val/ship/0397.png', 'cifar10/cifar10/val/airplane/0051.png', 'cifar10/cifar10/val/airplane/0094.png', 'cifar10/cifar10/val/ship/0598.png', 'cifar10/cifar10/val/ship/0446.png', 'cifar10/cifar10/val/ship/0219.png', 'cifar10/cifar10/val/ship/0057.png', 'cifar10/cifar10/val/airplane/0619.png', 'cifar10/cifar10/val/airplane/0574.png', 'cifar10/cifar10/val/ship/0358.png', 'cifar10/cifar10/val/airplane/0540.png', 'cifar10/cifar10/val/ship/0689.png', 'cifar10/cifar10/val/airplane/0779.png', 'cifar10/cifar10/val/ship/0859.png', 'cifar10/cifar10/val/airplane/0882.png', 'cifar10/cifar10/val/truck/0218.png', 'cifar10/cifar10/val/airplane/0952.png', 'cifar10/cifar10/val/airplane/0210.png']
rows:  5
cols:  5
len imgs:  25
=> saved grid_1.pdf, accuracy = 0.481, nsamples = 952
=> grid 1 labels: [8 8 0 0 8 8 8 8 0 0 8 8 8 8 0 0 8 0 8 0 8 0 9 0 0]
label_i 0
preds [9 9 8 ... 0 0 0]
np.where(preds == label_i) (array([   7,   13,   15, ..., 9997, 9998, 9999]),)
sample_indices [   7   13   15 ... 9997 9998 9999]
subset_sample_indices [9764 1299 8630 1436 8091  936 9803 9497 9468 9090 7257 9375 8366 4765
 1665  152 9101 8857  755 9441 8480  331 1578 8935 1280]
subset_img_paths ['cifar10/cifar10/val/truck/0765.png', 'cifar10/cifar10/val/automobile/0300.png', 'cifar10/cifar10/val/ship/0631.png', 'cifar10/cifar10/val/automobile/0437.png', 'cifar10/cifar10/val/ship/0092.png', 'cifar10/cifar10/val/airplane/0937.png', 'cifar10/cifar10/val/truck/0804.png', 'cifar10/cifar10/val/truck/0498.png', 'cifar10/cifar10/val/truck/0469.png', 'cifar10/cifar10/val/truck/0091.png', 'cifar10/cifar10/val/horse/0258.png', 'cifar10/cifar10/val/truck/0376.png', 'cifar10/cifar10/val/ship/0367.png', 'cifar10/cifar10/val/deer/0766.png', 'cifar10/cifar10/val/automobile/0666.png', 'cifar10/cifar10/val/airplane/0153.png', 'cifar10/cifar10/val/truck/0102.png', 'cifar10/cifar10/val/ship/0858.png', 'cifar10/cifar10/val/airplane/0756.png', 'cifar10/cifar10/val/truck/0442.png', 'cifar10/cifar10/val/ship/0481.png', 'cifar10/cifar10/val/airplane/0332.png', 'cifar10/cifar10/val/automobile/0579.png', 'cifar10/cifar10/val/ship/0936.png', 'cifar10/cifar10/val/automobile/0281.png']
rows:  5
cols:  5
len imgs:  25
=> saved grid_2.pdf, accuracy = 0.337, nsamples = 2182
=> grid 2 labels: [9 1 8 1 8 0 9 9 9 9 7 9 8 4 1 0 9 8 0 9 8 0 1 8 1]
label_i 8
preds [9 9 8 ... 0 0 0]
np.where(preds == label_i) (array([   2,    9,   11,   14,   17,   24,   29,   35,   36,   38,   43,
         56,   71,   76,   77,   98,  118,  124,  125,  131,  142,  144,
        145,  153,  154,  160,  165,  171,  180,  192,  195,  202,  215,
        218,  221,  227,  229,  232,  233,  250,  257,  265,  269,  271,
        273,  279,  294,  299,  302,  303,  304,  317,  333,  339,  342,
        345,  356,  361,  368,  375,  380,  398,  401,  402,  412,  414,
        415,  419,  421,  424,  437,  439,  441,  442,  448,  450,  452,
        466,  468,  471,  478,  497,  516,  525,  552,  556,  558,  575,
        584,  588,  596,  600,  604,  614,  615,  633,  638,  641,  642,
        646,  647,  648,  656,  671,  679,  680,  689,  690,  697,  704,
        708,  712,  723,  733,  737,  749,  753,  754,  759,  769,  773,
        780,  789,  794,  795,  804,  809,  812,  814,  815,  826,  831,
        835,  849,  853,  857,  878,  880,  883,  886,  901,  902,  947,
        956,  960,  963,  966,  971,  973,  974,  975,  978,  984,  993,
       1169, 1186, 1534, 1641, 1703, 2003, 2004, 2031, 2039, 2047, 2049,
       2050, 2067, 2070, 2075, 2086, 2090, 2109, 2122, 2126, 2175, 2182,
       2187, 2191, 2202, 2204, 2206, 2219, 2235, 2239, 2243, 2245, 2249,
       2267, 2285, 2305, 2308, 2310, 2321, 2328, 2334, 2338, 2340, 2345,
       2351, 2352, 2358, 2370, 2378, 2385, 2387, 2388, 2391, 2395, 2404,
       2410, 2428, 2431, 2446, 2451, 2452, 2465, 2472, 2477, 2478, 2501,
       2503, 2515, 2535, 2537, 2544, 2551, 2554, 2555, 2556, 2557, 2558,
       2561, 2567, 2577, 2581, 2604, 2619, 2641, 2655, 2698, 2703, 2704,
       2731, 2748, 2749, 2755, 2765, 2781, 2782, 2784, 2788, 2790, 2807,
       2809, 2812, 2822, 2830, 2831, 2850, 2857, 2862, 2868, 2871, 2872,
       2882, 2885, 2889, 2922, 2923, 2927, 2936, 2937, 2941, 2946, 2967,
       2984, 2985, 2992, 2994, 3077, 3081, 3106, 3123, 3136, 3153, 3176,
       3183, 3196, 3213, 3232, 3242, 3243, 3251, 3259, 3297, 3299, 3332,
       3354, 3381, 3393, 3460, 3462, 3467, 3469, 3479, 3489, 3565, 3609,
       3610, 3612, 3617, 3623, 3628, 3649, 3701, 3707, 3728, 3758, 3780,
       3831, 3840, 3850, 3881, 3921, 3973, 3974, 4000, 4004, 4045, 4066,
       4071, 4155, 4192, 4225, 4304, 4364, 4365, 4380, 4405, 4497, 4546,
       4588, 4638, 4744, 4796, 4840, 4844, 4864, 4904, 4927, 4948, 5049,
       5084, 5087, 5102, 5104, 5173, 5174, 5179, 5208, 5229, 5252, 5262,
       5324, 5371, 5372, 5398, 5437, 5465, 5504, 5511, 5593, 5631, 5654,
       5663, 5666, 5790, 5800, 5806, 5815, 5833, 5876, 5933, 5939, 5949,
       5952, 6050, 6108, 6198, 6221, 6234, 6281, 6316, 6333, 6363, 6367,
       6464, 6484, 6637, 6785, 6851, 6860, 6938, 6951, 6980, 7009, 7013,
       7037, 7076, 7100, 7107, 7115, 7133, 7174, 7180, 7181, 7201, 7207,
       7229, 7300, 7309, 7312, 7317, 7332, 7397, 7408, 7411, 7481, 7522,
       7620, 7624, 7643, 7772, 7807, 7816, 7924, 7943, 7945, 7949, 7961,
       7973, 8014, 8026, 8030, 8035, 8042, 8046, 8050, 8120, 8133, 8144,
       8162, 8249, 8264, 8272, 8278, 8309, 8311, 8315, 8318, 8321, 8327,
       8337, 8351, 8365, 8372, 8373, 8409, 8412, 8424, 8439, 8453, 8484,
       8519, 8532, 8536, 8551, 8566, 8605, 8631, 8638, 8650, 8660, 8669,
       8674, 8695, 8707, 8721, 8738, 8747, 8776, 8779, 8790, 8792, 8808,
       8855, 8896, 8915, 8925, 8950, 8970, 8980, 8982, 9058, 9261, 9439,
       9531, 9572, 9710, 9780]),)
sample_indices [   2    9   11   14   17   24   29   35   36   38   43   56   71   76
   77   98  118  124  125  131  142  144  145  153  154  160  165  171
  180  192  195  202  215  218  221  227  229  232  233  250  257  265
  269  271  273  279  294  299  302  303  304  317  333  339  342  345
  356  361  368  375  380  398  401  402  412  414  415  419  421  424
  437  439  441  442  448  450  452  466  468  471  478  497  516  525
  552  556  558  575  584  588  596  600  604  614  615  633  638  641
  642  646  647  648  656  671  679  680  689  690  697  704  708  712
  723  733  737  749  753  754  759  769  773  780  789  794  795  804
  809  812  814  815  826  831  835  849  853  857  878  880  883  886
  901  902  947  956  960  963  966  971  973  974  975  978  984  993
 1169 1186 1534 1641 1703 2003 2004 2031 2039 2047 2049 2050 2067 2070
 2075 2086 2090 2109 2122 2126 2175 2182 2187 2191 2202 2204 2206 2219
 2235 2239 2243 2245 2249 2267 2285 2305 2308 2310 2321 2328 2334 2338
 2340 2345 2351 2352 2358 2370 2378 2385 2387 2388 2391 2395 2404 2410
 2428 2431 2446 2451 2452 2465 2472 2477 2478 2501 2503 2515 2535 2537
 2544 2551 2554 2555 2556 2557 2558 2561 2567 2577 2581 2604 2619 2641
 2655 2698 2703 2704 2731 2748 2749 2755 2765 2781 2782 2784 2788 2790
 2807 2809 2812 2822 2830 2831 2850 2857 2862 2868 2871 2872 2882 2885
 2889 2922 2923 2927 2936 2937 2941 2946 2967 2984 2985 2992 2994 3077
 3081 3106 3123 3136 3153 3176 3183 3196 3213 3232 3242 3243 3251 3259
 3297 3299 3332 3354 3381 3393 3460 3462 3467 3469 3479 3489 3565 3609
 3610 3612 3617 3623 3628 3649 3701 3707 3728 3758 3780 3831 3840 3850
 3881 3921 3973 3974 4000 4004 4045 4066 4071 4155 4192 4225 4304 4364
 4365 4380 4405 4497 4546 4588 4638 4744 4796 4840 4844 4864 4904 4927
 4948 5049 5084 5087 5102 5104 5173 5174 5179 5208 5229 5252 5262 5324
 5371 5372 5398 5437 5465 5504 5511 5593 5631 5654 5663 5666 5790 5800
 5806 5815 5833 5876 5933 5939 5949 5952 6050 6108 6198 6221 6234 6281
 6316 6333 6363 6367 6464 6484 6637 6785 6851 6860 6938 6951 6980 7009
 7013 7037 7076 7100 7107 7115 7133 7174 7180 7181 7201 7207 7229 7300
 7309 7312 7317 7332 7397 7408 7411 7481 7522 7620 7624 7643 7772 7807
 7816 7924 7943 7945 7949 7961 7973 8014 8026 8030 8035 8042 8046 8050
 8120 8133 8144 8162 8249 8264 8272 8278 8309 8311 8315 8318 8321 8327
 8337 8351 8365 8372 8373 8409 8412 8424 8439 8453 8484 8519 8532 8536
 8551 8566 8605 8631 8638 8650 8660 8669 8674 8695 8707 8721 8738 8747
 8776 8779 8790 8792 8808 8855 8896 8915 8925 8950 8970 8980 8982 9058
 9261 9439 9531 9572 9710 9780]
subset_sample_indices [ 596  690 4365 8950 2404   98 7945 3136 2039 2340 2388 2391  279 2544
 1169  232 3974 3106 7107 8318 3617 3393 3232  697  947]
subset_img_paths ['cifar10/cifar10/val/airplane/0597.png', 'cifar10/cifar10/val/airplane/0691.png', 'cifar10/cifar10/val/deer/0366.png', 'cifar10/cifar10/val/ship/0951.png', 'cifar10/cifar10/val/bird/0405.png', 'cifar10/cifar10/val/airplane/0099.png', 'cifar10/cifar10/val/horse/0946.png', 'cifar10/cifar10/val/cat/0137.png', 'cifar10/cifar10/val/bird/0040.png', 'cifar10/cifar10/val/bird/0341.png', 'cifar10/cifar10/val/bird/0389.png', 'cifar10/cifar10/val/bird/0392.png', 'cifar10/cifar10/val/airplane/0280.png', 'cifar10/cifar10/val/bird/0545.png', 'cifar10/cifar10/val/automobile/0170.png', 'cifar10/cifar10/val/airplane/0233.png', 'cifar10/cifar10/val/cat/0975.png', 'cifar10/cifar10/val/cat/0107.png', 'cifar10/cifar10/val/horse/0108.png', 'cifar10/cifar10/val/ship/0319.png', 'cifar10/cifar10/val/cat/0618.png', 'cifar10/cifar10/val/cat/0394.png', 'cifar10/cifar10/val/cat/0233.png', 'cifar10/cifar10/val/airplane/0698.png', 'cifar10/cifar10/val/airplane/0948.png']
rows:  5
cols:  5
len imgs:  25
=> saved grid_3.pdf, accuracy = 0.302, nsamples = 510
=> grid 3 labels: [0 0 4 8 2 0 7 3 2 2 2 2 0 2 1 0 3 3 7 8 3 3 3 0 0]
label_i 4
preds [9 9 8 ... 0 0 0]
np.where(preds == label_i) (array([   3,   12,   55,   72,   92,  110,  143,  163,  208,  212,  217,
        224,  230,  264,  267,  270,  323,  329,  358,  359,  432,  488,
        508,  532,  542,  548,  560,  591,  627,  670,  677,  691,  699,
        716,  734,  779,  799,  806,  830,  879,  895,  923, 1143, 1144,
       1259, 1336, 1404, 1416, 1509, 1560, 1593, 1609, 1686, 1737, 1885,
       1899, 1913, 2011, 2012, 2016, 2020, 2024, 2025, 2028, 2034, 2042,
       2058, 2060, 2076, 2081, 2082, 2083, 2084, 2089, 2100, 2108, 2116,
       2137, 2147, 2148, 2156, 2158, 2162, 2163, 2164, 2171, 2177, 2178,
       2180, 2183, 2189, 2192, 2197, 2199, 2214, 2216, 2246, 2247, 2248,
       2257, 2264, 2266, 2269, 2270, 2274, 2277, 2295, 2296, 2304, 2309,
       2311, 2318, 2329, 2330, 2337, 2348, 2356, 2361, 2364, 2371, 2374,
       2382, 2397, 2402, 2408, 2419, 2442, 2445, 2471, 2497, 2505, 2520,
       2523, 2526, 2549, 2552, 2578, 2582, 2590, 2596, 2600, 2603, 2608,
       2624, 2635, 2642, 2653, 2657, 2662, 2663, 2672, 2682, 2694, 2695,
       2699, 2706, 2707, 2709, 2715, 2720, 2726, 2729, 2733, 2734, 2735,
       2736, 2740, 2742, 2746, 2757, 2773, 2775, 2778, 2786, 2793, 2802,
       2803, 2804, 2810, 2815, 2828, 2847, 2853, 2865, 2869, 2876, 2877,
       2900, 2901, 2904, 2919, 2921, 2934, 2939, 2940, 2955, 2962, 2965,
       2989, 2993, 3000, 3007, 3011, 3024, 3032, 3035, 3038, 3041, 3044,
       3046, 3047, 3053, 3054, 3056, 3058, 3065, 3072, 3085, 3086, 3090,
       3096, 3098, 3100, 3101, 3107, 3118, 3128, 3133, 3134, 3141, 3144,
       3150, 3158, 3163, 3167, 3169, 3180, 3181, 3184, 3192, 3193, 3195,
       3203, 3205, 3210, 3215, 3217, 3221, 3227, 3237, 3241, 3262, 3264,
       3266, 3269, 3278, 3279, 3282, 3292, 3294, 3296, 3300, 3302, 3304,
       3312, 3314, 3317, 3318, 3323, 3325, 3337, 3344, 3349, 3360, 3368,
       3374, 3377, 3380, 3383, 3384, 3396, 3401, 3403, 3406, 3417, 3420,
       3432, 3439, 3452, 3454, 3459, 3484, 3500, 3509, 3513, 3519, 3521,
       3523, 3525, 3540, 3557, 3558, 3560, 3575, 3581, 3589, 3594, 3596,
       3607, 3614, 3616, 3620, 3622, 3624, 3632, 3634, 3637, 3646, 3652,
       3656, 3666, 3673, 3683, 3684, 3694, 3695, 3700, 3704, 3710, 3712,
       3715, 3718, 3720, 3722, 3746, 3752, 3759, 3767, 3774, 3785, 3791,
       3793, 3798, 3800, 3806, 3807, 3818, 3825, 3835, 3836, 3844, 3846,
       3849, 3855, 3861, 3862, 3872, 3884, 3888, 3890, 3893, 3897, 3899,
       3912, 3916, 3920, 3923, 3927, 3934, 3947, 3948, 3949, 3952, 3963,
       3970, 3971, 3998, 4005, 4007, 4029, 4034, 4055, 4117, 4126, 4163,
       4173, 4186, 4213, 4214, 4229, 4230, 4247, 4269, 4322, 4338, 4350,
       4359, 4418, 4421, 4433, 4441, 4468, 4479, 4530, 4537, 4556, 4557,
       4568, 4572, 4605, 4617, 4635, 4644, 4658, 4659, 4694, 4706, 4712,
       4733, 4746, 4750, 4754, 4758, 4764, 4789, 4801, 4823, 4826, 4827,
       4900, 4908, 4917, 4920, 4930, 4941, 4950, 4953, 4962, 5000, 5002,
       5005, 5014, 5015, 5016, 5023, 5024, 5029, 5034, 5037, 5039, 5040,
       5042, 5052, 5054, 5055, 5059, 5060, 5062, 5077, 5079, 5080, 5081,
       5086, 5089, 5092, 5093, 5095, 5096, 5100, 5103, 5106, 5113, 5114,
       5115, 5118, 5129, 5130, 5131, 5138, 5139, 5145, 5146, 5150, 5151,
       5155, 5159, 5164, 5166, 5167, 5169, 5170, 5175, 5187, 5196, 5197,
       5204, 5205, 5207, 5214, 5220, 5222, 5226, 5233, 5236, 5247, 5249,
       5257, 5263, 5269, 5270, 5272, 5281, 5290, 5291, 5293, 5300, 5302,
       5303, 5306, 5308, 5310, 5314, 5323, 5326, 5328, 5330, 5331, 5335,
       5336, 5338, 5339, 5341, 5352, 5356, 5357, 5360, 5362, 5364, 5368,
       5370, 5377, 5381, 5391, 5397, 5407, 5408, 5412, 5413, 5417, 5418,
       5419, 5420, 5421, 5426, 5429, 5430, 5433, 5446, 5449, 5450, 5454,
       5455, 5458, 5460, 5461, 5464, 5477, 5478, 5479, 5481, 5489, 5490,
       5492, 5493, 5496, 5498, 5506, 5509, 5512, 5518, 5520, 5528, 5531,
       5532, 5539, 5540, 5552, 5554, 5563, 5572, 5573, 5579, 5580, 5582,
       5583, 5584, 5586, 5587, 5592, 5595, 5598, 5614, 5623, 5626, 5632,
       5636, 5647, 5648, 5655, 5658, 5659, 5662, 5664, 5667, 5671, 5672,
       5674, 5675, 5677, 5680, 5683, 5687, 5690, 5692, 5698, 5701, 5703,
       5708, 5709, 5714, 5736, 5741, 5745, 5747, 5749, 5752, 5756, 5759,
       5767, 5770, 5775, 5777, 5780, 5783, 5784, 5787, 5791, 5796, 5797,
       5798, 5805, 5807, 5808, 5809, 5816, 5817, 5820, 5827, 5828, 5834,
       5835, 5836, 5838, 5845, 5846, 5847, 5848, 5854, 5863, 5869, 5875,
       5878, 5880, 5884, 5892, 5895, 5897, 5898, 5900, 5909, 5913, 5916,
       5924, 5932, 5935, 5940, 5942, 5944, 5945, 5948, 5953, 5959, 5963,
       5966, 5968, 5970, 5979, 5984, 5986, 5988, 5995, 6009, 6026, 6049,
       6065, 6068, 6075, 6079, 6083, 6099, 6104, 6115, 6120, 6137, 6158,
       6161, 6203, 6231, 6267, 6274, 6287, 6309, 6326, 6335, 6368, 6373,
       6413, 6422, 6432, 6460, 6466, 6468, 6472, 6531, 6561, 6589, 6613,
       6617, 6619, 6641, 6651, 6657, 6667, 6707, 6710, 6722, 6738, 6752,
       6756, 6781, 6784, 6831, 6841, 6857, 6866, 6870, 6892, 6900, 6901,
       6971, 6986, 6999, 7008, 7012, 7014, 7020, 7023, 7025, 7027, 7028,
       7043, 7057, 7071, 7073, 7081, 7087, 7094, 7095, 7112, 7130, 7156,
       7157, 7166, 7173, 7220, 7227, 7239, 7242, 7247, 7261, 7263, 7265,
       7277, 7278, 7288, 7289, 7294, 7306, 7308, 7340, 7342, 7344, 7359,
       7366, 7376, 7380, 7381, 7382, 7386, 7388, 7406, 7409, 7431, 7434,
       7437, 7449, 7457, 7460, 7461, 7463, 7466, 7496, 7503, 7514, 7523,
       7526, 7541, 7558, 7577, 7597, 7601, 7613, 7648, 7668, 7685, 7690,
       7697, 7698, 7699, 7702, 7724, 7770, 7785, 7786, 7791, 7798, 7800,
       7801, 7820, 7837, 7839, 7840, 7843, 7857, 7892, 7893, 7909, 7928,
       7933, 7934, 7935, 7952, 7954, 7970, 7979, 7984, 7989, 8029, 8067,
       8146, 8170, 8214, 8220, 8228, 8231, 8267, 8277, 8284, 8345, 8359,
       8388, 8534, 8599, 8625, 8629, 8658, 8667, 8683, 8791, 8898, 8900,
       8932, 8948, 8999, 9087, 9193, 9330, 9467, 9529, 9614, 9646, 9659,
       9728, 9757, 9882, 9984]),)
sample_indices [   3   12   55   72   92  110  143  163  208  212  217  224  230  264
  267  270  323  329  358  359  432  488  508  532  542  548  560  591
  627  670  677  691  699  716  734  779  799  806  830  879  895  923
 1143 1144 1259 1336 1404 1416 1509 1560 1593 1609 1686 1737 1885 1899
 1913 2011 2012 2016 2020 2024 2025 2028 2034 2042 2058 2060 2076 2081
 2082 2083 2084 2089 2100 2108 2116 2137 2147 2148 2156 2158 2162 2163
 2164 2171 2177 2178 2180 2183 2189 2192 2197 2199 2214 2216 2246 2247
 2248 2257 2264 2266 2269 2270 2274 2277 2295 2296 2304 2309 2311 2318
 2329 2330 2337 2348 2356 2361 2364 2371 2374 2382 2397 2402 2408 2419
 2442 2445 2471 2497 2505 2520 2523 2526 2549 2552 2578 2582 2590 2596
 2600 2603 2608 2624 2635 2642 2653 2657 2662 2663 2672 2682 2694 2695
 2699 2706 2707 2709 2715 2720 2726 2729 2733 2734 2735 2736 2740 2742
 2746 2757 2773 2775 2778 2786 2793 2802 2803 2804 2810 2815 2828 2847
 2853 2865 2869 2876 2877 2900 2901 2904 2919 2921 2934 2939 2940 2955
 2962 2965 2989 2993 3000 3007 3011 3024 3032 3035 3038 3041 3044 3046
 3047 3053 3054 3056 3058 3065 3072 3085 3086 3090 3096 3098 3100 3101
 3107 3118 3128 3133 3134 3141 3144 3150 3158 3163 3167 3169 3180 3181
 3184 3192 3193 3195 3203 3205 3210 3215 3217 3221 3227 3237 3241 3262
 3264 3266 3269 3278 3279 3282 3292 3294 3296 3300 3302 3304 3312 3314
 3317 3318 3323 3325 3337 3344 3349 3360 3368 3374 3377 3380 3383 3384
 3396 3401 3403 3406 3417 3420 3432 3439 3452 3454 3459 3484 3500 3509
 3513 3519 3521 3523 3525 3540 3557 3558 3560 3575 3581 3589 3594 3596
 3607 3614 3616 3620 3622 3624 3632 3634 3637 3646 3652 3656 3666 3673
 3683 3684 3694 3695 3700 3704 3710 3712 3715 3718 3720 3722 3746 3752
 3759 3767 3774 3785 3791 3793 3798 3800 3806 3807 3818 3825 3835 3836
 3844 3846 3849 3855 3861 3862 3872 3884 3888 3890 3893 3897 3899 3912
 3916 3920 3923 3927 3934 3947 3948 3949 3952 3963 3970 3971 3998 4005
 4007 4029 4034 4055 4117 4126 4163 4173 4186 4213 4214 4229 4230 4247
 4269 4322 4338 4350 4359 4418 4421 4433 4441 4468 4479 4530 4537 4556
 4557 4568 4572 4605 4617 4635 4644 4658 4659 4694 4706 4712 4733 4746
 4750 4754 4758 4764 4789 4801 4823 4826 4827 4900 4908 4917 4920 4930
 4941 4950 4953 4962 5000 5002 5005 5014 5015 5016 5023 5024 5029 5034
 5037 5039 5040 5042 5052 5054 5055 5059 5060 5062 5077 5079 5080 5081
 5086 5089 5092 5093 5095 5096 5100 5103 5106 5113 5114 5115 5118 5129
 5130 5131 5138 5139 5145 5146 5150 5151 5155 5159 5164 5166 5167 5169
 5170 5175 5187 5196 5197 5204 5205 5207 5214 5220 5222 5226 5233 5236
 5247 5249 5257 5263 5269 5270 5272 5281 5290 5291 5293 5300 5302 5303
 5306 5308 5310 5314 5323 5326 5328 5330 5331 5335 5336 5338 5339 5341
 5352 5356 5357 5360 5362 5364 5368 5370 5377 5381 5391 5397 5407 5408
 5412 5413 5417 5418 5419 5420 5421 5426 5429 5430 5433 5446 5449 5450
 5454 5455 5458 5460 5461 5464 5477 5478 5479 5481 5489 5490 5492 5493
 5496 5498 5506 5509 5512 5518 5520 5528 5531 5532 5539 5540 5552 5554
 5563 5572 5573 5579 5580 5582 5583 5584 5586 5587 5592 5595 5598 5614
 5623 5626 5632 5636 5647 5648 5655 5658 5659 5662 5664 5667 5671 5672
 5674 5675 5677 5680 5683 5687 5690 5692 5698 5701 5703 5708 5709 5714
 5736 5741 5745 5747 5749 5752 5756 5759 5767 5770 5775 5777 5780 5783
 5784 5787 5791 5796 5797 5798 5805 5807 5808 5809 5816 5817 5820 5827
 5828 5834 5835 5836 5838 5845 5846 5847 5848 5854 5863 5869 5875 5878
 5880 5884 5892 5895 5897 5898 5900 5909 5913 5916 5924 5932 5935 5940
 5942 5944 5945 5948 5953 5959 5963 5966 5968 5970 5979 5984 5986 5988
 5995 6009 6026 6049 6065 6068 6075 6079 6083 6099 6104 6115 6120 6137
 6158 6161 6203 6231 6267 6274 6287 6309 6326 6335 6368 6373 6413 6422
 6432 6460 6466 6468 6472 6531 6561 6589 6613 6617 6619 6641 6651 6657
 6667 6707 6710 6722 6738 6752 6756 6781 6784 6831 6841 6857 6866 6870
 6892 6900 6901 6971 6986 6999 7008 7012 7014 7020 7023 7025 7027 7028
 7043 7057 7071 7073 7081 7087 7094 7095 7112 7130 7156 7157 7166 7173
 7220 7227 7239 7242 7247 7261 7263 7265 7277 7278 7288 7289 7294 7306
 7308 7340 7342 7344 7359 7366 7376 7380 7381 7382 7386 7388 7406 7409
 7431 7434 7437 7449 7457 7460 7461 7463 7466 7496 7503 7514 7523 7526
 7541 7558 7577 7597 7601 7613 7648 7668 7685 7690 7697 7698 7699 7702
 7724 7770 7785 7786 7791 7798 7800 7801 7820 7837 7839 7840 7843 7857
 7892 7893 7909 7928 7933 7934 7935 7952 7954 7970 7979 7984 7989 8029
 8067 8146 8170 8214 8220 8228 8231 8267 8277 8284 8345 8359 8388 8534
 8599 8625 8629 8658 8667 8683 8791 8898 8900 8932 8948 8999 9087 9193
 9330 9467 9529 9614 9646 9659 9728 9757 9882 9984]
subset_sample_indices [3262 5080 5205 5159 2635 3317 1899 8534 2247  267 3912 4644 3844 9529
 6161 2939 3180 5328 5150 3807 5838  691 3927 2270 4247]
subset_img_paths ['cifar10/cifar10/val/cat/0263.png', 'cifar10/cifar10/val/dog/0081.png', 'cifar10/cifar10/val/dog/0206.png', 'cifar10/cifar10/val/dog/0160.png', 'cifar10/cifar10/val/bird/0636.png', 'cifar10/cifar10/val/cat/0318.png', 'cifar10/cifar10/val/automobile/0900.png', 'cifar10/cifar10/val/ship/0535.png', 'cifar10/cifar10/val/bird/0248.png', 'cifar10/cifar10/val/airplane/0268.png', 'cifar10/cifar10/val/cat/0913.png', 'cifar10/cifar10/val/deer/0645.png', 'cifar10/cifar10/val/cat/0845.png', 'cifar10/cifar10/val/truck/0530.png', 'cifar10/cifar10/val/frog/0162.png', 'cifar10/cifar10/val/bird/0940.png', 'cifar10/cifar10/val/cat/0181.png', 'cifar10/cifar10/val/dog/0329.png', 'cifar10/cifar10/val/dog/0151.png', 'cifar10/cifar10/val/cat/0808.png', 'cifar10/cifar10/val/dog/0839.png', 'cifar10/cifar10/val/airplane/0692.png', 'cifar10/cifar10/val/cat/0928.png', 'cifar10/cifar10/val/bird/0271.png', 'cifar10/cifar10/val/deer/0248.png']
rows:  5
cols:  5
len imgs:  25
=> saved grid_4.pdf, accuracy = 0.290, nsamples = 906
=> grid 4 labels: [3 5 5 5 2 3 1 8 2 0 3 4 3 9 6 2 3 5 5 3 5 0 3 2 4]
label_i 3
preds [9 9 8 ... 0 0 0]
np.where(preds == label_i) (array([  31,   94,  108, ..., 9874, 9949, 9980]),)
sample_indices [  31   94  108 ... 9874 9949 9980]
subset_sample_indices [3776 5559 7188 5696 6078 2981 7154 7969 3293 7994 4689 4425 3245 4039
 9098 6330 7627 2482 5839  314  744 5844  186 5941 6552]
subset_img_paths ['cifar10/cifar10/val/cat/0777.png', 'cifar10/cifar10/val/dog/0560.png', 'cifar10/cifar10/val/horse/0189.png', 'cifar10/cifar10/val/dog/0697.png', 'cifar10/cifar10/val/frog/0079.png', 'cifar10/cifar10/val/bird/0982.png', 'cifar10/cifar10/val/horse/0155.png', 'cifar10/cifar10/val/horse/0970.png', 'cifar10/cifar10/val/cat/0294.png', 'cifar10/cifar10/val/horse/0995.png', 'cifar10/cifar10/val/deer/0690.png', 'cifar10/cifar10/val/deer/0426.png', 'cifar10/cifar10/val/cat/0246.png', 'cifar10/cifar10/val/deer/0040.png', 'cifar10/cifar10/val/truck/0099.png', 'cifar10/cifar10/val/frog/0331.png', 'cifar10/cifar10/val/horse/0628.png', 'cifar10/cifar10/val/bird/0483.png', 'cifar10/cifar10/val/dog/0840.png', 'cifar10/cifar10/val/airplane/0315.png', 'cifar10/cifar10/val/airplane/0745.png', 'cifar10/cifar10/val/dog/0845.png', 'cifar10/cifar10/val/airplane/0187.png', 'cifar10/cifar10/val/dog/0942.png', 'cifar10/cifar10/val/frog/0553.png']
rows:  5
cols:  5
len imgs:  25
=> saved grid_5.pdf, accuracy = 0.255, nsamples = 1175
=> grid 5 labels: [3 5 7 5 6 2 7 7 3 7 4 4 3 4 9 6 7 2 5 0 0 5 0 5 6]
label_i 7
preds [9 9 8 ... 0 0 0]
np.where(preds == label_i) (array([   5,   19,   21, ..., 9941, 9977, 9993]),)
sample_indices [   5   19   21 ... 9941 9977 9993]
subset_sample_indices [ 400 3124 7299 8098 5006 7304 3219 5684 3860 7303 7942 7937 3838 3693
 3410 5602 7004 4770 1445 7226 6883 7571 6998 7515 5785]
subset_img_paths ['cifar10/cifar10/val/airplane/0401.png', 'cifar10/cifar10/val/cat/0125.png', 'cifar10/cifar10/val/horse/0300.png', 'cifar10/cifar10/val/ship/0099.png', 'cifar10/cifar10/val/dog/0007.png', 'cifar10/cifar10/val/horse/0305.png', 'cifar10/cifar10/val/cat/0220.png', 'cifar10/cifar10/val/dog/0685.png', 'cifar10/cifar10/val/cat/0861.png', 'cifar10/cifar10/val/horse/0304.png', 'cifar10/cifar10/val/horse/0943.png', 'cifar10/cifar10/val/horse/0938.png', 'cifar10/cifar10/val/cat/0839.png', 'cifar10/cifar10/val/cat/0694.png', 'cifar10/cifar10/val/cat/0411.png', 'cifar10/cifar10/val/dog/0603.png', 'cifar10/cifar10/val/horse/0005.png', 'cifar10/cifar10/val/deer/0771.png', 'cifar10/cifar10/val/automobile/0446.png', 'cifar10/cifar10/val/horse/0227.png', 'cifar10/cifar10/val/frog/0884.png', 'cifar10/cifar10/val/horse/0572.png', 'cifar10/cifar10/val/frog/0999.png', 'cifar10/cifar10/val/horse/0516.png', 'cifar10/cifar10/val/dog/0786.png']
rows:  5
cols:  5
len imgs:  25
=> saved grid_6.pdf, accuracy = 0.229, nsamples = 1572
=> grid 6 labels: [0 3 7 8 5 7 3 5 3 7 7 7 3 3 3 5 7 4 1 7 6 7 6 7 5]
label_i 6
preds [9 9 8 ... 0 0 0]
np.where(preds == label_i) (array([ 225,  281,  501,  520,  612, 1198, 1273, 1286, 1295, 1527, 1543,
       1561, 1622, 1709, 1888, 1958, 2001, 2022, 2045, 2052, 2066, 2078,
       2097, 2104, 2130, 2132, 2142, 2150, 2168, 2185, 2203, 2212, 2241,
       2244, 2253, 2262, 2265, 2276, 2292, 2307, 2314, 2320, 2324, 2333,
       2362, 2392, 2394, 2400, 2403, 2417, 2421, 2424, 2425, 2426, 2449,
       2450, 2458, 2466, 2467, 2481, 2483, 2485, 2500, 2521, 2541, 2566,
       2568, 2571, 2586, 2587, 2588, 2589, 2597, 2606, 2617, 2631, 2637,
       2639, 2665, 2668, 2679, 2680, 2705, 2712, 2747, 2761, 2767, 2768,
       2799, 2806, 2817, 2818, 2825, 2854, 2859, 2861, 2864, 2875, 2880,
       2898, 2907, 2913, 2920, 2930, 2951, 2969, 3006, 3014, 3018, 3020,
       3026, 3029, 3055, 3057, 3070, 3079, 3084, 3091, 3095, 3097, 3099,
       3102, 3103, 3126, 3142, 3143, 3146, 3147, 3151, 3152, 3166, 3168,
       3171, 3173, 3187, 3199, 3207, 3208, 3214, 3218, 3222, 3223, 3225,
       3226, 3244, 3267, 3284, 3286, 3290, 3295, 3303, 3305, 3321, 3327,
       3328, 3333, 3336, 3341, 3352, 3353, 3364, 3366, 3367, 3370, 3376,
       3395, 3402, 3425, 3426, 3430, 3434, 3440, 3442, 3443, 3446, 3448,
       3453, 3457, 3464, 3470, 3473, 3476, 3483, 3485, 3492, 3497, 3498,
       3501, 3510, 3520, 3541, 3546, 3549, 3553, 3567, 3572, 3579, 3591,
       3605, 3626, 3636, 3638, 3641, 3662, 3667, 3668, 3672, 3679, 3682,
       3703, 3705, 3717, 3725, 3729, 3731, 3732, 3747, 3748, 3761, 3762,
       3777, 3779, 3787, 3788, 3789, 3790, 3796, 3802, 3804, 3808, 3815,
       3819, 3828, 3829, 3837, 3854, 3858, 3863, 3866, 3874, 3875, 3877,
       3880, 3891, 3905, 3907, 3909, 3913, 3918, 3924, 3930, 3931, 3932,
       3950, 3958, 3962, 3967, 3968, 3977, 3980, 3981, 3986, 4001, 4009,
       4016, 4020, 4021, 4023, 4030, 4031, 4033, 4043, 4051, 4052, 4057,
       4062, 4068, 4082, 4097, 4099, 4110, 4112, 4113, 4125, 4138, 4141,
       4142, 4145, 4149, 4158, 4164, 4178, 4181, 4191, 4195, 4196, 4198,
       4221, 4227, 4235, 4238, 4242, 4252, 4253, 4268, 4270, 4275, 4277,
       4290, 4295, 4300, 4302, 4303, 4310, 4323, 4325, 4326, 4334, 4375,
       4376, 4378, 4385, 4386, 4389, 4393, 4398, 4401, 4417, 4423, 4426,
       4428, 4436, 4439, 4444, 4454, 4460, 4477, 4480, 4487, 4489, 4502,
       4524, 4525, 4529, 4539, 4542, 4547, 4550, 4551, 4555, 4560, 4563,
       4564, 4587, 4590, 4591, 4599, 4603, 4608, 4612, 4619, 4626, 4640,
       4641, 4643, 4648, 4651, 4661, 4664, 4670, 4672, 4682, 4683, 4692,
       4693, 4704, 4731, 4767, 4777, 4779, 4791, 4795, 4804, 4813, 4831,
       4834, 4835, 4837, 4860, 4874, 4878, 4887, 4892, 4893, 4903, 4929,
       4937, 4940, 4942, 4944, 4945, 4951, 4952, 4954, 4956, 4968, 4973,
       4994, 5004, 5012, 5028, 5045, 5048, 5069, 5076, 5097, 5098, 5124,
       5132, 5135, 5144, 5153, 5161, 5180, 5182, 5189, 5194, 5211, 5212,
       5218, 5224, 5238, 5260, 5271, 5273, 5332, 5350, 5376, 5386, 5389,
       5390, 5394, 5425, 5428, 5436, 5442, 5470, 5486, 5491, 5494, 5516,
       5522, 5530, 5534, 5547, 5578, 5581, 5605, 5615, 5617, 5618, 5642,
       5651, 5673, 5685, 5705, 5706, 5710, 5718, 5725, 5733, 5746, 5757,
       5765, 5771, 5795, 5802, 5803, 5813, 5825, 5840, 5849, 5850, 5855,
       5860, 5861, 5866, 5868, 5872, 5888, 5899, 5901, 5904, 5931, 5962,
       5976, 6006, 6011, 6022, 6023, 6025, 6028, 6029, 6062, 6070, 6082,
       6091, 6102, 6110, 6117, 6119, 6121, 6122, 6123, 6127, 6138, 6152,
       6153, 6154, 6165, 6168, 6170, 6173, 6186, 6206, 6207, 6208, 6209,
       6216, 6218, 6226, 6228, 6240, 6241, 6243, 6251, 6252, 6271, 6289,
       6295, 6304, 6311, 6336, 6339, 6341, 6345, 6359, 6369, 6372, 6383,
       6387, 6393, 6396, 6399, 6403, 6404, 6405, 6408, 6412, 6417, 6424,
       6430, 6434, 6443, 6452, 6458, 6461, 6473, 6474, 6485, 6487, 6490,
       6498, 6503, 6506, 6508, 6509, 6515, 6521, 6543, 6545, 6554, 6556,
       6560, 6566, 6570, 6576, 6583, 6584, 6586, 6595, 6600, 6606, 6607,
       6618, 6631, 6635, 6639, 6648, 6662, 6663, 6668, 6669, 6672, 6673,
       6676, 6682, 6684, 6686, 6687, 6690, 6691, 6701, 6703, 6712, 6717,
       6730, 6740, 6743, 6772, 6782, 6788, 6795, 6799, 6802, 6810, 6823,
       6825, 6826, 6827, 6833, 6842, 6846, 6848, 6858, 6861, 6868, 6873,
       6886, 6899, 6902, 6911, 6924, 6925, 6930, 6932, 6934, 6939, 6941,
       6945, 6949, 6950, 6963, 6965, 6967, 6974, 6975, 6976, 6978, 6981,
       6984, 6989, 6993, 7024, 7040, 7066, 7111, 7122, 7128, 7134, 7150,
       7171, 7183, 7243, 7254, 7281, 7322, 7325, 7327, 7333, 7355, 7383,
       7392, 7430, 7508, 7528, 7529, 7534, 7548, 7551, 7552, 7560, 7567,
       7593, 7599, 7614, 7625, 7650, 7682, 7691, 7692, 7695, 7716, 7730,
       7745, 7749, 7750, 7758, 7763, 7767, 7769, 7781, 7794, 7845, 7846,
       7860, 7865, 7886, 7888, 7894, 7895, 7910, 7922, 7975, 8181, 8303,
       8502, 8679, 8702, 9099, 9353, 9412, 9534, 9565, 9626, 9686, 9904,
       9950]),)
sample_indices [ 225  281  501  520  612 1198 1273 1286 1295 1527 1543 1561 1622 1709
 1888 1958 2001 2022 2045 2052 2066 2078 2097 2104 2130 2132 2142 2150
 2168 2185 2203 2212 2241 2244 2253 2262 2265 2276 2292 2307 2314 2320
 2324 2333 2362 2392 2394 2400 2403 2417 2421 2424 2425 2426 2449 2450
 2458 2466 2467 2481 2483 2485 2500 2521 2541 2566 2568 2571 2586 2587
 2588 2589 2597 2606 2617 2631 2637 2639 2665 2668 2679 2680 2705 2712
 2747 2761 2767 2768 2799 2806 2817 2818 2825 2854 2859 2861 2864 2875
 2880 2898 2907 2913 2920 2930 2951 2969 3006 3014 3018 3020 3026 3029
 3055 3057 3070 3079 3084 3091 3095 3097 3099 3102 3103 3126 3142 3143
 3146 3147 3151 3152 3166 3168 3171 3173 3187 3199 3207 3208 3214 3218
 3222 3223 3225 3226 3244 3267 3284 3286 3290 3295 3303 3305 3321 3327
 3328 3333 3336 3341 3352 3353 3364 3366 3367 3370 3376 3395 3402 3425
 3426 3430 3434 3440 3442 3443 3446 3448 3453 3457 3464 3470 3473 3476
 3483 3485 3492 3497 3498 3501 3510 3520 3541 3546 3549 3553 3567 3572
 3579 3591 3605 3626 3636 3638 3641 3662 3667 3668 3672 3679 3682 3703
 3705 3717 3725 3729 3731 3732 3747 3748 3761 3762 3777 3779 3787 3788
 3789 3790 3796 3802 3804 3808 3815 3819 3828 3829 3837 3854 3858 3863
 3866 3874 3875 3877 3880 3891 3905 3907 3909 3913 3918 3924 3930 3931
 3932 3950 3958 3962 3967 3968 3977 3980 3981 3986 4001 4009 4016 4020
 4021 4023 4030 4031 4033 4043 4051 4052 4057 4062 4068 4082 4097 4099
 4110 4112 4113 4125 4138 4141 4142 4145 4149 4158 4164 4178 4181 4191
 4195 4196 4198 4221 4227 4235 4238 4242 4252 4253 4268 4270 4275 4277
 4290 4295 4300 4302 4303 4310 4323 4325 4326 4334 4375 4376 4378 4385
 4386 4389 4393 4398 4401 4417 4423 4426 4428 4436 4439 4444 4454 4460
 4477 4480 4487 4489 4502 4524 4525 4529 4539 4542 4547 4550 4551 4555
 4560 4563 4564 4587 4590 4591 4599 4603 4608 4612 4619 4626 4640 4641
 4643 4648 4651 4661 4664 4670 4672 4682 4683 4692 4693 4704 4731 4767
 4777 4779 4791 4795 4804 4813 4831 4834 4835 4837 4860 4874 4878 4887
 4892 4893 4903 4929 4937 4940 4942 4944 4945 4951 4952 4954 4956 4968
 4973 4994 5004 5012 5028 5045 5048 5069 5076 5097 5098 5124 5132 5135
 5144 5153 5161 5180 5182 5189 5194 5211 5212 5218 5224 5238 5260 5271
 5273 5332 5350 5376 5386 5389 5390 5394 5425 5428 5436 5442 5470 5486
 5491 5494 5516 5522 5530 5534 5547 5578 5581 5605 5615 5617 5618 5642
 5651 5673 5685 5705 5706 5710 5718 5725 5733 5746 5757 5765 5771 5795
 5802 5803 5813 5825 5840 5849 5850 5855 5860 5861 5866 5868 5872 5888
 5899 5901 5904 5931 5962 5976 6006 6011 6022 6023 6025 6028 6029 6062
 6070 6082 6091 6102 6110 6117 6119 6121 6122 6123 6127 6138 6152 6153
 6154 6165 6168 6170 6173 6186 6206 6207 6208 6209 6216 6218 6226 6228
 6240 6241 6243 6251 6252 6271 6289 6295 6304 6311 6336 6339 6341 6345
 6359 6369 6372 6383 6387 6393 6396 6399 6403 6404 6405 6408 6412 6417
 6424 6430 6434 6443 6452 6458 6461 6473 6474 6485 6487 6490 6498 6503
 6506 6508 6509 6515 6521 6543 6545 6554 6556 6560 6566 6570 6576 6583
 6584 6586 6595 6600 6606 6607 6618 6631 6635 6639 6648 6662 6663 6668
 6669 6672 6673 6676 6682 6684 6686 6687 6690 6691 6701 6703 6712 6717
 6730 6740 6743 6772 6782 6788 6795 6799 6802 6810 6823 6825 6826 6827
 6833 6842 6846 6848 6858 6861 6868 6873 6886 6899 6902 6911 6924 6925
 6930 6932 6934 6939 6941 6945 6949 6950 6963 6965 6967 6974 6975 6976
 6978 6981 6984 6989 6993 7024 7040 7066 7111 7122 7128 7134 7150 7171
 7183 7243 7254 7281 7322 7325 7327 7333 7355 7383 7392 7430 7508 7528
 7529 7534 7548 7551 7552 7560 7567 7593 7599 7614 7625 7650 7682 7691
 7692 7695 7716 7730 7745 7749 7750 7758 7763 7767 7769 7781 7794 7845
 7846 7860 7865 7886 7888 7894 7895 7910 7922 7975 8181 8303 8502 8679
 8702 9099 9353 9412 9534 9565 9626 9686 9904 9950]
subset_sample_indices [3579 3501 1888 2212 7355 7327 4242 7763 5710 2150 2314 4641 2450 3341
 3553 3434 6799 4892 6452 2668 4009 6858 3977 3367 4878]
subset_img_paths ['cifar10/cifar10/val/cat/0580.png', 'cifar10/cifar10/val/cat/0502.png', 'cifar10/cifar10/val/automobile/0889.png', 'cifar10/cifar10/val/bird/0213.png', 'cifar10/cifar10/val/horse/0356.png', 'cifar10/cifar10/val/horse/0328.png', 'cifar10/cifar10/val/deer/0243.png', 'cifar10/cifar10/val/horse/0764.png', 'cifar10/cifar10/val/dog/0711.png', 'cifar10/cifar10/val/bird/0151.png', 'cifar10/cifar10/val/bird/0315.png', 'cifar10/cifar10/val/deer/0642.png', 'cifar10/cifar10/val/bird/0451.png', 'cifar10/cifar10/val/cat/0342.png', 'cifar10/cifar10/val/cat/0554.png', 'cifar10/cifar10/val/cat/0435.png', 'cifar10/cifar10/val/frog/0800.png', 'cifar10/cifar10/val/deer/0893.png', 'cifar10/cifar10/val/frog/0453.png', 'cifar10/cifar10/val/bird/0669.png', 'cifar10/cifar10/val/deer/0010.png', 'cifar10/cifar10/val/frog/0859.png', 'cifar10/cifar10/val/cat/0978.png', 'cifar10/cifar10/val/cat/0368.png', 'cifar10/cifar10/val/deer/0879.png']
rows:  5
cols:  5
len imgs:  25
=> saved grid_7.pdf, accuracy = 0.211, nsamples = 738
=> grid 7 labels: [3 3 1 2 7 7 4 7 5 2 2 4 2 3 3 3 6 4 6 2 4 6 3 3 4]
label_i 5
preds [9 9 8 ... 0 0 0]
np.where(preds == label_i) (array([   6,   25,   41,  130,  147,  172,  194,  238,  241,  249,  253,
        306,  308,  349,  355,  389,  423,  446,  451,  457,  470,  475,
        502,  511,  528,  543,  574,  580,  608,  609,  610,  635,  643,
        645,  659,  663,  673,  676,  696,  740,  745,  760,  782,  785,
        788,  829,  851,  854,  869,  870,  890,  904,  932,  944,  968,
        982, 1000, 1013, 1015, 1018, 1026, 1028, 1031, 1032, 1037, 1064,
       1069, 1070, 1073, 1093, 1100, 1114, 1115, 1117, 1119, 1120, 1125,
       1127, 1132, 1138, 1140, 1150, 1151, 1158, 1159, 1162, 1168, 1171,
       1174, 1177, 1179, 1190, 1192, 1195, 1196, 1202, 1205, 1210, 1212,
       1215, 1220, 1222, 1223, 1226, 1234, 1235, 1252, 1253, 1261, 1266,
       1274, 1279, 1300, 1302, 1305, 1308, 1312, 1314, 1327, 1343, 1344,
       1358, 1360, 1361, 1362, 1364, 1368, 1378, 1386, 1417, 1429, 1430,
       1440, 1454, 1463, 1467, 1471, 1478, 1479, 1480, 1481, 1488, 1490,
       1498, 1501, 1507, 1516, 1521, 1532, 1533, 1536, 1537, 1542, 1552,
       1558, 1565, 1566, 1569, 1571, 1574, 1585, 1587, 1597, 1607, 1608,
       1620, 1626, 1628, 1635, 1639, 1640, 1645, 1648, 1654, 1656, 1663,
       1669, 1677, 1681, 1688, 1692, 1695, 1699, 1711, 1717, 1723, 1738,
       1741, 1745, 1750, 1753, 1767, 1768, 1773, 1779, 1784, 1789, 1791,
       1792, 1797, 1800, 1804, 1810, 1814, 1816, 1817, 1822, 1830, 1831,
       1836, 1850, 1851, 1865, 1870, 1871, 1874, 1876, 1878, 1887, 1890,
       1898, 1900, 1905, 1906, 1907, 1908, 1912, 1919, 1921, 1924, 1937,
       1940, 1942, 1943, 1948, 1949, 1956, 1964, 1967, 1968, 1971, 1978,
       1985, 1989, 1996, 1999, 2007, 2159, 2161, 2166, 2169, 2179, 2184,
       2207, 2220, 2229, 2237, 2255, 2256, 2280, 2293, 2327, 2332, 2346,
       2383, 2405, 2420, 2453, 2459, 2498, 2506, 2514, 2534, 2542, 2563,
       2626, 2634, 2636, 2647, 2654, 2660, 2685, 2686, 2687, 2691, 2692,
       2758, 2760, 2791, 2800, 2836, 2843, 2845, 2848, 2884, 2890, 2894,
       2938, 2977, 2987, 3005, 3015, 3042, 3080, 3111, 3138, 3155, 3164,
       3191, 3216, 3272, 3273, 3277, 3291, 3315, 3322, 3335, 3339, 3389,
       3405, 3422, 3428, 3433, 3474, 3512, 3528, 3551, 3566, 3586, 3629,
       3751, 3755, 3775, 3810, 3822, 3859, 3904, 3911, 3925, 3933, 3940,
       4025, 4027, 4032, 4044, 4064, 4069, 4075, 4080, 4084, 4098, 4102,
       4106, 4108, 4128, 4162, 4165, 4172, 4179, 4183, 4203, 4208, 4219,
       4251, 4255, 4258, 4262, 4271, 4283, 4313, 4317, 4330, 4339, 4360,
       4370, 4382, 4396, 4415, 4427, 4435, 4473, 4474, 4491, 4499, 4510,
       4515, 4534, 4536, 4562, 4573, 4592, 4614, 4621, 4632, 4656, 4684,
       4701, 4713, 4719, 4722, 4724, 4728, 4734, 4738, 4747, 4757, 4785,
       4786, 4798, 4814, 4815, 4852, 4855, 4863, 4873, 4899, 4936, 4943,
       4949, 4958, 4961, 4967, 4971, 4990, 5032, 5107, 5109, 5127, 5210,
       5213, 5242, 5248, 5251, 5343, 5351, 5404, 5409, 5523, 5525, 5542,
       5549, 5568, 5571, 5574, 5668, 5678, 5694, 5707, 5716, 5776, 5794,
       5818, 5857, 5877, 5908, 5918, 5930, 5964, 5967, 5972, 5978, 6010,
       6164, 6658, 6816, 6818, 6928, 6995, 7007, 7018, 7019, 7029, 7034,
       7035, 7036, 7045, 7046, 7048, 7058, 7059, 7063, 7068, 7069, 7078,
       7080, 7082, 7083, 7086, 7089, 7091, 7104, 7105, 7110, 7114, 7116,
       7125, 7127, 7132, 7135, 7143, 7146, 7159, 7160, 7168, 7169, 7179,
       7184, 7186, 7189, 7191, 7196, 7199, 7205, 7206, 7210, 7212, 7215,
       7219, 7224, 7232, 7238, 7240, 7241, 7251, 7253, 7255, 7259, 7264,
       7266, 7269, 7293, 7295, 7318, 7320, 7323, 7326, 7343, 7347, 7348,
       7352, 7353, 7358, 7362, 7364, 7365, 7367, 7368, 7391, 7396, 7398,
       7403, 7415, 7424, 7426, 7436, 7438, 7441, 7450, 7459, 7464, 7468,
       7472, 7484, 7486, 7493, 7495, 7497, 7498, 7499, 7500, 7501, 7506,
       7509, 7513, 7527, 7531, 7535, 7539, 7545, 7556, 7557, 7561, 7570,
       7579, 7586, 7588, 7591, 7592, 7602, 7605, 7609, 7615, 7616, 7617,
       7619, 7628, 7634, 7636, 7637, 7638, 7642, 7645, 7651, 7653, 7657,
       7658, 7659, 7662, 7666, 7675, 7678, 7679, 7684, 7696, 7704, 7705,
       7707, 7711, 7712, 7713, 7717, 7722, 7727, 7731, 7737, 7744, 7748,
       7753, 7757, 7759, 7761, 7765, 7766, 7771, 7777, 7783, 7788, 7796,
       7797, 7809, 7810, 7811, 7812, 7817, 7824, 7826, 7829, 7831, 7832,
       7833, 7844, 7850, 7858, 7862, 7864, 7869, 7891, 7900, 7903, 7908,
       7931, 7932, 7936, 7950, 7953, 7957, 7963, 7964, 7966, 7968, 7974,
       7980, 7981, 7985, 7988, 7993, 7999, 8011, 8025, 8027, 8033, 8034,
       8043, 8078, 8089, 8132, 8141, 8147, 8156, 8173, 8200, 8209, 8244,
       8255, 8317, 8319, 8360, 8390, 8397, 8408, 8417, 8419, 8492, 8503,
       8517, 8520, 8528, 8530, 8544, 8582, 8587, 8596, 8604, 8618, 8623,
       8627, 8640, 8671, 8686, 8690, 8736, 8742, 8744, 8749, 8766, 8769,
       8784, 8805, 8842, 8847, 8880, 8881, 8890, 8923, 8931, 8936, 8969,
       8993, 9007, 9008, 9012, 9014, 9015, 9016, 9017, 9025, 9028, 9039,
       9042, 9044, 9045, 9059, 9064, 9066, 9076, 9081, 9093, 9094, 9106,
       9110, 9115, 9117, 9120, 9122, 9124, 9143, 9145, 9159, 9185, 9198,
       9207, 9220, 9232, 9236, 9238, 9256, 9259, 9260, 9263, 9264, 9265,
       9270, 9274, 9280, 9285, 9286, 9287, 9288, 9291, 9301, 9302, 9311,
       9312, 9314, 9316, 9319, 9321, 9327, 9340, 9342, 9344, 9355, 9363,
       9373, 9389, 9392, 9397, 9398, 9403, 9418, 9421, 9428, 9429, 9434,
       9450, 9455, 9457, 9458, 9460, 9462, 9475, 9480, 9488, 9490, 9516,
       9519, 9525, 9526, 9532, 9533, 9539, 9541, 9542, 9558, 9560, 9561,
       9564, 9566, 9569, 9570, 9574, 9575, 9582, 9596, 9600, 9602, 9605,
       9609, 9618, 9619, 9620, 9635, 9637, 9639, 9641, 9642, 9647, 9652,
       9654, 9657, 9662, 9672, 9678, 9680, 9684, 9689, 9708, 9711, 9714,
       9718, 9730, 9735, 9747, 9749, 9755, 9763, 9769, 9777, 9778, 9781,
       9782, 9787, 9788, 9789, 9798, 9799, 9811, 9819, 9821, 9822, 9823,
       9832, 9833, 9836, 9841, 9843, 9850, 9854, 9858, 9860, 9878, 9901,
       9906, 9914, 9928, 9934, 9936, 9947, 9953, 9955, 9956, 9969, 9981,
       9983, 9986, 9988]),)
sample_indices [   6   25   41  130  147  172  194  238  241  249  253  306  308  349
  355  389  423  446  451  457  470  475  502  511  528  543  574  580
  608  609  610  635  643  645  659  663  673  676  696  740  745  760
  782  785  788  829  851  854  869  870  890  904  932  944  968  982
 1000 1013 1015 1018 1026 1028 1031 1032 1037 1064 1069 1070 1073 1093
 1100 1114 1115 1117 1119 1120 1125 1127 1132 1138 1140 1150 1151 1158
 1159 1162 1168 1171 1174 1177 1179 1190 1192 1195 1196 1202 1205 1210
 1212 1215 1220 1222 1223 1226 1234 1235 1252 1253 1261 1266 1274 1279
 1300 1302 1305 1308 1312 1314 1327 1343 1344 1358 1360 1361 1362 1364
 1368 1378 1386 1417 1429 1430 1440 1454 1463 1467 1471 1478 1479 1480
 1481 1488 1490 1498 1501 1507 1516 1521 1532 1533 1536 1537 1542 1552
 1558 1565 1566 1569 1571 1574 1585 1587 1597 1607 1608 1620 1626 1628
 1635 1639 1640 1645 1648 1654 1656 1663 1669 1677 1681 1688 1692 1695
 1699 1711 1717 1723 1738 1741 1745 1750 1753 1767 1768 1773 1779 1784
 1789 1791 1792 1797 1800 1804 1810 1814 1816 1817 1822 1830 1831 1836
 1850 1851 1865 1870 1871 1874 1876 1878 1887 1890 1898 1900 1905 1906
 1907 1908 1912 1919 1921 1924 1937 1940 1942 1943 1948 1949 1956 1964
 1967 1968 1971 1978 1985 1989 1996 1999 2007 2159 2161 2166 2169 2179
 2184 2207 2220 2229 2237 2255 2256 2280 2293 2327 2332 2346 2383 2405
 2420 2453 2459 2498 2506 2514 2534 2542 2563 2626 2634 2636 2647 2654
 2660 2685 2686 2687 2691 2692 2758 2760 2791 2800 2836 2843 2845 2848
 2884 2890 2894 2938 2977 2987 3005 3015 3042 3080 3111 3138 3155 3164
 3191 3216 3272 3273 3277 3291 3315 3322 3335 3339 3389 3405 3422 3428
 3433 3474 3512 3528 3551 3566 3586 3629 3751 3755 3775 3810 3822 3859
 3904 3911 3925 3933 3940 4025 4027 4032 4044 4064 4069 4075 4080 4084
 4098 4102 4106 4108 4128 4162 4165 4172 4179 4183 4203 4208 4219 4251
 4255 4258 4262 4271 4283 4313 4317 4330 4339 4360 4370 4382 4396 4415
 4427 4435 4473 4474 4491 4499 4510 4515 4534 4536 4562 4573 4592 4614
 4621 4632 4656 4684 4701 4713 4719 4722 4724 4728 4734 4738 4747 4757
 4785 4786 4798 4814 4815 4852 4855 4863 4873 4899 4936 4943 4949 4958
 4961 4967 4971 4990 5032 5107 5109 5127 5210 5213 5242 5248 5251 5343
 5351 5404 5409 5523 5525 5542 5549 5568 5571 5574 5668 5678 5694 5707
 5716 5776 5794 5818 5857 5877 5908 5918 5930 5964 5967 5972 5978 6010
 6164 6658 6816 6818 6928 6995 7007 7018 7019 7029 7034 7035 7036 7045
 7046 7048 7058 7059 7063 7068 7069 7078 7080 7082 7083 7086 7089 7091
 7104 7105 7110 7114 7116 7125 7127 7132 7135 7143 7146 7159 7160 7168
 7169 7179 7184 7186 7189 7191 7196 7199 7205 7206 7210 7212 7215 7219
 7224 7232 7238 7240 7241 7251 7253 7255 7259 7264 7266 7269 7293 7295
 7318 7320 7323 7326 7343 7347 7348 7352 7353 7358 7362 7364 7365 7367
 7368 7391 7396 7398 7403 7415 7424 7426 7436 7438 7441 7450 7459 7464
 7468 7472 7484 7486 7493 7495 7497 7498 7499 7500 7501 7506 7509 7513
 7527 7531 7535 7539 7545 7556 7557 7561 7570 7579 7586 7588 7591 7592
 7602 7605 7609 7615 7616 7617 7619 7628 7634 7636 7637 7638 7642 7645
 7651 7653 7657 7658 7659 7662 7666 7675 7678 7679 7684 7696 7704 7705
 7707 7711 7712 7713 7717 7722 7727 7731 7737 7744 7748 7753 7757 7759
 7761 7765 7766 7771 7777 7783 7788 7796 7797 7809 7810 7811 7812 7817
 7824 7826 7829 7831 7832 7833 7844 7850 7858 7862 7864 7869 7891 7900
 7903 7908 7931 7932 7936 7950 7953 7957 7963 7964 7966 7968 7974 7980
 7981 7985 7988 7993 7999 8011 8025 8027 8033 8034 8043 8078 8089 8132
 8141 8147 8156 8173 8200 8209 8244 8255 8317 8319 8360 8390 8397 8408
 8417 8419 8492 8503 8517 8520 8528 8530 8544 8582 8587 8596 8604 8618
 8623 8627 8640 8671 8686 8690 8736 8742 8744 8749 8766 8769 8784 8805
 8842 8847 8880 8881 8890 8923 8931 8936 8969 8993 9007 9008 9012 9014
 9015 9016 9017 9025 9028 9039 9042 9044 9045 9059 9064 9066 9076 9081
 9093 9094 9106 9110 9115 9117 9120 9122 9124 9143 9145 9159 9185 9198
 9207 9220 9232 9236 9238 9256 9259 9260 9263 9264 9265 9270 9274 9280
 9285 9286 9287 9288 9291 9301 9302 9311 9312 9314 9316 9319 9321 9327
 9340 9342 9344 9355 9363 9373 9389 9392 9397 9398 9403 9418 9421 9428
 9429 9434 9450 9455 9457 9458 9460 9462 9475 9480 9488 9490 9516 9519
 9525 9526 9532 9533 9539 9541 9542 9558 9560 9561 9564 9566 9569 9570
 9574 9575 9582 9596 9600 9602 9605 9609 9618 9619 9620 9635 9637 9639
 9641 9642 9647 9652 9654 9657 9662 9672 9678 9680 9684 9689 9708 9711
 9714 9718 9730 9735 9747 9749 9755 9763 9769 9777 9778 9781 9782 9787
 9788 9789 9798 9799 9811 9819 9821 9822 9823 9832 9833 9836 9841 9843
 9850 9854 9858 9860 9878 9901 9906 9914 9928 9934 9936 9947 9953 9955
 9956 9969 9981 9983 9986 9988]
subset_sample_indices [2184 9458 1501 9045 1507 4339  982 9981 1210  355 7862 7132 7499 1789
 8766 1816 7396 1695 7891 9788 7968  635 2506 1226 2692]
subset_img_paths ['cifar10/cifar10/val/bird/0185.png', 'cifar10/cifar10/val/truck/0459.png', 'cifar10/cifar10/val/automobile/0502.png', 'cifar10/cifar10/val/truck/0046.png', 'cifar10/cifar10/val/automobile/0508.png', 'cifar10/cifar10/val/deer/0340.png', 'cifar10/cifar10/val/airplane/0983.png', 'cifar10/cifar10/val/truck/0982.png', 'cifar10/cifar10/val/automobile/0211.png', 'cifar10/cifar10/val/airplane/0356.png', 'cifar10/cifar10/val/horse/0863.png', 'cifar10/cifar10/val/horse/0133.png', 'cifar10/cifar10/val/horse/0500.png', 'cifar10/cifar10/val/automobile/0790.png', 'cifar10/cifar10/val/ship/0767.png', 'cifar10/cifar10/val/automobile/0817.png', 'cifar10/cifar10/val/horse/0397.png', 'cifar10/cifar10/val/automobile/0696.png', 'cifar10/cifar10/val/horse/0892.png', 'cifar10/cifar10/val/truck/0789.png', 'cifar10/cifar10/val/horse/0969.png', 'cifar10/cifar10/val/airplane/0636.png', 'cifar10/cifar10/val/bird/0507.png', 'cifar10/cifar10/val/automobile/0227.png', 'cifar10/cifar10/val/bird/0693.png']
rows:  5
cols:  5
len imgs:  25
=> saved grid_8.pdf, accuracy = 0.207, nsamples = 916
=> grid 8 labels: [2 9 1 9 1 4 0 9 1 0 7 7 7 1 8 1 7 1 7 9 7 0 2 1 2]
label_i 1
preds [9 9 8 ... 0 0 0]
np.where(preds == label_i) (array([  42,   49,  107,  123,  222,  277,  327,  496,  526,  731,  832,
       1081, 1418, 1466, 1495, 1539, 1572, 1623, 1734, 1859, 2063, 2099,
       2131, 2188, 2194, 2230, 2268, 2271, 2281, 2331, 2416, 2493, 2507,
       2564, 2592, 2605, 2615, 2623, 2625, 2759, 2829, 2841, 2851, 2914,
       2916, 2991, 2995, 3016, 3037, 3039, 3089, 3131, 3137, 3154, 3188,
       3311, 3346, 3378, 3436, 3478, 3488, 3527, 3529, 3552, 3569, 3584,
       3618, 3633, 3639, 3645, 3665, 3675, 3676, 3766, 3768, 3882, 3988,
       4049, 4072, 4161, 4180, 4202, 4206, 4216, 4232, 4243, 4248, 4257,
       4264, 4299, 4307, 4318, 4340, 4342, 4346, 4377, 4459, 4461, 4463,
       4498, 4615, 4665, 4729, 4730, 4737, 4778, 4802, 4824, 4845, 4858,
       4935, 5008, 5047, 5206, 5244, 5259, 5599, 5727, 5739, 5760, 5936,
       5992, 6089, 6094, 6095, 6109, 6139, 6147, 6172, 6197, 6210, 6250,
       6284, 6296, 6298, 6299, 6302, 6303, 6380, 6395, 6439, 6441, 6587,
       6608, 6612, 6616, 6666, 6754, 6767, 6783, 6805, 6806, 6811, 6820,
       6839, 6913, 6935, 6937, 6943, 6946, 6982, 6990, 6991, 7001, 7167,
       7280, 7282, 7488, 7787, 8002, 8041, 8061, 8108, 8124, 8177, 8383,
       8401, 8421, 8473, 8572, 8574, 8678, 8691, 8743, 8814, 8869, 9082,
       9204, 9362, 9430, 9487, 9971]),)
sample_indices [  42   49  107  123  222  277  327  496  526  731  832 1081 1418 1466
 1495 1539 1572 1623 1734 1859 2063 2099 2131 2188 2194 2230 2268 2271
 2281 2331 2416 2493 2507 2564 2592 2605 2615 2623 2625 2759 2829 2841
 2851 2914 2916 2991 2995 3016 3037 3039 3089 3131 3137 3154 3188 3311
 3346 3378 3436 3478 3488 3527 3529 3552 3569 3584 3618 3633 3639 3645
 3665 3675 3676 3766 3768 3882 3988 4049 4072 4161 4180 4202 4206 4216
 4232 4243 4248 4257 4264 4299 4307 4318 4340 4342 4346 4377 4459 4461
 4463 4498 4615 4665 4729 4730 4737 4778 4802 4824 4845 4858 4935 5008
 5047 5206 5244 5259 5599 5727 5739 5760 5936 5992 6089 6094 6095 6109
 6139 6147 6172 6197 6210 6250 6284 6296 6298 6299 6302 6303 6380 6395
 6439 6441 6587 6608 6612 6616 6666 6754 6767 6783 6805 6806 6811 6820
 6839 6913 6935 6937 6943 6946 6982 6990 6991 7001 7167 7280 7282 7488
 7787 8002 8041 8061 8108 8124 8177 8383 8401 8421 8473 8572 8574 8678
 8691 8743 8814 8869 9082 9204 9362 9430 9487 9971]
subset_sample_indices [4935 3768 7001 4461 6139 3675 1734 6937 6616  496  277 6395 6943 8041
 6982 7488 2623 3618 6380 6089 3346 9204 6302 8691 9971]
subset_img_paths ['cifar10/cifar10/val/deer/0936.png', 'cifar10/cifar10/val/cat/0769.png', 'cifar10/cifar10/val/horse/0002.png', 'cifar10/cifar10/val/deer/0462.png', 'cifar10/cifar10/val/frog/0140.png', 'cifar10/cifar10/val/cat/0676.png', 'cifar10/cifar10/val/automobile/0735.png', 'cifar10/cifar10/val/frog/0938.png', 'cifar10/cifar10/val/frog/0617.png', 'cifar10/cifar10/val/airplane/0497.png', 'cifar10/cifar10/val/airplane/0278.png', 'cifar10/cifar10/val/frog/0396.png', 'cifar10/cifar10/val/frog/0944.png', 'cifar10/cifar10/val/ship/0042.png', 'cifar10/cifar10/val/frog/0983.png', 'cifar10/cifar10/val/horse/0489.png', 'cifar10/cifar10/val/bird/0624.png', 'cifar10/cifar10/val/cat/0619.png', 'cifar10/cifar10/val/frog/0381.png', 'cifar10/cifar10/val/frog/0090.png', 'cifar10/cifar10/val/cat/0347.png', 'cifar10/cifar10/val/truck/0205.png', 'cifar10/cifar10/val/frog/0303.png', 'cifar10/cifar10/val/ship/0692.png', 'cifar10/cifar10/val/truck/0972.png']
rows:  5
cols:  5
len imgs:  25
=> saved grid_9.pdf, accuracy = 0.141, nsamples = 192
=> grid 9 labels: [4 3 7 4 6 3 1 6 6 0 0 6 6 8 6 7 2 3 6 6 3 9 6 8 9]
Namespace(activation='leaky-relu', arch='resnet18', batch_size=32, cls_num=0, cls_size=[10], data='cifar10/cifar10', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_cls=1, num_hidden=1, num_samples_per_class=16, pretrained='saved/cifar10/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=True, workers=4)
=> creating model 'resnet18'
Namespace(activation='leaky-relu', arch='resnet18', batch_size=32, cls_num=0, cls_size=10, data='cifar10/cifar10', dim=128, hidden_dim=4096, kmeans_cls=None, model='self-classifier', num_classes=10, num_hidden=1, num_samples_per_class=16, pretrained='saved/cifar10/model_best.pth.tar', print_freq=10, save_path='../saved/', seed=None, subset_file=None, tau=0.1, use_bn=True)
=> creating model 'resnet18'
Model(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (classifier_head): MLPhead(
    (mlp): Linear(in_features=512, out_features=128, bias=True)
  )
  (classifier_final): Linear(in_features=128, out_features=10, bias=False)
)
=> loading checkpoint 'saved/cifar10/model_best.pth.tar'
=> loaded pre-trained model 'saved/cifar10/model_best.pth.tar' (epoch 99)
=> using 1 GPUs.
Test: [  0/313]	Time  1.823 ( 1.823)
Test: [ 10/313]	Time  0.105 ( 0.264)
Test: [ 20/313]	Time  0.128 ( 0.199)
Test: [ 30/313]	Time  0.119 ( 0.175)
Test: [ 40/313]	Time  0.153 ( 0.166)
Test: [ 50/313]	Time  0.124 ( 0.161)
Test: [ 60/313]	Time  0.095 ( 0.153)
Test: [ 70/313]	Time  0.103 ( 0.146)
Test: [ 80/313]	Time  0.097 ( 0.140)
Test: [ 90/313]	Time  0.096 ( 0.135)
Test: [100/313]	Time  0.106 ( 0.132)
Test: [110/313]	Time  0.097 ( 0.130)
Test: [120/313]	Time  0.095 ( 0.128)
Test: [130/313]	Time  0.096 ( 0.126)
Test: [140/313]	Time  0.093 ( 0.124)
Test: [150/313]	Time  0.095 ( 0.122)
Test: [160/313]	Time  0.111 ( 0.121)
Test: [170/313]	Time  0.099 ( 0.120)
Test: [180/313]	Time  0.101 ( 0.119)
Test: [190/313]	Time  0.100 ( 0.119)
Test: [200/313]	Time  0.115 ( 0.118)
Test: [210/313]	Time  0.097 ( 0.117)
Test: [220/313]	Time  0.114 ( 0.117)
Test: [230/313]	Time  0.099 ( 0.116)
Test: [240/313]	Time  0.098 ( 0.115)
Test: [250/313]	Time  0.111 ( 0.115)
Test: [260/313]	Time  0.099 ( 0.114)
Test: [270/313]	Time  0.098 ( 0.113)
Test: [280/313]	Time  0.100 ( 0.113)
Test: [290/313]	Time  0.097 ( 0.112)
Test: [300/313]	Time  0.099 ( 0.112)
Test: [310/313]	Time  0.098 ( 0.112)
targets:  [0 0 0 ... 9 9 9]
preds:  [4 3 3 ... 6 6 6]
=> number of samples: 10000
=> number of unique assignments: 10
=> NMI: 50.592%
=> Adjusted NMI: 50.504%
=> Adjusted Rand-Index: 39.185%
=> Accuracy: 58.650%
label_i 5
preds [4 3 3 ... 6 6 6]
np.where(preds == label_i) (array([ 113,  251,  289,  674,  980,  999, 1000, 1003, 1004, 1005, 1006,
       1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018,
       1019, 1020, 1021, 1022, 1023, 1027, 1029, 1030, 1031, 1032, 1033,
       1034, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046,
       1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057,
       1058, 1059, 1060, 1061, 1062, 1064, 1066, 1067, 1068, 1069, 1070,
       1071, 1072, 1074, 1075, 1076, 1077, 1078, 1079, 1081, 1082, 1083,
       1084, 1086, 1087, 1089, 1090, 1091, 1092, 1094, 1095, 1096, 1097,
       1098, 1099, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109,
       1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120,
       1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131,
       1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142,
       1143, 1145, 1146, 1147, 1148, 1149, 1151, 1152, 1153, 1154, 1155,
       1156, 1159, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1170, 1171,
       1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182,
       1183, 1184, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1196,
       1197, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208,
       1209, 1210, 1211, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1221,
       1222, 1223, 1224, 1225, 1226, 1227, 1228, 1230, 1231, 1232, 1233,
       1234, 1235, 1236, 1237, 1238, 1240, 1241, 1242, 1243, 1244, 1246,
       1247, 1248, 1249, 1250, 1251, 1253, 1254, 1255, 1256, 1257, 1258,
       1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1270, 1271,
       1272, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283,
       1284, 1285, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295,
       1296, 1297, 1298, 1299, 1302, 1303, 1304, 1305, 1307, 1308, 1309,
       1310, 1311, 1312, 1313, 1315, 1316, 1317, 1318, 1319, 1320, 1321,
       1322, 1323, 1324, 1325, 1327, 1328, 1329, 1330, 1331, 1332, 1333,
       1334, 1335, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1346,
       1347, 1348, 1349, 1350, 1352, 1353, 1355, 1356, 1357, 1358, 1359,
       1362, 1363, 1364, 1365, 1367, 1369, 1370, 1371, 1372, 1374, 1375,
       1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386,
       1387, 1388, 1389, 1390, 1391, 1393, 1395, 1397, 1398, 1399, 1400,
       1401, 1402, 1403, 1405, 1406, 1409, 1410, 1411, 1412, 1413, 1414,
       1415, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427,
       1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438,
       1439, 1440, 1441, 1442, 1443, 1445, 1446, 1447, 1448, 1449, 1450,
       1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1461, 1462,
       1463, 1464, 1465, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474,
       1476, 1477, 1478, 1479, 1480, 1482, 1483, 1484, 1485, 1486, 1487,
       1488, 1489, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499,
       1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1510, 1511,
       1513, 1514, 1515, 1516, 1517, 1519, 1520, 1522, 1523, 1524, 1525,
       1528, 1529, 1530, 1531, 1532, 1533, 1535, 1536, 1537, 1538, 1540,
       1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1553,
       1554, 1555, 1556, 1557, 1558, 1559, 1562, 1563, 1564, 1565, 1566,
       1567, 1568, 1569, 1570, 1571, 1573, 1575, 1576, 1577, 1578, 1579,
       1580, 1581, 1582, 1583, 1584, 1585, 1587, 1588, 1589, 1590, 1591,
       1592, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603,
       1604, 1605, 1606, 1607, 1610, 1611, 1612, 1614, 1615, 1616, 1617,
       1618, 1619, 1620, 1621, 1622, 1624, 1625, 1626, 1627, 1628, 1629,
       1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1640, 1641,
       1642, 1643, 1644, 1645, 1646, 1648, 1649, 1650, 1651, 1652, 1654,
       1655, 1657, 1658, 1659, 1660, 1661, 1663, 1664, 1665, 1666, 1667,
       1668, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679,
       1680, 1681, 1682, 1683, 1684, 1685, 1687, 1689, 1691, 1692, 1693,
       1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706,
       1707, 1708, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1719,
       1720, 1721, 1722, 1723, 1725, 1726, 1727, 1728, 1729, 1730, 1731,
       1732, 1733, 1735, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1746,
       1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757,
       1758, 1759, 1760, 1762, 1763, 1764, 1765, 1766, 1767, 1769, 1770,
       1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1780, 1781, 1782,
       1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793,
       1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804,
       1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815,
       1816, 1817, 1818, 1819, 1820, 1822, 1823, 1824, 1825, 1827, 1828,
       1829, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840,
       1841, 1842, 1843, 1844, 1846, 1847, 1848, 1849, 1851, 1852, 1853,
       1854, 1856, 1858, 1859, 1860, 1862, 1863, 1864, 1865, 1866, 1867,
       1868, 1869, 1870, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879,
       1880, 1881, 1882, 1883, 1884, 1886, 1887, 1889, 1891, 1892, 1893,
       1895, 1896, 1897, 1898, 1900, 1901, 1902, 1903, 1904, 1905, 1906,
       1907, 1908, 1909, 1910, 1911, 1912, 1915, 1917, 1918, 1919, 1920,
       1921, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934,
       1935, 1936, 1937, 1939, 1940, 1941, 1943, 1944, 1945, 1946, 1947,
       1950, 1952, 1953, 1954, 1955, 1956, 1957, 1959, 1961, 1962, 1963,
       1964, 1965, 1966, 1969, 1970, 1971, 1972, 1973, 1974, 1976, 1977,
       1978, 1979, 1982, 1983, 1985, 1986, 1987, 1988, 1989, 1991, 1992,
       1993, 1994, 1995, 1996, 1997, 1998, 1999, 5082, 7493, 8129, 8244,
       8270, 8423, 8455, 8474, 8550, 8567, 8571, 8635, 8665, 8734, 8788,
       8795, 8813, 8857, 8976, 9095, 9112, 9152, 9209, 9219, 9354, 9401,
       9488, 9552, 9556, 9583, 9640, 9725, 9742, 9807, 9811, 9820, 9836,
       9841, 9893, 9925, 9950, 9986]),)
sample_indices [ 113  251  289  674  980  999 1000 1003 1004 1005 1006 1007 1008 1009
 1010 1011 1012 1013 1015 1016 1017 1018 1019 1020 1021 1022 1023 1027
 1029 1030 1031 1032 1033 1034 1036 1038 1039 1040 1041 1042 1043 1044
 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058
 1059 1060 1061 1062 1064 1066 1067 1068 1069 1070 1071 1072 1074 1075
 1076 1077 1078 1079 1081 1082 1083 1084 1086 1087 1089 1090 1091 1092
 1094 1095 1096 1097 1098 1099 1100 1102 1103 1104 1105 1106 1107 1108
 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122
 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136
 1137 1138 1139 1140 1141 1142 1143 1145 1146 1147 1148 1149 1151 1152
 1153 1154 1155 1156 1159 1162 1163 1164 1165 1166 1167 1168 1170 1171
 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185
 1187 1188 1189 1190 1191 1192 1193 1196 1197 1199 1200 1201 1202 1203
 1204 1205 1206 1207 1208 1209 1210 1211 1213 1214 1215 1216 1217 1218
 1219 1221 1222 1223 1224 1225 1226 1227 1228 1230 1231 1232 1233 1234
 1235 1236 1237 1238 1240 1241 1242 1243 1244 1246 1247 1248 1249 1250
 1251 1253 1254 1255 1256 1257 1258 1260 1261 1262 1263 1264 1265 1266
 1267 1268 1270 1271 1272 1274 1275 1276 1277 1278 1279 1280 1281 1282
 1283 1284 1285 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297
 1298 1299 1302 1303 1304 1305 1307 1308 1309 1310 1311 1312 1313 1315
 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1327 1328 1329 1330
 1331 1332 1333 1334 1335 1337 1338 1339 1340 1341 1342 1343 1345 1346
 1347 1348 1349 1350 1352 1353 1355 1356 1357 1358 1359 1362 1363 1364
 1365 1367 1369 1370 1371 1372 1374 1375 1376 1377 1378 1379 1380 1381
 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1393 1395 1397 1398
 1399 1400 1401 1402 1403 1405 1406 1409 1410 1411 1412 1413 1414 1415
 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431
 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1445 1446
 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1461
 1462 1463 1464 1465 1467 1468 1469 1470 1471 1472 1473 1474 1476 1477
 1478 1479 1480 1482 1483 1484 1485 1486 1487 1488 1489 1491 1492 1493
 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507
 1508 1510 1511 1513 1514 1515 1516 1517 1519 1520 1522 1523 1524 1525
 1528 1529 1530 1531 1532 1533 1535 1536 1537 1538 1540 1542 1543 1544
 1545 1546 1547 1548 1549 1550 1551 1553 1554 1555 1556 1557 1558 1559
 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1573 1575 1576 1577
 1578 1579 1580 1581 1582 1583 1584 1585 1587 1588 1589 1590 1591 1592
 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607
 1610 1611 1612 1614 1615 1616 1617 1618 1619 1620 1621 1622 1624 1625
 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1640
 1641 1642 1643 1644 1645 1646 1648 1649 1650 1651 1652 1654 1655 1657
 1658 1659 1660 1661 1663 1664 1665 1666 1667 1668 1670 1671 1672 1673
 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1687 1689
 1691 1692 1693 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706
 1707 1708 1710 1711 1712 1713 1714 1715 1716 1717 1719 1720 1721 1722
 1723 1725 1726 1727 1728 1729 1730 1731 1732 1733 1735 1738 1739 1740
 1741 1742 1743 1744 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755
 1756 1757 1758 1759 1760 1762 1763 1764 1765 1766 1767 1769 1770 1771
 1772 1773 1774 1775 1776 1777 1778 1780 1781 1782 1783 1784 1785 1786
 1787 1788 1789 1790 1791 1792 1793 1794 1795 1796 1797 1798 1799 1800
 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814
 1815 1816 1817 1818 1819 1820 1822 1823 1824 1825 1827 1828 1829 1831
 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1846
 1847 1848 1849 1851 1852 1853 1854 1856 1858 1859 1860 1862 1863 1864
 1865 1866 1867 1868 1869 1870 1872 1873 1874 1875 1876 1877 1878 1879
 1880 1881 1882 1883 1884 1886 1887 1889 1891 1892 1893 1895 1896 1897
 1898 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912
 1915 1917 1918 1919 1920 1921 1925 1926 1927 1928 1929 1930 1931 1932
 1933 1934 1935 1936 1937 1939 1940 1941 1943 1944 1945 1946 1947 1950
 1952 1953 1954 1955 1956 1957 1959 1961 1962 1963 1964 1965 1966 1969
 1970 1971 1972 1973 1974 1976 1977 1978 1979 1982 1983 1985 1986 1987
 1988 1989 1991 1992 1993 1994 1995 1996 1997 1998 1999 5082 7493 8129
 8244 8270 8423 8455 8474 8550 8567 8571 8635 8665 8734 8788 8795 8813
 8857 8976 9095 9112 9152 9209 9219 9354 9401 9488 9552 9556 9583 9640
 9725 9742 9807 9811 9820 9836 9841 9893 9925 9950 9986]
subset_sample_indices [1282 1524 1568 1555 1159 1298 1058 1689 1108 1010 1415 1469 1399 9811
 1817 1216]
subset_img_paths ['cifar10/cifar10/val/automobile/0283.png', 'cifar10/cifar10/val/automobile/0525.png', 'cifar10/cifar10/val/automobile/0569.png', 'cifar10/cifar10/val/automobile/0556.png', 'cifar10/cifar10/val/automobile/0160.png', 'cifar10/cifar10/val/automobile/0299.png', 'cifar10/cifar10/val/automobile/0059.png', 'cifar10/cifar10/val/automobile/0690.png', 'cifar10/cifar10/val/automobile/0109.png', 'cifar10/cifar10/val/automobile/0011.png', 'cifar10/cifar10/val/automobile/0416.png', 'cifar10/cifar10/val/automobile/0470.png', 'cifar10/cifar10/val/automobile/0400.png', 'cifar10/cifar10/val/truck/0812.png', 'cifar10/cifar10/val/automobile/0818.png', 'cifar10/cifar10/val/automobile/0217.png']
rows:  4
cols:  4
len imgs:  16
=> saved grid_0.pdf, accuracy = 0.947, nsamples = 907
=> grid 0 labels: [1 1 1 1 1 1 1 1 1 1 1 1 1 9 1 1]
label_i 6
preds [4 3 3 ... 6 6 6]
np.where(preds == label_i) (array([  13,   23,   41, ..., 9997, 9998, 9999]),)
sample_indices [  13   23   41 ... 9997 9998 9999]
subset_sample_indices [9780 7797 9766 9439 6135 9886  355 9422 9859 9028 9256 9922 1273 9035
 9466 9517]
subset_img_paths ['cifar10/cifar10/val/truck/0781.png', 'cifar10/cifar10/val/horse/0798.png', 'cifar10/cifar10/val/truck/0767.png', 'cifar10/cifar10/val/truck/0440.png', 'cifar10/cifar10/val/frog/0136.png', 'cifar10/cifar10/val/truck/0887.png', 'cifar10/cifar10/val/airplane/0356.png', 'cifar10/cifar10/val/truck/0423.png', 'cifar10/cifar10/val/truck/0860.png', 'cifar10/cifar10/val/truck/0029.png', 'cifar10/cifar10/val/truck/0257.png', 'cifar10/cifar10/val/truck/0923.png', 'cifar10/cifar10/val/automobile/0274.png', 'cifar10/cifar10/val/truck/0036.png', 'cifar10/cifar10/val/truck/0467.png', 'cifar10/cifar10/val/truck/0518.png']
rows:  4
cols:  4
len imgs:  16
=> saved grid_1.pdf, accuracy = 0.814, nsamples = 1143
=> grid 1 labels: [9 7 9 9 6 9 0 9 9 9 9 9 1 9 9 9]
label_i 8
preds [4 3 3 ... 6 6 6]
np.where(preds == label_i) (array([ 920, 1527, 2002, 2019, 2030, 2033, 2045, 2133, 2140, 2160, 2165,
       2194, 2226, 2275, 2279, 2282, 2283, 2296, 2298, 2313, 2319, 2320,
       2323, 2333, 2365, 2435, 2441, 2475, 2483, 2489, 2514, 2547, 2548,
       2576, 2594, 2602, 2607, 2624, 2628, 2671, 2675, 2682, 2700, 2705,
       2745, 2746, 2769, 2775, 2789, 2808, 2827, 2835, 2840, 2856, 2907,
       2912, 2916, 2948, 2952, 2957, 2983, 3010, 3016, 3033, 3059, 3065,
       3069, 3084, 3102, 3143, 3159, 3187, 3188, 3195, 3206, 3208, 3224,
       3226, 3262, 3311, 3328, 3346, 3348, 3367, 3388, 3391, 3397, 3446,
       3470, 3494, 3529, 3536, 3541, 3548, 3579, 3580, 3614, 3627, 3636,
       3650, 3662, 3664, 3675, 3687, 3691, 3722, 3745, 3778, 3781, 3789,
       3796, 3801, 3815, 3816, 3826, 3842, 3857, 3872, 3874, 3883, 3895,
       3946, 3949, 3961, 3976, 3980, 4030, 4068, 4121, 4136, 4144, 4169,
       4177, 4207, 4216, 4234, 4243, 4245, 4379, 4502, 4533, 4548, 4574,
       4639, 4668, 4700, 4939, 4974, 5074, 5852, 6000, 6001, 6003, 6004,
       6005, 6006, 6007, 6011, 6012, 6013, 6014, 6015, 6017, 6019, 6020,
       6021, 6022, 6024, 6029, 6030, 6031, 6032, 6033, 6034, 6035, 6038,
       6039, 6040, 6041, 6042, 6043, 6044, 6045, 6047, 6048, 6049, 6051,
       6053, 6054, 6055, 6056, 6058, 6059, 6062, 6064, 6067, 6069, 6070,
       6071, 6074, 6078, 6080, 6086, 6087, 6089, 6091, 6092, 6093, 6096,
       6097, 6098, 6100, 6101, 6103, 6104, 6106, 6110, 6112, 6113, 6114,
       6115, 6116, 6122, 6123, 6124, 6126, 6127, 6128, 6129, 6132, 6133,
       6136, 6138, 6139, 6141, 6142, 6143, 6144, 6147, 6148, 6149, 6150,
       6151, 6152, 6153, 6155, 6159, 6160, 6161, 6162, 6163, 6164, 6165,
       6166, 6167, 6168, 6169, 6170, 6171, 6172, 6174, 6176, 6177, 6179,
       6180, 6181, 6183, 6184, 6186, 6187, 6190, 6191, 6192, 6193, 6194,
       6196, 6197, 6200, 6201, 6203, 6206, 6207, 6209, 6212, 6215, 6216,
       6217, 6220, 6222, 6223, 6225, 6226, 6227, 6229, 6230, 6231, 6232,
       6233, 6235, 6237, 6239, 6243, 6244, 6245, 6246, 6248, 6250, 6253,
       6255, 6256, 6259, 6260, 6262, 6263, 6264, 6266, 6267, 6268, 6269,
       6270, 6271, 6272, 6273, 6275, 6276, 6277, 6278, 6279, 6280, 6282,
       6284, 6285, 6286, 6288, 6292, 6293, 6294, 6295, 6296, 6297, 6298,
       6299, 6300, 6301, 6302, 6303, 6305, 6306, 6307, 6310, 6311, 6312,
       6313, 6315, 6317, 6318, 6319, 6320, 6321, 6322, 6323, 6327, 6328,
       6329, 6332, 6335, 6336, 6338, 6339, 6340, 6341, 6346, 6347, 6348,
       6349, 6350, 6351, 6353, 6354, 6355, 6357, 6359, 6360, 6364, 6365,
       6366, 6368, 6369, 6371, 6375, 6380, 6381, 6382, 6383, 6384, 6385,
       6387, 6388, 6390, 6391, 6392, 6393, 6394, 6395, 6396, 6398, 6399,
       6401, 6402, 6403, 6404, 6406, 6407, 6408, 6411, 6412, 6414, 6416,
       6417, 6418, 6419, 6420, 6421, 6426, 6428, 6429, 6432, 6433, 6434,
       6436, 6437, 6440, 6441, 6442, 6443, 6444, 6445, 6446, 6448, 6449,
       6451, 6452, 6453, 6454, 6455, 6456, 6457, 6459, 6461, 6462, 6463,
       6465, 6466, 6469, 6471, 6475, 6476, 6477, 6478, 6479, 6480, 6481,
       6483, 6485, 6486, 6487, 6491, 6492, 6494, 6498, 6500, 6502, 6505,
       6508, 6509, 6510, 6511, 6512, 6513, 6514, 6515, 6517, 6518, 6519,
       6520, 6521, 6522, 6524, 6525, 6527, 6530, 6531, 6532, 6533, 6535,
       6537, 6540, 6541, 6544, 6545, 6546, 6547, 6548, 6549, 6550, 6551,
       6552, 6553, 6554, 6555, 6556, 6557, 6560, 6562, 6563, 6565, 6566,
       6567, 6569, 6570, 6571, 6573, 6580, 6583, 6584, 6586, 6588, 6590,
       6591, 6592, 6593, 6596, 6597, 6598, 6600, 6601, 6602, 6603, 6604,
       6605, 6606, 6608, 6610, 6612, 6614, 6615, 6616, 6617, 6622, 6623,
       6624, 6625, 6627, 6628, 6630, 6639, 6640, 6642, 6643, 6644, 6647,
       6650, 6651, 6653, 6655, 6656, 6658, 6659, 6660, 6662, 6663, 6664,
       6665, 6666, 6668, 6670, 6674, 6675, 6676, 6677, 6678, 6679, 6681,
       6682, 6683, 6684, 6685, 6687, 6688, 6689, 6691, 6692, 6693, 6694,
       6695, 6696, 6697, 6698, 6699, 6700, 6701, 6702, 6704, 6706, 6708,
       6709, 6710, 6713, 6714, 6717, 6720, 6721, 6722, 6723, 6725, 6726,
       6727, 6730, 6731, 6734, 6735, 6736, 6737, 6739, 6740, 6741, 6742,
       6743, 6744, 6748, 6750, 6751, 6752, 6753, 6754, 6755, 6757, 6759,
       6760, 6761, 6763, 6764, 6766, 6767, 6768, 6769, 6770, 6772, 6773,
       6774, 6775, 6776, 6777, 6778, 6781, 6782, 6783, 6786, 6787, 6788,
       6789, 6793, 6794, 6795, 6797, 6799, 6800, 6801, 6802, 6803, 6804,
       6805, 6806, 6808, 6809, 6810, 6812, 6813, 6814, 6815, 6817, 6821,
       6822, 6823, 6824, 6826, 6827, 6828, 6829, 6830, 6832, 6834, 6836,
       6838, 6839, 6843, 6845, 6846, 6847, 6848, 6849, 6852, 6854, 6855,
       6858, 6859, 6861, 6862, 6863, 6864, 6868, 6870, 6876, 6877, 6878,
       6879, 6880, 6881, 6882, 6884, 6885, 6886, 6890, 6892, 6893, 6894,
       6895, 6896, 6901, 6902, 6904, 6905, 6906, 6907, 6908, 6909, 6910,
       6911, 6912, 6913, 6914, 6916, 6917, 6918, 6919, 6920, 6921, 6922,
       6923, 6924, 6926, 6929, 6930, 6931, 6933, 6934, 6935, 6936, 6937,
       6939, 6940, 6941, 6942, 6943, 6944, 6947, 6948, 6949, 6950, 6952,
       6953, 6956, 6957, 6958, 6959, 6960, 6961, 6964, 6965, 6966, 6967,
       6968, 6969, 6970, 6972, 6974, 6976, 6982, 6983, 6985, 6992, 6993,
       6994, 6996, 6997, 7272, 7745, 7845, 8181, 8502, 8869, 9430]),)
sample_indices [ 920 1527 2002 2019 2030 2033 2045 2133 2140 2160 2165 2194 2226 2275
 2279 2282 2283 2296 2298 2313 2319 2320 2323 2333 2365 2435 2441 2475
 2483 2489 2514 2547 2548 2576 2594 2602 2607 2624 2628 2671 2675 2682
 2700 2705 2745 2746 2769 2775 2789 2808 2827 2835 2840 2856 2907 2912
 2916 2948 2952 2957 2983 3010 3016 3033 3059 3065 3069 3084 3102 3143
 3159 3187 3188 3195 3206 3208 3224 3226 3262 3311 3328 3346 3348 3367
 3388 3391 3397 3446 3470 3494 3529 3536 3541 3548 3579 3580 3614 3627
 3636 3650 3662 3664 3675 3687 3691 3722 3745 3778 3781 3789 3796 3801
 3815 3816 3826 3842 3857 3872 3874 3883 3895 3946 3949 3961 3976 3980
 4030 4068 4121 4136 4144 4169 4177 4207 4216 4234 4243 4245 4379 4502
 4533 4548 4574 4639 4668 4700 4939 4974 5074 5852 6000 6001 6003 6004
 6005 6006 6007 6011 6012 6013 6014 6015 6017 6019 6020 6021 6022 6024
 6029 6030 6031 6032 6033 6034 6035 6038 6039 6040 6041 6042 6043 6044
 6045 6047 6048 6049 6051 6053 6054 6055 6056 6058 6059 6062 6064 6067
 6069 6070 6071 6074 6078 6080 6086 6087 6089 6091 6092 6093 6096 6097
 6098 6100 6101 6103 6104 6106 6110 6112 6113 6114 6115 6116 6122 6123
 6124 6126 6127 6128 6129 6132 6133 6136 6138 6139 6141 6142 6143 6144
 6147 6148 6149 6150 6151 6152 6153 6155 6159 6160 6161 6162 6163 6164
 6165 6166 6167 6168 6169 6170 6171 6172 6174 6176 6177 6179 6180 6181
 6183 6184 6186 6187 6190 6191 6192 6193 6194 6196 6197 6200 6201 6203
 6206 6207 6209 6212 6215 6216 6217 6220 6222 6223 6225 6226 6227 6229
 6230 6231 6232 6233 6235 6237 6239 6243 6244 6245 6246 6248 6250 6253
 6255 6256 6259 6260 6262 6263 6264 6266 6267 6268 6269 6270 6271 6272
 6273 6275 6276 6277 6278 6279 6280 6282 6284 6285 6286 6288 6292 6293
 6294 6295 6296 6297 6298 6299 6300 6301 6302 6303 6305 6306 6307 6310
 6311 6312 6313 6315 6317 6318 6319 6320 6321 6322 6323 6327 6328 6329
 6332 6335 6336 6338 6339 6340 6341 6346 6347 6348 6349 6350 6351 6353
 6354 6355 6357 6359 6360 6364 6365 6366 6368 6369 6371 6375 6380 6381
 6382 6383 6384 6385 6387 6388 6390 6391 6392 6393 6394 6395 6396 6398
 6399 6401 6402 6403 6404 6406 6407 6408 6411 6412 6414 6416 6417 6418
 6419 6420 6421 6426 6428 6429 6432 6433 6434 6436 6437 6440 6441 6442
 6443 6444 6445 6446 6448 6449 6451 6452 6453 6454 6455 6456 6457 6459
 6461 6462 6463 6465 6466 6469 6471 6475 6476 6477 6478 6479 6480 6481
 6483 6485 6486 6487 6491 6492 6494 6498 6500 6502 6505 6508 6509 6510
 6511 6512 6513 6514 6515 6517 6518 6519 6520 6521 6522 6524 6525 6527
 6530 6531 6532 6533 6535 6537 6540 6541 6544 6545 6546 6547 6548 6549
 6550 6551 6552 6553 6554 6555 6556 6557 6560 6562 6563 6565 6566 6567
 6569 6570 6571 6573 6580 6583 6584 6586 6588 6590 6591 6592 6593 6596
 6597 6598 6600 6601 6602 6603 6604 6605 6606 6608 6610 6612 6614 6615
 6616 6617 6622 6623 6624 6625 6627 6628 6630 6639 6640 6642 6643 6644
 6647 6650 6651 6653 6655 6656 6658 6659 6660 6662 6663 6664 6665 6666
 6668 6670 6674 6675 6676 6677 6678 6679 6681 6682 6683 6684 6685 6687
 6688 6689 6691 6692 6693 6694 6695 6696 6697 6698 6699 6700 6701 6702
 6704 6706 6708 6709 6710 6713 6714 6717 6720 6721 6722 6723 6725 6726
 6727 6730 6731 6734 6735 6736 6737 6739 6740 6741 6742 6743 6744 6748
 6750 6751 6752 6753 6754 6755 6757 6759 6760 6761 6763 6764 6766 6767
 6768 6769 6770 6772 6773 6774 6775 6776 6777 6778 6781 6782 6783 6786
 6787 6788 6789 6793 6794 6795 6797 6799 6800 6801 6802 6803 6804 6805
 6806 6808 6809 6810 6812 6813 6814 6815 6817 6821 6822 6823 6824 6826
 6827 6828 6829 6830 6832 6834 6836 6838 6839 6843 6845 6846 6847 6848
 6849 6852 6854 6855 6858 6859 6861 6862 6863 6864 6868 6870 6876 6877
 6878 6879 6880 6881 6882 6884 6885 6886 6890 6892 6893 6894 6895 6896
 6901 6902 6904 6905 6906 6907 6908 6909 6910 6911 6912 6913 6914 6916
 6917 6918 6919 6920 6921 6922 6923 6924 6926 6929 6930 6931 6933 6934
 6935 6936 6937 6939 6940 6941 6942 6943 6944 6947 6948 6949 6950 6952
 6953 6956 6957 6958 6959 6960 6961 6964 6965 6966 6967 6968 6969 6970
 6972 6974 6976 6982 6983 6985 6992 6993 6994 6996 6997 7272 7745 7845
 8181 8502 8869 9430]
subset_sample_indices [2140 6166 3391 6421 2279 6451 6778 6573 6884 6583 3311 3687 6395 6767
 6038 2475]
subset_img_paths ['cifar10/cifar10/val/bird/0141.png', 'cifar10/cifar10/val/frog/0167.png', 'cifar10/cifar10/val/cat/0392.png', 'cifar10/cifar10/val/frog/0422.png', 'cifar10/cifar10/val/bird/0280.png', 'cifar10/cifar10/val/frog/0452.png', 'cifar10/cifar10/val/frog/0779.png', 'cifar10/cifar10/val/frog/0574.png', 'cifar10/cifar10/val/frog/0885.png', 'cifar10/cifar10/val/frog/0584.png', 'cifar10/cifar10/val/cat/0312.png', 'cifar10/cifar10/val/cat/0688.png', 'cifar10/cifar10/val/frog/0396.png', 'cifar10/cifar10/val/frog/0768.png', 'cifar10/cifar10/val/frog/0039.png', 'cifar10/cifar10/val/bird/0476.png']
rows:  4
cols:  4
len imgs:  16
=> saved grid_2.pdf, accuracy = 0.804, nsamples = 802
=> grid 2 labels: [2 6 3 6 2 6 6 6 6 6 3 3 6 6 6 2]
label_i 2
preds [4 3 3 ... 6 6 6]
np.where(preds == label_i) (array([2021, 2048, 2050, 2072, 2082, 2102, 2112, 2186, 2191, 2193, 2199,
       2231, 2238, 2315, 2332, 2334, 2363, 2375, 2388, 2414, 2439, 2447,
       2449, 2472, 2480, 2516, 2527, 2530, 2632, 2648, 2826, 2837, 2888,
       2890, 2894, 2925, 2929, 2941, 3108, 3220, 3530, 3550, 3782, 3911,
       4007, 4011, 4012, 4022, 4025, 4026, 4027, 4038, 4042, 4050, 4053,
       4054, 4055, 4058, 4062, 4063, 4069, 4089, 4095, 4102, 4103, 4106,
       4109, 4110, 4123, 4128, 4137, 4143, 4159, 4162, 4165, 4179, 4183,
       4185, 4189, 4192, 4197, 4203, 4215, 4219, 4220, 4221, 4222, 4228,
       4244, 4247, 4254, 4255, 4262, 4263, 4271, 4274, 4282, 4289, 4292,
       4317, 4321, 4322, 4328, 4334, 4336, 4338, 4339, 4367, 4370, 4380,
       4382, 4386, 4390, 4394, 4396, 4405, 4415, 4416, 4426, 4427, 4429,
       4431, 4433, 4435, 4436, 4437, 4461, 4468, 4470, 4479, 4480, 4484,
       4485, 4490, 4493, 4497, 4499, 4510, 4515, 4530, 4532, 4534, 4535,
       4537, 4541, 4542, 4544, 4553, 4555, 4562, 4567, 4571, 4573, 4575,
       4579, 4584, 4588, 4589, 4590, 4595, 4597, 4617, 4621, 4632, 4634,
       4637, 4638, 4640, 4645, 4648, 4652, 4654, 4657, 4661, 4684, 4685,
       4690, 4701, 4710, 4713, 4718, 4720, 4722, 4735, 4738, 4741, 4756,
       4765, 4770, 4777, 4781, 4786, 4801, 4812, 4814, 4840, 4844, 4852,
       4857, 4861, 4863, 4872, 4873, 4882, 4883, 4888, 4905, 4908, 4918,
       4920, 4921, 4927, 4928, 4932, 4936, 4937, 4938, 4971, 4975, 4984,
       4987, 4988, 4989, 4995, 4999, 5126, 5241, 5265, 5295, 5306, 5555,
       5591, 5649, 5782, 5801, 5874, 5891, 7000, 7002, 7003, 7006, 7007,
       7008, 7009, 7013, 7015, 7018, 7019, 7021, 7022, 7025, 7026, 7028,
       7029, 7030, 7032, 7033, 7034, 7035, 7036, 7037, 7041, 7043, 7045,
       7046, 7048, 7049, 7050, 7051, 7052, 7054, 7055, 7056, 7059, 7060,
       7061, 7062, 7063, 7064, 7065, 7066, 7068, 7069, 7070, 7071, 7072,
       7073, 7074, 7075, 7076, 7078, 7079, 7080, 7082, 7083, 7084, 7085,
       7086, 7089, 7090, 7091, 7092, 7093, 7094, 7096, 7097, 7098, 7099,
       7102, 7104, 7105, 7106, 7108, 7109, 7113, 7114, 7115, 7116, 7117,
       7118, 7119, 7123, 7124, 7126, 7128, 7129, 7131, 7134, 7135, 7136,
       7137, 7138, 7139, 7142, 7143, 7144, 7145, 7146, 7147, 7149, 7150,
       7151, 7152, 7153, 7154, 7155, 7159, 7161, 7163, 7164, 7165, 7166,
       7168, 7169, 7171, 7176, 7177, 7178, 7179, 7180, 7181, 7182, 7184,
       7189, 7190, 7191, 7192, 7193, 7194, 7196, 7197, 7198, 7199, 7200,
       7201, 7202, 7205, 7207, 7208, 7211, 7213, 7215, 7217, 7219, 7221,
       7222, 7223, 7224, 7228, 7230, 7231, 7234, 7236, 7237, 7240, 7241,
       7243, 7245, 7246, 7247, 7249, 7250, 7251, 7253, 7254, 7255, 7256,
       7257, 7258, 7260, 7263, 7264, 7267, 7268, 7269, 7270, 7271, 7274,
       7279, 7282, 7285, 7286, 7287, 7288, 7290, 7292, 7293, 7296, 7297,
       7298, 7299, 7301, 7302, 7303, 7305, 7306, 7307, 7310, 7311, 7313,
       7314, 7315, 7316, 7317, 7318, 7319, 7320, 7321, 7323, 7325, 7326,
       7329, 7330, 7331, 7333, 7336, 7339, 7340, 7342, 7344, 7345, 7347,
       7349, 7350, 7351, 7352, 7354, 7356, 7357, 7358, 7362, 7363, 7364,
       7365, 7366, 7367, 7368, 7369, 7371, 7372, 7373, 7374, 7375, 7376,
       7378, 7379, 7380, 7382, 7385, 7387, 7389, 7391, 7392, 7394, 7397,
       7403, 7404, 7406, 7407, 7408, 7409, 7410, 7411, 7412, 7413, 7414,
       7415, 7416, 7418, 7419, 7420, 7421, 7423, 7424, 7425, 7427, 7429,
       7430, 7431, 7433, 7436, 7437, 7438, 7439, 7441, 7443, 7444, 7446,
       7448, 7450, 7451, 7452, 7453, 7455, 7457, 7458, 7461, 7463, 7465,
       7467, 7468, 7469, 7472, 7473, 7474, 7475, 7476, 7477, 7482, 7483,
       7484, 7486, 7490, 7494, 7495, 7498, 7499, 7501, 7502, 7505, 7509,
       7510, 7515, 7517, 7518, 7520, 7522, 7526, 7531, 7535, 7536, 7538,
       7539, 7541, 7542, 7543, 7544, 7548, 7549, 7550, 7553, 7555, 7557,
       7558, 7561, 7562, 7563, 7564, 7565, 7566, 7567, 7568, 7569, 7570,
       7571, 7572, 7573, 7574, 7575, 7576, 7578, 7579, 7580, 7581, 7584,
       7585, 7586, 7587, 7589, 7591, 7592, 7596, 7601, 7602, 7604, 7605,
       7606, 7609, 7611, 7612, 7615, 7617, 7618, 7619, 7622, 7625, 7626,
       7628, 7629, 7631, 7633, 7634, 7635, 7636, 7637, 7638, 7639, 7640,
       7641, 7643, 7644, 7645, 7646, 7647, 7648, 7649, 7652, 7653, 7654,
       7656, 7657, 7658, 7659, 7660, 7662, 7663, 7664, 7666, 7667, 7670,
       7671, 7675, 7677, 7678, 7679, 7682, 7684, 7686, 7688, 7689, 7690,
       7693, 7695, 7700, 7701, 7703, 7704, 7706, 7709, 7710, 7711, 7712,
       7713, 7715, 7717, 7718, 7719, 7720, 7722, 7725, 7726, 7727, 7728,
       7729, 7731, 7732, 7733, 7734, 7735, 7736, 7737, 7740, 7741, 7742,
       7743, 7744, 7746, 7747, 7749, 7751, 7753, 7754, 7755, 7756, 7757,
       7759, 7761, 7765, 7766, 7768, 7770, 7771, 7772, 7775, 7776, 7777,
       7778, 7779, 7780, 7782, 7783, 7784, 7786, 7788, 7789, 7791, 7793,
       7795, 7796, 7799, 7802, 7804, 7806, 7808, 7809, 7810, 7811, 7812,
       7813, 7816, 7817, 7819, 7820, 7821, 7822, 7823, 7824, 7826, 7827,
       7829, 7832, 7833, 7838, 7841, 7842, 7843, 7844, 7847, 7848, 7849,
       7850, 7851, 7852, 7853, 7856, 7857, 7858, 7861, 7862, 7863, 7864,
       7866, 7867, 7869, 7871, 7873, 7875, 7876, 7878, 7879, 7882, 7883,
       7887, 7891, 7894, 7895, 7896, 7897, 7898, 7899, 7900, 7901, 7902,
       7903, 7905, 7906, 7907, 7908, 7910, 7911, 7914, 7915, 7916, 7918,
       7920, 7921, 7923, 7925, 7927, 7928, 7930, 7931, 7932, 7934, 7935,
       7936, 7938, 7939, 7940, 7941, 7945, 7946, 7947, 7949, 7950, 7951,
       7952, 7953, 7955, 7956, 7958, 7959, 7960, 7961, 7963, 7964, 7965,
       7966, 7967, 7968, 7969, 7972, 7973, 7974, 7976, 7977, 7978, 7980,
       7981, 7986, 7987, 7990, 7992, 7993, 7995, 7996, 7997, 7999]),)
sample_indices [2021 2048 2050 2072 2082 2102 2112 2186 2191 2193 2199 2231 2238 2315
 2332 2334 2363 2375 2388 2414 2439 2447 2449 2472 2480 2516 2527 2530
 2632 2648 2826 2837 2888 2890 2894 2925 2929 2941 3108 3220 3530 3550
 3782 3911 4007 4011 4012 4022 4025 4026 4027 4038 4042 4050 4053 4054
 4055 4058 4062 4063 4069 4089 4095 4102 4103 4106 4109 4110 4123 4128
 4137 4143 4159 4162 4165 4179 4183 4185 4189 4192 4197 4203 4215 4219
 4220 4221 4222 4228 4244 4247 4254 4255 4262 4263 4271 4274 4282 4289
 4292 4317 4321 4322 4328 4334 4336 4338 4339 4367 4370 4380 4382 4386
 4390 4394 4396 4405 4415 4416 4426 4427 4429 4431 4433 4435 4436 4437
 4461 4468 4470 4479 4480 4484 4485 4490 4493 4497 4499 4510 4515 4530
 4532 4534 4535 4537 4541 4542 4544 4553 4555 4562 4567 4571 4573 4575
 4579 4584 4588 4589 4590 4595 4597 4617 4621 4632 4634 4637 4638 4640
 4645 4648 4652 4654 4657 4661 4684 4685 4690 4701 4710 4713 4718 4720
 4722 4735 4738 4741 4756 4765 4770 4777 4781 4786 4801 4812 4814 4840
 4844 4852 4857 4861 4863 4872 4873 4882 4883 4888 4905 4908 4918 4920
 4921 4927 4928 4932 4936 4937 4938 4971 4975 4984 4987 4988 4989 4995
 4999 5126 5241 5265 5295 5306 5555 5591 5649 5782 5801 5874 5891 7000
 7002 7003 7006 7007 7008 7009 7013 7015 7018 7019 7021 7022 7025 7026
 7028 7029 7030 7032 7033 7034 7035 7036 7037 7041 7043 7045 7046 7048
 7049 7050 7051 7052 7054 7055 7056 7059 7060 7061 7062 7063 7064 7065
 7066 7068 7069 7070 7071 7072 7073 7074 7075 7076 7078 7079 7080 7082
 7083 7084 7085 7086 7089 7090 7091 7092 7093 7094 7096 7097 7098 7099
 7102 7104 7105 7106 7108 7109 7113 7114 7115 7116 7117 7118 7119 7123
 7124 7126 7128 7129 7131 7134 7135 7136 7137 7138 7139 7142 7143 7144
 7145 7146 7147 7149 7150 7151 7152 7153 7154 7155 7159 7161 7163 7164
 7165 7166 7168 7169 7171 7176 7177 7178 7179 7180 7181 7182 7184 7189
 7190 7191 7192 7193 7194 7196 7197 7198 7199 7200 7201 7202 7205 7207
 7208 7211 7213 7215 7217 7219 7221 7222 7223 7224 7228 7230 7231 7234
 7236 7237 7240 7241 7243 7245 7246 7247 7249 7250 7251 7253 7254 7255
 7256 7257 7258 7260 7263 7264 7267 7268 7269 7270 7271 7274 7279 7282
 7285 7286 7287 7288 7290 7292 7293 7296 7297 7298 7299 7301 7302 7303
 7305 7306 7307 7310 7311 7313 7314 7315 7316 7317 7318 7319 7320 7321
 7323 7325 7326 7329 7330 7331 7333 7336 7339 7340 7342 7344 7345 7347
 7349 7350 7351 7352 7354 7356 7357 7358 7362 7363 7364 7365 7366 7367
 7368 7369 7371 7372 7373 7374 7375 7376 7378 7379 7380 7382 7385 7387
 7389 7391 7392 7394 7397 7403 7404 7406 7407 7408 7409 7410 7411 7412
 7413 7414 7415 7416 7418 7419 7420 7421 7423 7424 7425 7427 7429 7430
 7431 7433 7436 7437 7438 7439 7441 7443 7444 7446 7448 7450 7451 7452
 7453 7455 7457 7458 7461 7463 7465 7467 7468 7469 7472 7473 7474 7475
 7476 7477 7482 7483 7484 7486 7490 7494 7495 7498 7499 7501 7502 7505
 7509 7510 7515 7517 7518 7520 7522 7526 7531 7535 7536 7538 7539 7541
 7542 7543 7544 7548 7549 7550 7553 7555 7557 7558 7561 7562 7563 7564
 7565 7566 7567 7568 7569 7570 7571 7572 7573 7574 7575 7576 7578 7579
 7580 7581 7584 7585 7586 7587 7589 7591 7592 7596 7601 7602 7604 7605
 7606 7609 7611 7612 7615 7617 7618 7619 7622 7625 7626 7628 7629 7631
 7633 7634 7635 7636 7637 7638 7639 7640 7641 7643 7644 7645 7646 7647
 7648 7649 7652 7653 7654 7656 7657 7658 7659 7660 7662 7663 7664 7666
 7667 7670 7671 7675 7677 7678 7679 7682 7684 7686 7688 7689 7690 7693
 7695 7700 7701 7703 7704 7706 7709 7710 7711 7712 7713 7715 7717 7718
 7719 7720 7722 7725 7726 7727 7728 7729 7731 7732 7733 7734 7735 7736
 7737 7740 7741 7742 7743 7744 7746 7747 7749 7751 7753 7754 7755 7756
 7757 7759 7761 7765 7766 7768 7770 7771 7772 7775 7776 7777 7778 7779
 7780 7782 7783 7784 7786 7788 7789 7791 7793 7795 7796 7799 7802 7804
 7806 7808 7809 7810 7811 7812 7813 7816 7817 7819 7820 7821 7822 7823
 7824 7826 7827 7829 7832 7833 7838 7841 7842 7843 7844 7847 7848 7849
 7850 7851 7852 7853 7856 7857 7858 7861 7862 7863 7864 7866 7867 7869
 7871 7873 7875 7876 7878 7879 7882 7883 7887 7891 7894 7895 7896 7897
 7898 7899 7900 7901 7902 7903 7905 7906 7907 7908 7910 7911 7914 7915
 7916 7918 7920 7921 7923 7925 7927 7928 7930 7931 7932 7934 7935 7936
 7938 7939 7940 7941 7945 7946 7947 7949 7950 7951 7952 7953 7955 7956
 7958 7959 7960 7961 7963 7964 7965 7966 7967 7968 7969 7972 7973 7974
 7976 7977 7978 7980 7981 7986 7987 7990 7992 7993 7995 7996 7997 7999]
subset_sample_indices [7041 7928 4185 7331 7538 7813 7064 7727 7961 7155 4937 7875 7189 7437
 4534 7065]
subset_img_paths ['cifar10/cifar10/val/horse/0042.png', 'cifar10/cifar10/val/horse/0929.png', 'cifar10/cifar10/val/deer/0186.png', 'cifar10/cifar10/val/horse/0332.png', 'cifar10/cifar10/val/horse/0539.png', 'cifar10/cifar10/val/horse/0814.png', 'cifar10/cifar10/val/horse/0065.png', 'cifar10/cifar10/val/horse/0728.png', 'cifar10/cifar10/val/horse/0962.png', 'cifar10/cifar10/val/horse/0156.png', 'cifar10/cifar10/val/deer/0938.png', 'cifar10/cifar10/val/horse/0876.png', 'cifar10/cifar10/val/horse/0190.png', 'cifar10/cifar10/val/horse/0438.png', 'cifar10/cifar10/val/deer/0535.png', 'cifar10/cifar10/val/horse/0066.png']
rows:  4
cols:  4
len imgs:  16
=> saved grid_3.pdf, accuracy = 0.727, nsamples = 868
=> grid 3 labels: [7 7 4 7 7 7 7 7 7 7 4 7 7 7 4 7]
label_i 9
preds [4 3 3 ... 6 6 6]
np.where(preds == label_i) (array([  94,  201,  496,  851, 2013, 2026, 2035, 2043, 2051, 2054, 2055,
       2056, 2080, 2085, 2101, 2106, 2120, 2129, 2141, 2155, 2158, 2167,
       2168, 2170, 2172, 2174, 2188, 2189, 2190, 2195, 2196, 2198, 2201,
       2207, 2208, 2221, 2230, 2232, 2234, 2240, 2241, 2242, 2253, 2259,
       2271, 2274, 2278, 2280, 2292, 2299, 2301, 2302, 2307, 2335, 2344,
       2346, 2347, 2349, 2353, 2362, 2376, 2379, 2383, 2384, 2385, 2386,
       2403, 2405, 2406, 2416, 2417, 2418, 2443, 2444, 2456, 2464, 2473,
       2474, 2485, 2490, 2492, 2493, 2498, 2507, 2513, 2517, 2520, 2521,
       2534, 2536, 2538, 2539, 2540, 2541, 2545, 2564, 2571, 2572, 2573,
       2579, 2583, 2584, 2591, 2598, 2601, 2610, 2625, 2627, 2630, 2633,
       2639, 2645, 2656, 2661, 2664, 2666, 2668, 2673, 2677, 2681, 2683,
       2684, 2686, 2693, 2696, 2714, 2720, 2730, 2733, 2744, 2751, 2762,
       2764, 2766, 2773, 2774, 2777, 2779, 2787, 2791, 2792, 2795, 2800,
       2814, 2823, 2824, 2829, 2838, 2841, 2845, 2847, 2861, 2866, 2878,
       2883, 2892, 2893, 2905, 2906, 2914, 2915, 2928, 2930, 2943, 2951,
       2953, 2958, 2959, 2972, 2974, 2975, 2981, 2990, 2991, 2995, 2999,
       3026, 3045, 3118, 3138, 3189, 3201, 3214, 3233, 3239, 3242, 3244,
       3264, 3301, 3339, 3345, 3364, 3424, 3462, 3491, 3498, 3518, 3547,
       3552, 3564, 3583, 3584, 3601, 3602, 3633, 3665, 3685, 3692, 3697,
       3698, 3726, 3751, 3773, 3846, 3847, 3879, 3887, 3994, 4000, 4002,
       4003, 4006, 4008, 4010, 4013, 4016, 4017, 4018, 4019, 4020, 4028,
       4029, 4031, 4033, 4037, 4039, 4040, 4043, 4045, 4047, 4048, 4049,
       4052, 4056, 4057, 4059, 4060, 4061, 4070, 4072, 4073, 4074, 4076,
       4077, 4079, 4080, 4081, 4084, 4086, 4087, 4088, 4090, 4091, 4094,
       4097, 4098, 4099, 4100, 4107, 4108, 4111, 4112, 4113, 4114, 4118,
       4119, 4120, 4122, 4126, 4127, 4129, 4130, 4131, 4132, 4133, 4134,
       4139, 4140, 4141, 4142, 4145, 4146, 4147, 4149, 4150, 4151, 4153,
       4154, 4157, 4158, 4160, 4161, 4163, 4164, 4166, 4170, 4171, 4174,
       4175, 4176, 4178, 4180, 4181, 4182, 4184, 4187, 4188, 4190, 4191,
       4193, 4195, 4196, 4198, 4199, 4200, 4201, 4202, 4204, 4209, 4210,
       4211, 4214, 4217, 4218, 4223, 4224, 4226, 4227, 4232, 4233, 4236,
       4237, 4238, 4239, 4240, 4241, 4246, 4248, 4249, 4251, 4253, 4256,
       4257, 4258, 4261, 4264, 4265, 4266, 4267, 4268, 4270, 4272, 4273,
       4276, 4277, 4278, 4280, 4281, 4284, 4285, 4287, 4288, 4290, 4291,
       4293, 4295, 4296, 4299, 4300, 4301, 4302, 4304, 4305, 4307, 4308,
       4309, 4312, 4313, 4315, 4320, 4323, 4324, 4325, 4327, 4329, 4335,
       4337, 4340, 4341, 4342, 4344, 4345, 4346, 4347, 4348, 4350, 4351,
       4352, 4353, 4354, 4355, 4356, 4357, 4358, 4359, 4361, 4362, 4363,
       4369, 4372, 4373, 4375, 4376, 4377, 4378, 4381, 4383, 4384, 4385,
       4387, 4388, 4389, 4391, 4392, 4395, 4397, 4399, 4402, 4404, 4406,
       4407, 4408, 4409, 4410, 4411, 4412, 4417, 4419, 4420, 4422, 4423,
       4424, 4425, 4428, 4432, 4434, 4439, 4440, 4442, 4443, 4444, 4445,
       4446, 4447, 4448, 4449, 4450, 4451, 4452, 4453, 4454, 4455, 4456,
       4458, 4459, 4460, 4463, 4464, 4465, 4466, 4467, 4471, 4474, 4475,
       4476, 4477, 4481, 4482, 4483, 4486, 4487, 4489, 4491, 4495, 4496,
       4498, 4501, 4504, 4505, 4506, 4507, 4508, 4511, 4514, 4516, 4518,
       4519, 4520, 4521, 4522, 4527, 4528, 4529, 4536, 4538, 4540, 4543,
       4545, 4547, 4550, 4552, 4554, 4559, 4560, 4561, 4565, 4569, 4570,
       4577, 4578, 4580, 4581, 4582, 4583, 4586, 4592, 4593, 4596, 4598,
       4599, 4601, 4602, 4604, 4607, 4612, 4613, 4614, 4615, 4616, 4619,
       4620, 4624, 4625, 4626, 4627, 4628, 4629, 4630, 4631, 4633, 4636,
       4643, 4650, 4651, 4653, 4655, 4660, 4662, 4663, 4664, 4665, 4666,
       4667, 4669, 4670, 4671, 4673, 4677, 4678, 4679, 4680, 4681, 4686,
       4687, 4689, 4691, 4693, 4694, 4695, 4696, 4697, 4698, 4699, 4702,
       4703, 4704, 4705, 4707, 4709, 4711, 4714, 4715, 4717, 4719, 4721,
       4723, 4724, 4727, 4728, 4729, 4731, 4732, 4733, 4734, 4736, 4737,
       4739, 4740, 4746, 4747, 4748, 4749, 4751, 4752, 4753, 4754, 4755,
       4758, 4759, 4760, 4761, 4763, 4764, 4766, 4767, 4768, 4769, 4771,
       4773, 4776, 4778, 4779, 4780, 4782, 4784, 4785, 4787, 4788, 4790,
       4792, 4793, 4794, 4795, 4797, 4800, 4802, 4804, 4805, 4807, 4808,
       4809, 4815, 4818, 4820, 4822, 4823, 4828, 4829, 4830, 4832, 4833,
       4834, 4835, 4837, 4841, 4842, 4843, 4845, 4846, 4847, 4848, 4851,
       4854, 4855, 4856, 4858, 4860, 4862, 4865, 4866, 4867, 4868, 4869,
       4870, 4874, 4876, 4878, 4879, 4880, 4881, 4884, 4885, 4889, 4890,
       4892, 4894, 4896, 4897, 4898, 4899, 4900, 4901, 4902, 4903, 4904,
       4906, 4907, 4911, 4912, 4913, 4914, 4915, 4917, 4919, 4923, 4924,
       4925, 4926, 4929, 4931, 4933, 4934, 4935, 4942, 4943, 4944, 4945,
       4946, 4947, 4948, 4949, 4951, 4952, 4954, 4955, 4958, 4959, 4961,
       4963, 4964, 4965, 4966, 4967, 4968, 4970, 4972, 4978, 4979, 4980,
       4983, 4985, 4986, 4991, 4993, 4994, 4997, 4998, 5002, 5047, 5078,
       5081, 5097, 5114, 5121, 5143, 5144, 5210, 5221, 5244, 5246, 5273,
       5323, 5345, 5376, 5377, 5436, 5443, 5449, 5450, 5483, 5491, 5500,
       5548, 5599, 5607, 5620, 5630, 5645, 5651, 5669, 5676, 5695, 5702,
       5704, 5739, 5744, 5760, 5770, 5771, 5799, 5819, 5837, 5842, 5843,
       5857, 5886, 5927, 5936, 5961, 5977, 5980, 5987, 6008, 6046, 6052,
       6081, 6084, 6085, 6094, 6095, 6146, 6156, 6157, 6182, 6241, 6249,
       6252, 6281, 6291, 6330, 6361, 6370, 6374, 6386, 6400, 6423, 6450,
       6488, 6493, 6497, 6504, 6507, 6516, 6523, 6538, 6542, 6576, 6577,
       6582, 6585, 6587, 6609, 6620, 6621, 6636, 6645, 6652, 6654, 6671,
       6703, 6715, 6718, 6724, 6749, 6756, 6780, 6835, 6867, 6875, 6887,
       6888, 6889, 6891, 6897, 6903, 6927, 6932, 6989, 6990, 7027, 7031,
       7120, 7127, 7187, 7188, 7210, 7212, 7214, 7218, 7239, 7273, 7280,
       7291, 7294, 7353, 7399, 7435, 7442, 7459, 7479, 7487, 7488, 7492,
       7519, 7546, 7556, 7593, 7598, 7607, 7650, 7697, 7699, 7708, 7763,
       7769, 7781, 7787, 7792, 7794, 7831, 7840, 7888, 7890, 7892, 7919,
       7929, 7962, 7982, 7994]),)
sample_indices [  94  201  496  851 2013 2026 2035 2043 2051 2054 2055 2056 2080 2085
 2101 2106 2120 2129 2141 2155 2158 2167 2168 2170 2172 2174 2188 2189
 2190 2195 2196 2198 2201 2207 2208 2221 2230 2232 2234 2240 2241 2242
 2253 2259 2271 2274 2278 2280 2292 2299 2301 2302 2307 2335 2344 2346
 2347 2349 2353 2362 2376 2379 2383 2384 2385 2386 2403 2405 2406 2416
 2417 2418 2443 2444 2456 2464 2473 2474 2485 2490 2492 2493 2498 2507
 2513 2517 2520 2521 2534 2536 2538 2539 2540 2541 2545 2564 2571 2572
 2573 2579 2583 2584 2591 2598 2601 2610 2625 2627 2630 2633 2639 2645
 2656 2661 2664 2666 2668 2673 2677 2681 2683 2684 2686 2693 2696 2714
 2720 2730 2733 2744 2751 2762 2764 2766 2773 2774 2777 2779 2787 2791
 2792 2795 2800 2814 2823 2824 2829 2838 2841 2845 2847 2861 2866 2878
 2883 2892 2893 2905 2906 2914 2915 2928 2930 2943 2951 2953 2958 2959
 2972 2974 2975 2981 2990 2991 2995 2999 3026 3045 3118 3138 3189 3201
 3214 3233 3239 3242 3244 3264 3301 3339 3345 3364 3424 3462 3491 3498
 3518 3547 3552 3564 3583 3584 3601 3602 3633 3665 3685 3692 3697 3698
 3726 3751 3773 3846 3847 3879 3887 3994 4000 4002 4003 4006 4008 4010
 4013 4016 4017 4018 4019 4020 4028 4029 4031 4033 4037 4039 4040 4043
 4045 4047 4048 4049 4052 4056 4057 4059 4060 4061 4070 4072 4073 4074
 4076 4077 4079 4080 4081 4084 4086 4087 4088 4090 4091 4094 4097 4098
 4099 4100 4107 4108 4111 4112 4113 4114 4118 4119 4120 4122 4126 4127
 4129 4130 4131 4132 4133 4134 4139 4140 4141 4142 4145 4146 4147 4149
 4150 4151 4153 4154 4157 4158 4160 4161 4163 4164 4166 4170 4171 4174
 4175 4176 4178 4180 4181 4182 4184 4187 4188 4190 4191 4193 4195 4196
 4198 4199 4200 4201 4202 4204 4209 4210 4211 4214 4217 4218 4223 4224
 4226 4227 4232 4233 4236 4237 4238 4239 4240 4241 4246 4248 4249 4251
 4253 4256 4257 4258 4261 4264 4265 4266 4267 4268 4270 4272 4273 4276
 4277 4278 4280 4281 4284 4285 4287 4288 4290 4291 4293 4295 4296 4299
 4300 4301 4302 4304 4305 4307 4308 4309 4312 4313 4315 4320 4323 4324
 4325 4327 4329 4335 4337 4340 4341 4342 4344 4345 4346 4347 4348 4350
 4351 4352 4353 4354 4355 4356 4357 4358 4359 4361 4362 4363 4369 4372
 4373 4375 4376 4377 4378 4381 4383 4384 4385 4387 4388 4389 4391 4392
 4395 4397 4399 4402 4404 4406 4407 4408 4409 4410 4411 4412 4417 4419
 4420 4422 4423 4424 4425 4428 4432 4434 4439 4440 4442 4443 4444 4445
 4446 4447 4448 4449 4450 4451 4452 4453 4454 4455 4456 4458 4459 4460
 4463 4464 4465 4466 4467 4471 4474 4475 4476 4477 4481 4482 4483 4486
 4487 4489 4491 4495 4496 4498 4501 4504 4505 4506 4507 4508 4511 4514
 4516 4518 4519 4520 4521 4522 4527 4528 4529 4536 4538 4540 4543 4545
 4547 4550 4552 4554 4559 4560 4561 4565 4569 4570 4577 4578 4580 4581
 4582 4583 4586 4592 4593 4596 4598 4599 4601 4602 4604 4607 4612 4613
 4614 4615 4616 4619 4620 4624 4625 4626 4627 4628 4629 4630 4631 4633
 4636 4643 4650 4651 4653 4655 4660 4662 4663 4664 4665 4666 4667 4669
 4670 4671 4673 4677 4678 4679 4680 4681 4686 4687 4689 4691 4693 4694
 4695 4696 4697 4698 4699 4702 4703 4704 4705 4707 4709 4711 4714 4715
 4717 4719 4721 4723 4724 4727 4728 4729 4731 4732 4733 4734 4736 4737
 4739 4740 4746 4747 4748 4749 4751 4752 4753 4754 4755 4758 4759 4760
 4761 4763 4764 4766 4767 4768 4769 4771 4773 4776 4778 4779 4780 4782
 4784 4785 4787 4788 4790 4792 4793 4794 4795 4797 4800 4802 4804 4805
 4807 4808 4809 4815 4818 4820 4822 4823 4828 4829 4830 4832 4833 4834
 4835 4837 4841 4842 4843 4845 4846 4847 4848 4851 4854 4855 4856 4858
 4860 4862 4865 4866 4867 4868 4869 4870 4874 4876 4878 4879 4880 4881
 4884 4885 4889 4890 4892 4894 4896 4897 4898 4899 4900 4901 4902 4903
 4904 4906 4907 4911 4912 4913 4914 4915 4917 4919 4923 4924 4925 4926
 4929 4931 4933 4934 4935 4942 4943 4944 4945 4946 4947 4948 4949 4951
 4952 4954 4955 4958 4959 4961 4963 4964 4965 4966 4967 4968 4970 4972
 4978 4979 4980 4983 4985 4986 4991 4993 4994 4997 4998 5002 5047 5078
 5081 5097 5114 5121 5143 5144 5210 5221 5244 5246 5273 5323 5345 5376
 5377 5436 5443 5449 5450 5483 5491 5500 5548 5599 5607 5620 5630 5645
 5651 5669 5676 5695 5702 5704 5739 5744 5760 5770 5771 5799 5819 5837
 5842 5843 5857 5886 5927 5936 5961 5977 5980 5987 6008 6046 6052 6081
 6084 6085 6094 6095 6146 6156 6157 6182 6241 6249 6252 6281 6291 6330
 6361 6370 6374 6386 6400 6423 6450 6488 6493 6497 6504 6507 6516 6523
 6538 6542 6576 6577 6582 6585 6587 6609 6620 6621 6636 6645 6652 6654
 6671 6703 6715 6718 6724 6749 6756 6780 6835 6867 6875 6887 6888 6889
 6891 6897 6903 6927 6932 6989 6990 7027 7031 7120 7127 7187 7188 7210
 7212 7214 7218 7239 7273 7280 7291 7294 7353 7399 7435 7442 7459 7479
 7487 7488 7492 7519 7546 7556 7593 7598 7607 7650 7697 7699 7708 7763
 7769 7781 7787 7792 7794 7831 7840 7888 7890 7892 7919 7929 7962 7982
 7994]
subset_sample_indices [4351 2101 4868 2824 4178 4666 4482 2474 4361 5097 4112 4691 4717 4300
 2198 6749]
subset_img_paths ['cifar10/cifar10/val/deer/0352.png', 'cifar10/cifar10/val/bird/0102.png', 'cifar10/cifar10/val/deer/0869.png', 'cifar10/cifar10/val/bird/0825.png', 'cifar10/cifar10/val/deer/0179.png', 'cifar10/cifar10/val/deer/0667.png', 'cifar10/cifar10/val/deer/0483.png', 'cifar10/cifar10/val/bird/0475.png', 'cifar10/cifar10/val/deer/0362.png', 'cifar10/cifar10/val/dog/0098.png', 'cifar10/cifar10/val/deer/0113.png', 'cifar10/cifar10/val/deer/0692.png', 'cifar10/cifar10/val/deer/0718.png', 'cifar10/cifar10/val/deer/0301.png', 'cifar10/cifar10/val/bird/0199.png', 'cifar10/cifar10/val/frog/0750.png']
rows:  4
cols:  4
len imgs:  16
=> saved grid_4.pdf, accuracy = 0.585, nsamples = 939
=> grid 4 labels: [4 2 4 2 4 4 4 2 4 5 4 4 4 4 2 6]
label_i 4
preds [4 3 3 ... 6 6 6]
np.where(preds == label_i) (array([   0,    4,    6, ..., 9930, 9942, 9946]),)
sample_indices [   0    4    6 ... 9930 9942 9946]
subset_sample_indices [ 682 8739 8230 8400 8989 8405   33   15 8911  132 8125 8826 8645 8866
 8323 8965]
subset_img_paths ['cifar10/cifar10/val/airplane/0683.png', 'cifar10/cifar10/val/ship/0740.png', 'cifar10/cifar10/val/ship/0231.png', 'cifar10/cifar10/val/ship/0401.png', 'cifar10/cifar10/val/ship/0990.png', 'cifar10/cifar10/val/ship/0406.png', 'cifar10/cifar10/val/airplane/0034.png', 'cifar10/cifar10/val/airplane/0016.png', 'cifar10/cifar10/val/ship/0912.png', 'cifar10/cifar10/val/airplane/0133.png', 'cifar10/cifar10/val/ship/0126.png', 'cifar10/cifar10/val/ship/0827.png', 'cifar10/cifar10/val/ship/0646.png', 'cifar10/cifar10/val/ship/0867.png', 'cifar10/cifar10/val/ship/0324.png', 'cifar10/cifar10/val/ship/0966.png']
rows:  4
cols:  4
len imgs:  16
=> saved grid_5.pdf, accuracy = 0.571, nsamples = 1146
=> grid 5 labels: [0 8 8 8 8 8 0 0 8 0 8 8 8 8 8 8]
label_i 1
preds [4 3 3 ... 6 6 6]
np.where(preds == label_i) (array([ 186,  202,  277, ..., 8629, 8683, 8698]),)
sample_indices [ 186  202  277 ... 8629 8683 8698]
subset_sample_indices [5410 5532 5337 5003 5861 5828 3019 2216 3620 3307 3007 3669 3588 3906
 3653 7758]
subset_img_paths ['cifar10/cifar10/val/dog/0411.png', 'cifar10/cifar10/val/dog/0533.png', 'cifar10/cifar10/val/dog/0338.png', 'cifar10/cifar10/val/dog/0004.png', 'cifar10/cifar10/val/dog/0862.png', 'cifar10/cifar10/val/dog/0829.png', 'cifar10/cifar10/val/cat/0020.png', 'cifar10/cifar10/val/bird/0217.png', 'cifar10/cifar10/val/cat/0621.png', 'cifar10/cifar10/val/cat/0308.png', 'cifar10/cifar10/val/cat/0008.png', 'cifar10/cifar10/val/cat/0670.png', 'cifar10/cifar10/val/cat/0589.png', 'cifar10/cifar10/val/cat/0907.png', 'cifar10/cifar10/val/cat/0654.png', 'cifar10/cifar10/val/horse/0759.png']
rows:  4
cols:  4
len imgs:  16
=> saved grid_6.pdf, accuracy = 0.432, nsamples = 1585
=> grid 6 labels: [5 5 5 5 5 5 3 2 3 3 3 3 3 3 3 7]
label_i 3
preds [4 3 3 ... 6 6 6]
np.where(preds == label_i) (array([   1,    2,    3,    8,    9,   11,   14,   17,   21,   22,   24,
         29,   34,   35,   36,   38,   43,   46,   50,   53,   54,   56,
         60,   68,   71,   76,   77,   79,   84,   85,   88,   93,   95,
         98,   99,  105,  112,  115,  116,  125,  126,  128,  131,  134,
        136,  139,  140,  141,  148,  150,  157,  158,  159,  160,  162,
        165,  174,  176,  177,  180,  183,  184,  187,  192,  193,  195,
        197,  200,  204,  212,  215,  217,  218,  219,  221,  229,  234,
        236,  240,  245,  246,  247,  250,  254,  255,  257,  260,  261,
        263,  265,  266,  267,  273,  278,  279,  280,  285,  286,  287,
        288,  290,  293,  294,  297,  300,  301,  302,  303,  307,  311,
        314,  316,  322,  325,  326,  334,  339,  340,  342,  345,  346,
        351,  356,  361,  370,  373,  375,  378,  380,  383,  389,  397,
        400,  401,  402,  405,  406,  411,  412,  413,  414,  415,  419,
        420,  421,  422,  423,  424,  430,  431,  434,  437,  442,  447,
        449,  450,  452,  453,  454,  455,  460,  465,  470,  471,  474,
        475,  476,  478,  481,  484,  486,  488,  489,  490,  494,  497,
        507,  509,  511,  519,  525,  532,  534,  537,  539,  543,  547,
        552,  558,  563,  564,  565,  566,  569,  575,  580,  583,  584,
        585,  588,  591,  592,  599,  603,  604,  605,  606,  614,  617,
        618,  622,  626,  628,  631,  633,  634,  638,  641,  642,  643,
        646,  648,  649,  652,  656,  664,  672,  675,  679,  685,  686,
        689,  690,  691,  695,  697,  700,  711,  712,  715,  720,  722,
        723,  727,  728,  730,  733,  735,  737,  748,  749,  751,  754,
        756,  757,  759,  761,  765,  766,  768,  770,  773,  775,  776,
        778,  781,  786,  787,  788,  789,  794,  797,  801,  802,  805,
        808,  809,  814,  815,  821,  822,  825,  826,  827,  830,  832,
        843,  849,  854,  857,  862,  865,  866,  867,  868,  873,  875,
        878,  879,  880,  886,  894,  895,  896,  898,  901,  903,  906,
        907,  909,  912,  913,  914,  916,  917,  919,  926,  927,  928,
        932,  934,  935,  939,  945,  947,  950,  954,  955,  956,  960,
        961,  963,  965,  966,  969,  970,  971,  975,  976,  978,  979,
        984,  990,  992,  995,  996, 1186, 2003, 2004, 2005, 2008, 2011,
       2016, 2017, 2018, 2031, 2032, 2039, 2042, 2047, 2049, 2052, 2053,
       2057, 2058, 2062, 2064, 2065, 2067, 2068, 2070, 2073, 2074, 2075,
       2076, 2077, 2081, 2086, 2087, 2088, 2089, 2090, 2091, 2093, 2095,
       2098, 2100, 2103, 2105, 2107, 2109, 2110, 2113, 2115, 2122, 2123,
       2125, 2126, 2127, 2134, 2135, 2136, 2138, 2139, 2143, 2144, 2145,
       2147, 2151, 2152, 2153, 2157, 2162, 2163, 2171, 2173, 2175, 2177,
       2178, 2180, 2182, 2187, 2200, 2202, 2204, 2206, 2211, 2215, 2217,
       2219, 2220, 2222, 2225, 2233, 2235, 2236, 2239, 2243, 2247, 2249,
       2250, 2251, 2254, 2257, 2258, 2267, 2269, 2270, 2273, 2277, 2285,
       2287, 2288, 2295, 2303, 2304, 2305, 2306, 2308, 2309, 2310, 2311,
       2318, 2321, 2322, 2325, 2326, 2329, 2330, 2338, 2339, 2340, 2345,
       2350, 2351, 2352, 2357, 2358, 2359, 2360, 2361, 2367, 2369, 2371,
       2372, 2377, 2378, 2381, 2387, 2389, 2391, 2393, 2397, 2399, 2404,
       2407, 2409, 2410, 2413, 2415, 2429, 2431, 2434, 2436, 2438, 2440,
       2446, 2448, 2451, 2452, 2455, 2457, 2460, 2465, 2468, 2471, 2476,
       2477, 2482, 2484, 2487, 2488, 2499, 2501, 2503, 2505, 2509, 2512,
       2515, 2518, 2519, 2522, 2526, 2528, 2531, 2532, 2535, 2544, 2546,
       2550, 2551, 2554, 2555, 2556, 2560, 2561, 2565, 2567, 2577, 2578,
       2581, 2585, 2593, 2596, 2600, 2603, 2604, 2608, 2609, 2616, 2618,
       2619, 2621, 2640, 2641, 2642, 2643, 2649, 2651, 2653, 2655, 2658,
       2659, 2660, 2663, 2667, 2670, 2672, 2678, 2690, 2694, 2695, 2697,
       2698, 2703, 2704, 2706, 2707, 2708, 2711, 2715, 2718, 2719, 2722,
       2723, 2724, 2725, 2726, 2727, 2728, 2731, 2734, 2735, 2736, 2740,
       2743, 2748, 2749, 2750, 2754, 2755, 2756, 2757, 2763, 2765, 2772,
       2778, 2780, 2781, 2782, 2788, 2790, 2793, 2794, 2803, 2807, 2809,
       2811, 2812, 2813, 2816, 2819, 2820, 2822, 2830, 2831, 2832, 2844,
       2849, 2850, 2853, 2857, 2862, 2865, 2868, 2869, 2870, 2871, 2872,
       2873, 2874, 2877, 2882, 2885, 2886, 2887, 2889, 2896, 2899, 2904,
       2909, 2917, 2921, 2922, 2923, 2931, 2932, 2936, 2942, 2946, 2954,
       2955, 2960, 2961, 2963, 2967, 2971, 2973, 2980, 2982, 2984, 2985,
       2988, 2992, 2994, 2997, 3047, 3067, 3077, 3090, 3162, 3180, 3196,
       3211, 3216, 3231, 3248, 3259, 3299, 3332, 3337, 3354, 3378, 3381,
       3392, 3420, 3421, 3456, 3467, 3469, 3479, 3481, 3586, 3603, 3609,
       3610, 3612, 3617, 3623, 3624, 3625, 3628, 3649, 3695, 3699, 3794,
       3831, 3840, 3856, 3897, 3900, 3974, 3987, 3989, 4004, 4044, 4065,
       4066, 4071, 4116, 4155, 4168, 4286, 4364, 4365, 4469, 4488, 4503,
       4546, 4606, 4610, 4611, 4796, 4810, 4825, 4871, 4962, 5024, 5075,
       5102, 5262, 5454, 5550, 5631, 5666, 5859, 5933, 5985, 6018, 6037,
       6050, 6083, 6108, 6221, 6234, 6290, 6333, 6352, 6363, 6413, 6422,
       6468, 6482, 6526, 6561, 6564, 6568, 6632, 6667, 6746, 6796, 6798,
       6816, 6851, 6857, 6883, 6898, 6915, 6938, 6951, 6971, 6999, 7100,
       7156, 7172, 7175, 7186, 7229, 7300, 7312, 7386, 7481, 7496, 7532,
       7624, 7702, 7723, 7815, 7885, 7913, 7924, 8046, 8249, 8311, 8321,
       8348, 8519, 8581, 8821, 8873, 8970, 8975, 9058, 9330, 9711, 9757,
       9882]),)
sample_indices [   1    2    3    8    9   11   14   17   21   22   24   29   34   35
   36   38   43   46   50   53   54   56   60   68   71   76   77   79
   84   85   88   93   95   98   99  105  112  115  116  125  126  128
  131  134  136  139  140  141  148  150  157  158  159  160  162  165
  174  176  177  180  183  184  187  192  193  195  197  200  204  212
  215  217  218  219  221  229  234  236  240  245  246  247  250  254
  255  257  260  261  263  265  266  267  273  278  279  280  285  286
  287  288  290  293  294  297  300  301  302  303  307  311  314  316
  322  325  326  334  339  340  342  345  346  351  356  361  370  373
  375  378  380  383  389  397  400  401  402  405  406  411  412  413
  414  415  419  420  421  422  423  424  430  431  434  437  442  447
  449  450  452  453  454  455  460  465  470  471  474  475  476  478
  481  484  486  488  489  490  494  497  507  509  511  519  525  532
  534  537  539  543  547  552  558  563  564  565  566  569  575  580
  583  584  585  588  591  592  599  603  604  605  606  614  617  618
  622  626  628  631  633  634  638  641  642  643  646  648  649  652
  656  664  672  675  679  685  686  689  690  691  695  697  700  711
  712  715  720  722  723  727  728  730  733  735  737  748  749  751
  754  756  757  759  761  765  766  768  770  773  775  776  778  781
  786  787  788  789  794  797  801  802  805  808  809  814  815  821
  822  825  826  827  830  832  843  849  854  857  862  865  866  867
  868  873  875  878  879  880  886  894  895  896  898  901  903  906
  907  909  912  913  914  916  917  919  926  927  928  932  934  935
  939  945  947  950  954  955  956  960  961  963  965  966  969  970
  971  975  976  978  979  984  990  992  995  996 1186 2003 2004 2005
 2008 2011 2016 2017 2018 2031 2032 2039 2042 2047 2049 2052 2053 2057
 2058 2062 2064 2065 2067 2068 2070 2073 2074 2075 2076 2077 2081 2086
 2087 2088 2089 2090 2091 2093 2095 2098 2100 2103 2105 2107 2109 2110
 2113 2115 2122 2123 2125 2126 2127 2134 2135 2136 2138 2139 2143 2144
 2145 2147 2151 2152 2153 2157 2162 2163 2171 2173 2175 2177 2178 2180
 2182 2187 2200 2202 2204 2206 2211 2215 2217 2219 2220 2222 2225 2233
 2235 2236 2239 2243 2247 2249 2250 2251 2254 2257 2258 2267 2269 2270
 2273 2277 2285 2287 2288 2295 2303 2304 2305 2306 2308 2309 2310 2311
 2318 2321 2322 2325 2326 2329 2330 2338 2339 2340 2345 2350 2351 2352
 2357 2358 2359 2360 2361 2367 2369 2371 2372 2377 2378 2381 2387 2389
 2391 2393 2397 2399 2404 2407 2409 2410 2413 2415 2429 2431 2434 2436
 2438 2440 2446 2448 2451 2452 2455 2457 2460 2465 2468 2471 2476 2477
 2482 2484 2487 2488 2499 2501 2503 2505 2509 2512 2515 2518 2519 2522
 2526 2528 2531 2532 2535 2544 2546 2550 2551 2554 2555 2556 2560 2561
 2565 2567 2577 2578 2581 2585 2593 2596 2600 2603 2604 2608 2609 2616
 2618 2619 2621 2640 2641 2642 2643 2649 2651 2653 2655 2658 2659 2660
 2663 2667 2670 2672 2678 2690 2694 2695 2697 2698 2703 2704 2706 2707
 2708 2711 2715 2718 2719 2722 2723 2724 2725 2726 2727 2728 2731 2734
 2735 2736 2740 2743 2748 2749 2750 2754 2755 2756 2757 2763 2765 2772
 2778 2780 2781 2782 2788 2790 2793 2794 2803 2807 2809 2811 2812 2813
 2816 2819 2820 2822 2830 2831 2832 2844 2849 2850 2853 2857 2862 2865
 2868 2869 2870 2871 2872 2873 2874 2877 2882 2885 2886 2887 2889 2896
 2899 2904 2909 2917 2921 2922 2923 2931 2932 2936 2942 2946 2954 2955
 2960 2961 2963 2967 2971 2973 2980 2982 2984 2985 2988 2992 2994 2997
 3047 3067 3077 3090 3162 3180 3196 3211 3216 3231 3248 3259 3299 3332
 3337 3354 3378 3381 3392 3420 3421 3456 3467 3469 3479 3481 3586 3603
 3609 3610 3612 3617 3623 3624 3625 3628 3649 3695 3699 3794 3831 3840
 3856 3897 3900 3974 3987 3989 4004 4044 4065 4066 4071 4116 4155 4168
 4286 4364 4365 4469 4488 4503 4546 4606 4610 4611 4796 4810 4825 4871
 4962 5024 5075 5102 5262 5454 5550 5631 5666 5859 5933 5985 6018 6037
 6050 6083 6108 6221 6234 6290 6333 6352 6363 6413 6422 6468 6482 6526
 6561 6564 6568 6632 6667 6746 6796 6798 6816 6851 6857 6883 6898 6915
 6938 6951 6971 6999 7100 7156 7172 7175 7186 7229 7300 7312 7386 7481
 7496 7532 7624 7702 7723 7815 7885 7913 7924 8046 8249 8311 8321 8348
 8519 8581 8821 8873 8970 8975 9058 9330 9711 9757 9882]
subset_sample_indices [2482 3603  454  415 2136 2503  827  689  604 4503   21 4610  649  794
  583  634]
subset_img_paths ['cifar10/cifar10/val/bird/0483.png', 'cifar10/cifar10/val/cat/0604.png', 'cifar10/cifar10/val/airplane/0455.png', 'cifar10/cifar10/val/airplane/0416.png', 'cifar10/cifar10/val/bird/0137.png', 'cifar10/cifar10/val/bird/0504.png', 'cifar10/cifar10/val/airplane/0828.png', 'cifar10/cifar10/val/airplane/0690.png', 'cifar10/cifar10/val/airplane/0605.png', 'cifar10/cifar10/val/deer/0504.png', 'cifar10/cifar10/val/airplane/0022.png', 'cifar10/cifar10/val/deer/0611.png', 'cifar10/cifar10/val/airplane/0650.png', 'cifar10/cifar10/val/airplane/0795.png', 'cifar10/cifar10/val/airplane/0584.png', 'cifar10/cifar10/val/airplane/0635.png']
rows:  4
cols:  4
len imgs:  16
=> saved grid_7.pdf, accuracy = 0.405, nsamples = 837
=> grid 7 labels: [2 3 0 0 2 2 0 0 0 4 0 4 0 0 0 0]
label_i 0
preds [4 3 3 ... 6 6 6]
np.where(preds == label_i) (array([  37,   48,   61, ..., 9728, 9779, 9838]),)
sample_indices [  37   48   61 ... 9728 9779 9838]
subset_sample_indices [ 540 3830 3132 9198 5618 5120 7005 2128 3647 3731  101 5068 3485 5466
 2148 7103]
subset_img_paths ['cifar10/cifar10/val/airplane/0541.png', 'cifar10/cifar10/val/cat/0831.png', 'cifar10/cifar10/val/cat/0133.png', 'cifar10/cifar10/val/truck/0199.png', 'cifar10/cifar10/val/dog/0619.png', 'cifar10/cifar10/val/dog/0121.png', 'cifar10/cifar10/val/horse/0006.png', 'cifar10/cifar10/val/bird/0129.png', 'cifar10/cifar10/val/cat/0648.png', 'cifar10/cifar10/val/cat/0732.png', 'cifar10/cifar10/val/airplane/0102.png', 'cifar10/cifar10/val/dog/0069.png', 'cifar10/cifar10/val/cat/0486.png', 'cifar10/cifar10/val/dog/0467.png', 'cifar10/cifar10/val/bird/0149.png', 'cifar10/cifar10/val/horse/0104.png']
rows:  4
cols:  4
len imgs:  16
=> saved grid_8.pdf, accuracy = 0.328, nsamples = 1228
=> grid 8 labels: [0 3 3 9 5 5 7 2 3 3 0 5 3 5 2 7]
label_i 7
preds [4 3 3 ... 6 6 6]
np.where(preds == label_i) (array([   5,   12,   20,   28,   31,   42,   45,   49,   55,   65,   89,
         91,  107,  108,  110,  111,  114,  123,  124,  127,  129,  130,
        133,  135,  143,  144,  145,  147,  149,  154,  163,  171,  172,
        179,  189,  194,  199,  205,  208,  211,  222,  224,  225,  226,
        227,  230,  232,  233,  237,  238,  249,  252,  253,  264,  270,
        284,  292,  299,  312,  317,  321,  323,  329,  333,  336,  343,
        348,  352,  358,  362,  363,  366,  367,  371,  372,  390,  409,
        428,  432,  440,  445,  446,  448,  457,  466,  468,  469,  473,
        482,  499,  501,  508,  510,  516,  520,  526,  528,  530,  531,
        533,  549,  553,  557,  560,  567,  568,  570,  577,  596,  600,
        612,  620,  625,  629,  630,  655,  659,  663,  665,  670,  673,
        676,  688,  699,  702,  708,  716,  725,  729,  731,  734,  740,
        744,  753,  758,  767,  769,  774,  780,  793,  795,  799,  806,
        812,  816,  829,  837,  842,  848,  852,  853,  860,  864,  869,
        870,  872,  881,  883,  897,  921,  923,  929,  948,  968,  974,
        977,  981,  982,  993,  998, 1026, 1028, 1037, 1073, 1093, 1144,
       1169, 1198, 1212, 1220, 1245, 1259, 1300, 1301, 1314, 1336, 1351,
       1360, 1361, 1368, 1394, 1396, 1404, 1407, 1416, 1417, 1460, 1466,
       1481, 1490, 1509, 1518, 1534, 1539, 1552, 1560, 1572, 1574, 1593,
       1608, 1609, 1613, 1623, 1639, 1656, 1669, 1686, 1688, 1737, 1745,
       1768, 1821, 1826, 1850, 1855, 1857, 1871, 1885, 1899, 1913, 1924,
       1942, 1967, 1975, 1981, 2061, 2066, 2099, 2142, 2161, 2256, 2263,
       2281, 2324, 2327, 2336, 2370, 2453, 2506, 2623, 2626, 2721, 2901,
       2903, 2937, 2945, 2970, 2987, 3086, 3489, 3684, 3908, 3988, 4206,
       4297, 4512, 4618, 4656, 4682, 4803, 5242, 5343, 6195, 6257, 6316,
       6424, 6425, 6464, 6467, 6474, 6484, 6559, 6638, 6729, 6818, 6866,
       6986, 6995, 7112, 7338, 7588, 7707, 8001, 8002, 8005, 8013, 8014,
       8018, 8019, 8027, 8029, 8030, 8033, 8041, 8042, 8047, 8050, 8053,
       8057, 8060, 8061, 8067, 8078, 8083, 8087, 8089, 8097, 8098, 8099,
       8101, 8102, 8103, 8104, 8105, 8108, 8113, 8120, 8124, 8126, 8128,
       8131, 8136, 8138, 8141, 8143, 8144, 8146, 8147, 8150, 8153, 8162,
       8163, 8169, 8170, 8177, 8178, 8183, 8189, 8193, 8200, 8209, 8216,
       8220, 8222, 8223, 8228, 8229, 8235, 8238, 8246, 8255, 8260, 8266,
       8267, 8268, 8276, 8277, 8278, 8284, 8322, 8325, 8334, 8337, 8345,
       8358, 8359, 8362, 8365, 8372, 8375, 8377, 8379, 8382, 8383, 8390,
       8397, 8401, 8406, 8407, 8409, 8410, 8414, 8421, 8425, 8426, 8439,
       8450, 8459, 8463, 8464, 8473, 8477, 8480, 8484, 8492, 8515, 8518,
       8531, 8532, 8534, 8538, 8539, 8544, 8545, 8551, 8562, 8569, 8572,
       8573, 8574, 8579, 8582, 8585, 8587, 8596, 8599, 8605, 8615, 8616,
       8624, 8633, 8638, 8640, 8644, 8646, 8650, 8653, 8656, 8658, 8660,
       8666, 8667, 8668, 8669, 8671, 8672, 8678, 8679, 8681, 8684, 8687,
       8689, 8690, 8691, 8692, 8694, 8695, 8697, 8702, 8704, 8715, 8725,
       8726, 8731, 8736, 8743, 8744, 8751, 8756, 8757, 8760, 8766, 8768,
       8769, 8776, 8779, 8789, 8791, 8792, 8794, 8805, 8807, 8808, 8809,
       8814, 8820, 8833, 8840, 8842, 8844, 8845, 8846, 8847, 8855, 8865,
       8876, 8880, 8883, 8884, 8885, 8887, 8894, 8896, 8898, 8899, 8900,
       8914, 8919, 8920, 8923, 8925, 8932, 8935, 8943, 8944, 8948, 8950,
       8955, 8958, 8962, 8964, 8966, 8968, 8969, 8973, 8974, 8978, 8980,
       8993, 8999, 9087, 9207, 9247, 9353, 9357, 9387, 9467, 9534, 9643,
       9666, 9710, 9778, 9782, 9977, 9984]),)
sample_indices [   5   12   20   28   31   42   45   49   55   65   89   91  107  108
  110  111  114  123  124  127  129  130  133  135  143  144  145  147
  149  154  163  171  172  179  189  194  199  205  208  211  222  224
  225  226  227  230  232  233  237  238  249  252  253  264  270  284
  292  299  312  317  321  323  329  333  336  343  348  352  358  362
  363  366  367  371  372  390  409  428  432  440  445  446  448  457
  466  468  469  473  482  499  501  508  510  516  520  526  528  530
  531  533  549  553  557  560  567  568  570  577  596  600  612  620
  625  629  630  655  659  663  665  670  673  676  688  699  702  708
  716  725  729  731  734  740  744  753  758  767  769  774  780  793
  795  799  806  812  816  829  837  842  848  852  853  860  864  869
  870  872  881  883  897  921  923  929  948  968  974  977  981  982
  993  998 1026 1028 1037 1073 1093 1144 1169 1198 1212 1220 1245 1259
 1300 1301 1314 1336 1351 1360 1361 1368 1394 1396 1404 1407 1416 1417
 1460 1466 1481 1490 1509 1518 1534 1539 1552 1560 1572 1574 1593 1608
 1609 1613 1623 1639 1656 1669 1686 1688 1737 1745 1768 1821 1826 1850
 1855 1857 1871 1885 1899 1913 1924 1942 1967 1975 1981 2061 2066 2099
 2142 2161 2256 2263 2281 2324 2327 2336 2370 2453 2506 2623 2626 2721
 2901 2903 2937 2945 2970 2987 3086 3489 3684 3908 3988 4206 4297 4512
 4618 4656 4682 4803 5242 5343 6195 6257 6316 6424 6425 6464 6467 6474
 6484 6559 6638 6729 6818 6866 6986 6995 7112 7338 7588 7707 8001 8002
 8005 8013 8014 8018 8019 8027 8029 8030 8033 8041 8042 8047 8050 8053
 8057 8060 8061 8067 8078 8083 8087 8089 8097 8098 8099 8101 8102 8103
 8104 8105 8108 8113 8120 8124 8126 8128 8131 8136 8138 8141 8143 8144
 8146 8147 8150 8153 8162 8163 8169 8170 8177 8178 8183 8189 8193 8200
 8209 8216 8220 8222 8223 8228 8229 8235 8238 8246 8255 8260 8266 8267
 8268 8276 8277 8278 8284 8322 8325 8334 8337 8345 8358 8359 8362 8365
 8372 8375 8377 8379 8382 8383 8390 8397 8401 8406 8407 8409 8410 8414
 8421 8425 8426 8439 8450 8459 8463 8464 8473 8477 8480 8484 8492 8515
 8518 8531 8532 8534 8538 8539 8544 8545 8551 8562 8569 8572 8573 8574
 8579 8582 8585 8587 8596 8599 8605 8615 8616 8624 8633 8638 8640 8644
 8646 8650 8653 8656 8658 8660 8666 8667 8668 8669 8671 8672 8678 8679
 8681 8684 8687 8689 8690 8691 8692 8694 8695 8697 8702 8704 8715 8725
 8726 8731 8736 8743 8744 8751 8756 8757 8760 8766 8768 8769 8776 8779
 8789 8791 8792 8794 8805 8807 8808 8809 8814 8820 8833 8840 8842 8844
 8845 8846 8847 8855 8865 8876 8880 8883 8884 8885 8887 8894 8896 8898
 8899 8900 8914 8919 8920 8923 8925 8932 8935 8943 8944 8948 8950 8955
 8958 8962 8964 8966 8968 8969 8973 8974 8978 8980 8993 8999 9087 9207
 9247 9353 9357 9387 9467 9534 9643 9666 9710 9778 9782 9977 9984]
subset_sample_indices [2161  629 8113  348 8794  560 8401 8805 8473  205  366 8128 8687 8640
 8061 8894]
subset_img_paths ['cifar10/cifar10/val/bird/0162.png', 'cifar10/cifar10/val/airplane/0630.png', 'cifar10/cifar10/val/ship/0114.png', 'cifar10/cifar10/val/airplane/0349.png', 'cifar10/cifar10/val/ship/0795.png', 'cifar10/cifar10/val/airplane/0561.png', 'cifar10/cifar10/val/ship/0402.png', 'cifar10/cifar10/val/ship/0806.png', 'cifar10/cifar10/val/ship/0474.png', 'cifar10/cifar10/val/airplane/0206.png', 'cifar10/cifar10/val/airplane/0367.png', 'cifar10/cifar10/val/ship/0129.png', 'cifar10/cifar10/val/ship/0688.png', 'cifar10/cifar10/val/ship/0641.png', 'cifar10/cifar10/val/ship/0062.png', 'cifar10/cifar10/val/ship/0895.png']
rows:  4
cols:  4
len imgs:  16
=> saved grid_9.pdf, accuracy = 0.312, nsamples = 545
=> grid 9 labels: [2 0 8 0 8 0 8 8 8 0 0 8 8 8 8 8]
